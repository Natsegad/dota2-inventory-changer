// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dotaproto.proto

#include "dotaproto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgSOIDOwner::CMsgSOIDOwner(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(uint64_t{0u})
  , type_(0u){}
struct CMsgSOIDOwnerDefaultTypeInternal {
  constexpr CMsgSOIDOwnerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOIDOwnerDefaultTypeInternal() {}
  union {
    CMsgSOIDOwner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOIDOwnerDefaultTypeInternal _CMsgSOIDOwner_default_instance_;
constexpr CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gift_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(uint64_t{0u})
  , give_to_account_id_(0u){}
struct CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal {
  constexpr CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal() {}
  union {
    CMsgClientToGCWrapAndDeliverGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal _CMsgClientToGCWrapAndDeliverGift_default_instance_;
constexpr CMsgSOSingleObject::CMsgSOSingleObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_soid_(nullptr)
  , version_(uint64_t{0u})
  , type_id_(0)
  , service_id_(0u){}
struct CMsgSOSingleObjectDefaultTypeInternal {
  constexpr CMsgSOSingleObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOSingleObjectDefaultTypeInternal() {}
  union {
    CMsgSOSingleObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOSingleObjectDefaultTypeInternal _CMsgSOSingleObject_default_instance_;
constexpr CMsgRecentMatchInfo::CMsgRecentMatchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(uint64_t{0u})
  , game_mode_(0)

  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , duration_(0u)
  , player_slot_(0u)
  , match_outcome_(0)

  , timestamp_(0u){}
struct CMsgRecentMatchInfoDefaultTypeInternal {
  constexpr CMsgRecentMatchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRecentMatchInfoDefaultTypeInternal() {}
  union {
    CMsgRecentMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRecentMatchInfoDefaultTypeInternal _CMsgRecentMatchInfo_default_instance_;
constexpr CMsgClientToGCRequestSocialFeedResponse::CMsgClientToGCRequestSocialFeedResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unk_1_(uint64_t{0u})
  , unk_2_(uint64_t{0u})
  , unk_3_(uint64_t{0u}){}
struct CMsgClientToGCRequestSocialFeedResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRequestSocialFeedResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestSocialFeedResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestSocialFeedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRequestSocialFeedResponseDefaultTypeInternal _CMsgClientToGCRequestSocialFeedResponse_default_instance_;
constexpr CMsgBattleCupVictory::CMsgBattleCupVictory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , win_date_(0u)
  , valid_until_(0u)
  , skill_level_(0u)
  , tournament_id_(0u)
  , division_id_(0u)
  , team_id_(0u)
  , streak_(0u)
  , trophy_id_(0u){}
struct CMsgBattleCupVictoryDefaultTypeInternal {
  constexpr CMsgBattleCupVictoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBattleCupVictoryDefaultTypeInternal() {}
  union {
    CMsgBattleCupVictory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBattleCupVictoryDefaultTypeInternal _CMsgBattleCupVictory_default_instance_;
constexpr CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(uint64_t{0u})
  , style_index_(0u){}
struct CMsgClientToGCSetItemStyleDefaultTypeInternal {
  constexpr CMsgClientToGCSetItemStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemStyleDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSetItemStyleDefaultTypeInternal _CMsgClientToGCSetItemStyle_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trophy_id_(0u)
  , trophy_score_(0u){}
struct CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Trophy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_score_(0u)
  , stat_id_(3)
{}
struct CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_item_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(uint64_t{0u}){}
struct CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Item_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , hero_wins_(0u)
  , hero_losses_(0u){}
struct CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : emoticon_id_(0u){}
struct CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Emoticon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u){}
struct CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Team_default_instance_;
constexpr CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trophy_(nullptr)
  , stat_(nullptr)
  , item_(nullptr)
  , hero_(nullptr)
  , emoticon_(nullptr)
  , team_(nullptr)
  , slot_id_(0u){}
struct CMsgDOTAProfileCard_SlotDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_SlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_SlotDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_SlotDefaultTypeInternal _CMsgDOTAProfileCard_Slot_default_instance_;
constexpr CMsgDOTAProfileCard::CMsgDOTAProfileCard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , recent_battle_cup_victory_(nullptr)
  , account_id_(0u)
  , badge_points_(0u)
  , event_points_(0u)
  , event_id_(0u)
  , rank_tier_(0u)
  , leaderboard_rank_(0u)
  , is_plus_subscriber_(false)
  , plus_original_start_date_(0u)
  , rank_tier_score_(0u)
  , previous_rank_tier_(0u)
  , rank_tier_mmr_type_(0u)
  , leaderboard_rank_core_(0u)
  , rank_tier_peak_(0u)
  , title_(0u)
  , favorite_team_packed_(uint64_t{0u}){}
struct CMsgDOTAProfileCardDefaultTypeInternal {
  constexpr CMsgDOTAProfileCardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCardDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCardDefaultTypeInternal _CMsgDOTAProfileCard_default_instance_;
constexpr CMsgSuccessfulHero::CMsgSuccessfulHero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , win_percent_(0)
  , longest_streak_(0u){}
struct CMsgSuccessfulHeroDefaultTypeInternal {
  constexpr CMsgSuccessfulHeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSuccessfulHeroDefaultTypeInternal() {}
  union {
    CMsgSuccessfulHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSuccessfulHeroDefaultTypeInternal _CMsgSuccessfulHero_default_instance_;
constexpr CMsgClientToGCGetAllHeroProgressResponse::CMsgClientToGCGetAllHeroProgressResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , curr_hero_id_(0u)
  , laps_completed_(0u)
  , curr_hero_games_(0u)
  , curr_lap_time_started_(0u)
  , curr_lap_games_(0u)
  , best_lap_games_(0u)
  , best_lap_time_(0u)
  , lap_heroes_completed_(0u)
  , lap_heroes_remaining_(0u)
  , next_hero_id_(0u)
  , prev_hero_id_(0u)
  , prev_hero_games_(0u)
  , prev_avg_tries_(0)
  , curr_avg_tries_(0)
  , next_avg_tries_(0)
  , full_lap_avg_tries_(0)
  , curr_lap_avg_tries_(0)
  , start_hero_id_(0u){}
struct CMsgClientToGCGetAllHeroProgressResponseDefaultTypeInternal {
  constexpr CMsgClientToGCGetAllHeroProgressResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetAllHeroProgressResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetAllHeroProgressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetAllHeroProgressResponseDefaultTypeInternal _CMsgClientToGCGetAllHeroProgressResponse_default_instance_;
constexpr CMsgProfileResponse_FeaturedHero::CMsgProfileResponse_FeaturedHero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equipped_econ_items_()
  , plus_hero_relics_item_(nullptr)
  , hero_id_(0u)
  , manually_set_(false)
  , plus_hero_xp_(0u){}
struct CMsgProfileResponse_FeaturedHeroDefaultTypeInternal {
  constexpr CMsgProfileResponse_FeaturedHeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProfileResponse_FeaturedHeroDefaultTypeInternal() {}
  union {
    CMsgProfileResponse_FeaturedHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProfileResponse_FeaturedHeroDefaultTypeInternal _CMsgProfileResponse_FeaturedHero_default_instance_;
constexpr CMsgProfileResponse_MatchInfo::CMsgProfileResponse_MatchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(uint64_t{0u})
  , match_timestamp_(0u)
  , performance_rating_(0)
  , hero_id_(0u)
  , won_match_(false){}
struct CMsgProfileResponse_MatchInfoDefaultTypeInternal {
  constexpr CMsgProfileResponse_MatchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProfileResponse_MatchInfoDefaultTypeInternal() {}
  union {
    CMsgProfileResponse_MatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProfileResponse_MatchInfoDefaultTypeInternal _CMsgProfileResponse_MatchInfo_default_instance_;
constexpr CMsgProfileResponse::CMsgProfileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : featured_heroes_()
  , recent_matches_()
  , successful_heroes_()
  , background_item_(nullptr)
  , recent_match_details_(nullptr)
  , result_(0)
{}
struct CMsgProfileResponseDefaultTypeInternal {
  constexpr CMsgProfileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProfileResponseDefaultTypeInternal() {}
  union {
    CMsgProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProfileResponseDefaultTypeInternal _CMsgProfileResponse_default_instance_;
constexpr CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_id_(0){}
struct CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal {
  constexpr CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal() {}
  union {
    CMsgSOMultipleObjects_SingleObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal _CMsgSOMultipleObjects_SingleObject_default_instance_;
constexpr CMsgSOMultipleObjects::CMsgSOMultipleObjects(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_modified_()
  , objects_added_()
  , objects_removed_()
  , owner_soid_(nullptr)
  , version_(uint64_t{0u})
  , service_id_(0u){}
struct CMsgSOMultipleObjectsDefaultTypeInternal {
  constexpr CMsgSOMultipleObjectsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOMultipleObjectsDefaultTypeInternal() {}
  union {
    CMsgSOMultipleObjects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOMultipleObjectsDefaultTypeInternal _CMsgSOMultipleObjects_default_instance_;
constexpr CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_data_()
  , type_id_(0){}
struct CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal {
  constexpr CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscribed_SubscribedType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
constexpr CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_()
  , service_list_()
  , owner_soid_(nullptr)
  , version_(uint64_t{0u})
  , sync_version_(uint64_t{0u})
  , service_id_(0u){}
struct CMsgSOCacheSubscribedDefaultTypeInternal {
  constexpr CMsgSOCacheSubscribedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscribedDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscribedDefaultTypeInternal _CMsgSOCacheSubscribed_default_instance_;
constexpr CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tip_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_TipAlertDefaultTypeInternal {
  constexpr CDOTAClientMsg_TipAlertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_TipAlertDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_TipAlert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_TipAlertDefaultTypeInternal _CDOTAClientMsg_TipAlert_default_instance_;
constexpr CMsgClientToGCGetTrophyListResponse_Trophy::CMsgClientToGCGetTrophyListResponse_Trophy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trophy_id_(0u)
  , trophy_score_(0u)
  , last_updated_(0u){}
struct CMsgClientToGCGetTrophyListResponse_TrophyDefaultTypeInternal {
  constexpr CMsgClientToGCGetTrophyListResponse_TrophyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetTrophyListResponse_TrophyDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetTrophyListResponse_Trophy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetTrophyListResponse_TrophyDefaultTypeInternal _CMsgClientToGCGetTrophyListResponse_Trophy_default_instance_;
constexpr CMsgClientToGCGetTrophyListResponse::CMsgClientToGCGetTrophyListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trophies_()
  , profile_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u){}
struct CMsgClientToGCGetTrophyListResponseDefaultTypeInternal {
  constexpr CMsgClientToGCGetTrophyListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetTrophyListResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetTrophyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetTrophyListResponseDefaultTypeInternal _CMsgClientToGCGetTrophyListResponse_default_instance_;
constexpr CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCLCMsg_SplitPlayerConnectDefaultTypeInternal {
  constexpr CCLCMsg_SplitPlayerConnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_SplitPlayerConnectDefaultTypeInternal() {}
  union {
    CCLCMsg_SplitPlayerConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_SplitPlayerConnectDefaultTypeInternal _CCLCMsg_SplitPlayerConnect_default_instance_;
constexpr CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal {
  constexpr CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EventCNY2015Cmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
constexpr CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announce_wager_(false){}
struct CDOTAClientMsg_RankWagerDefaultTypeInternal {
  constexpr CDOTAClientMsg_RankWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_RankWagerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_RankWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_RankWagerDefaultTypeInternal _CDOTAClientMsg_RankWager_default_instance_;
constexpr CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recipient_player_id_(0u){}
struct CDOTAClientMsg_EventPointsTipDefaultTypeInternal {
  constexpr CDOTAClientMsg_EventPointsTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_EventPointsTipDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_EventPointsTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_EventPointsTipDefaultTypeInternal _CDOTAClientMsg_EventPointsTip_default_instance_;
constexpr CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wager_amount_(0u){}
struct CDOTAClientMsg_CoinWagerDefaultTypeInternal {
  constexpr CDOTAClientMsg_CoinWagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_CoinWagerDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_CoinWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_CoinWagerDefaultTypeInternal _CDOTAClientMsg_CoinWager_default_instance_;
constexpr CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soid_(nullptr)
  , version_(uint64_t{0u})
  , service_id_(0u)
  , cached_file_version_(0u){}
struct CMsgSOCacheHaveVersionDefaultTypeInternal {
  constexpr CMsgSOCacheHaveVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheHaveVersionDefaultTypeInternal() {}
  union {
    CMsgSOCacheHaveVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheHaveVersionDefaultTypeInternal _CMsgSOCacheHaveVersion_default_instance_;
constexpr CMsgGCToClientPlayerStatsResponse::CMsgGCToClientPlayerStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_stats_()
  , account_id_(0u)
  , match_count_(0u)
  , mean_gpm_(0)
  , mean_xppm_(0)
  , mean_lasthits_(0)
  , rampages_(0u)
  , triple_kills_(0u)
  , first_blood_claimed_(0u)
  , first_blood_given_(0u)
  , couriers_killed_(0u)
  , aegises_snatched_(0u)
  , cheeses_eaten_(0u)
  , creeps_stacked_(0u)
  , fight_score_(0)
  , farm_score_(0)
  , support_score_(0)
  , push_score_(0)
  , versatility_score_(0)
  , mean_networth_(0)
  , mean_damage_(0)
  , mean_heals_(0)
  , rapiers_purchased_(0u){}
struct CMsgGCToClientPlayerStatsResponseDefaultTypeInternal {
  constexpr CMsgGCToClientPlayerStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPlayerStatsResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPlayerStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPlayerStatsResponseDefaultTypeInternal _CMsgGCToClientPlayerStatsResponse_default_instance_;
constexpr CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(uint64_t{0u})
  , new_class_(0u)
  , new_slot_(0u)
  , style_index_(0u){}
struct CMsgAdjustItemEquippedStateDefaultTypeInternal {
  constexpr CMsgAdjustItemEquippedStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAdjustItemEquippedStateDefaultTypeInternal() {}
  union {
    CMsgAdjustItemEquippedState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAdjustItemEquippedStateDefaultTypeInternal _CMsgAdjustItemEquippedState_default_instance_;
constexpr CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equips_(){}
struct CMsgClientToGCEquipItemsDefaultTypeInternal {
  constexpr CMsgClientToGCEquipItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCEquipItemsDefaultTypeInternal() {}
  union {
    CMsgClientToGCEquipItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCEquipItemsDefaultTypeInternal _CMsgClientToGCEquipItems_default_instance_;
constexpr CMsgClientHello::CMsgClientHello(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socache_have_versions_()
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamdatagram_login_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u)
  , client_session_need_(0u)
  , client_launcher_(0)

  , client_language_(0u)
  , engine_(0)

  , platform_id_(0u)
  , os_type_(0)
  , render_system_(0u)
  , render_system_req_(0u)
  , screen_width_(0u)
  , screen_height_(0u)
  , screen_refresh_(0u)
  , render_width_(0u)
  , render_height_(0u)
  , swap_width_(0u)
  , swap_height_(0u)
  , is_steam_china_(false){}
struct CMsgClientHelloDefaultTypeInternal {
  constexpr CMsgClientHelloDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientHelloDefaultTypeInternal() {}
  union {
    CMsgClientHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientHelloDefaultTypeInternal _CMsgClientHello_default_instance_;
constexpr CMsg_CVars_CVar::CMsg_CVars_CVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsg_CVars_CVarDefaultTypeInternal {
  constexpr CMsg_CVars_CVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsg_CVars_CVarDefaultTypeInternal() {}
  union {
    CMsg_CVars_CVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
constexpr CMsg_CVars::CMsg_CVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cvars_(){}
struct CMsg_CVarsDefaultTypeInternal {
  constexpr CMsg_CVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsg_CVarsDefaultTypeInternal() {}
  union {
    CMsg_CVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
constexpr CNETMsg_SetConVar::CNETMsg_SetConVar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convars_(nullptr){}
struct CNETMsg_SetConVarDefaultTypeInternal {
  constexpr CNETMsg_SetConVarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_SetConVarDefaultTypeInternal() {}
  union {
    CNETMsg_SetConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
constexpr CNETMsg_StringCmd::CNETMsg_StringCmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CNETMsg_StringCmdDefaultTypeInternal {
  constexpr CNETMsg_StringCmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNETMsg_StringCmdDefaultTypeInternal() {}
  union {
    CNETMsg_StringCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
constexpr CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tgtpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0u)
  , y_(0u){}
struct CDOTAMsg_CoachHUDPingDefaultTypeInternal {
  constexpr CDOTAMsg_CoachHUDPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMsg_CoachHUDPingDefaultTypeInternal _CDOTAMsg_CoachHUDPing_default_instance_;
constexpr CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hud_ping_(nullptr)
  , player_id_(0u){}
struct CDOTAUserMsg_CoachHUDPingDefaultTypeInternal {
  constexpr CDOTAUserMsg_CoachHUDPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAUserMsg_CoachHUDPingDefaultTypeInternal() {}
  union {
    CDOTAUserMsg_CoachHUDPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAUserMsg_CoachHUDPingDefaultTypeInternal _CDOTAUserMsg_CoachHUDPing_default_instance_;
constexpr CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_(0u)
  , force_recalculate_(false){}
struct CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal {
  constexpr CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GuideSelectOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal _CDOTAClientMsg_GuideSelectOption_default_instance_;
constexpr CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guide_workshop_id_(uint64_t{0u})
  , is_plus_guide_(false){}
struct CDOTAClientMsg_GuideSelectedDefaultTypeInternal {
  constexpr CDOTAClientMsg_GuideSelectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_GuideSelectedDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_GuideSelected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_GuideSelectedDefaultTypeInternal _CDOTAClientMsg_GuideSelected_default_instance_;
constexpr CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCLCMsg_CmdKeyValuesDefaultTypeInternal {
  constexpr CCLCMsg_CmdKeyValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_CmdKeyValuesDefaultTypeInternal() {}
  union {
    CCLCMsg_CmdKeyValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_CmdKeyValuesDefaultTypeInternal _CCLCMsg_CmdKeyValues_default_instance_;
constexpr CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_path_(0)
  , code_filename_(0)
  , crc_(0u){}
struct CCLCMsg_FileCRCCheckDefaultTypeInternal {
  constexpr CCLCMsg_FileCRCCheckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_FileCRCCheckDefaultTypeInternal() {}
  union {
    CCLCMsg_FileCRCCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_FileCRCCheckDefaultTypeInternal _CCLCMsg_FileCRCCheck_default_instance_;
constexpr CCLCMsg_ClientMessage::CCLCMsg_ClientMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0){}
struct CCLCMsg_ClientMessageDefaultTypeInternal {
  constexpr CCLCMsg_ClientMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_ClientMessageDefaultTypeInternal() {}
  union {
    CCLCMsg_ClientMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_ClientMessageDefaultTypeInternal _CCLCMsg_ClientMessage_default_instance_;
constexpr CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_id_(uint64_t{0u}){}
struct CDOTAClientMsg_MatchMetadataDefaultTypeInternal {
  constexpr CDOTAClientMsg_MatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAClientMsg_MatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAClientMsg_MatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAClientMsg_MatchMetadataDefaultTypeInternal _CDOTAClientMsg_MatchMetadata_default_instance_;
constexpr CSOEconItemAttribute::CSOEconItemAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , value_(0u){}
struct CSOEconItemAttributeDefaultTypeInternal {
  constexpr CSOEconItemAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemAttributeDefaultTypeInternal() {}
  union {
    CSOEconItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemAttributeDefaultTypeInternal _CSOEconItemAttribute_default_instance_;
constexpr CSOEconItemEquipped::CSOEconItemEquipped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_class_(0u)
  , new_slot_(0u){}
struct CSOEconItemEquippedDefaultTypeInternal {
  constexpr CSOEconItemEquippedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemEquippedDefaultTypeInternal() {}
  union {
    CSOEconItemEquipped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemEquippedDefaultTypeInternal _CSOEconItemEquipped_default_instance_;
constexpr CSOEconItem::CSOEconItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_()
  , equipped_state_()
  , interior_item_(nullptr)
  , id_(uint64_t{0u})
  , account_id_(0u)
  , inventory_(0u)
  , def_index_(0u)
  , flags_(0u)
  , origin_(0u)
  , style_(0u)
  , original_id_(uint64_t{0u})
  , quality_(4u)
  , quantity_(1u)
  , level_(1u){}
struct CSOEconItemDefaultTypeInternal {
  constexpr CSOEconItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemDefaultTypeInternal() {}
  union {
    CSOEconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemDefaultTypeInternal _CSOEconItem_default_instance_;
constexpr CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_index_(0u)
  , is_supply_crate_(false)
  , is_timed_drop_(false)
  , account_id_(0u)
  , origin_(0u){}
struct CLobbyTimedRewardDetailsDefaultTypeInternal {
  constexpr CLobbyTimedRewardDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyTimedRewardDetailsDefaultTypeInternal() {}
  union {
    CLobbyTimedRewardDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
constexpr CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_account_id_(0u)
  , target_account_id_(0u)
  , tip_amount_(0u)
  , event_id_(0)
{}
struct CMsgMatchTips_SingleTipDefaultTypeInternal {
  constexpr CMsgMatchTips_SingleTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchTips_SingleTipDefaultTypeInternal() {}
  union {
    CMsgMatchTips_SingleTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchTips_SingleTipDefaultTypeInternal _CMsgMatchTips_SingleTip_default_instance_;
constexpr CMsgMatchTips::CMsgMatchTips(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tips_(){}
struct CMsgMatchTipsDefaultTypeInternal {
  constexpr CMsgMatchTipsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchTipsDefaultTypeInternal() {}
  union {
    CMsgMatchTips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchTipsDefaultTypeInternal _CMsgMatchTips_default_instance_;
constexpr CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_queue_time_(0u)
  , maximum_queue_time_(0u)
  , behavior_score_variance_(0)
{}
struct CMsgMatchMatchmakingStatsDefaultTypeInternal {
  constexpr CMsgMatchMatchmakingStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchMatchmakingStatsDefaultTypeInternal() {}
  union {
    CMsgMatchMatchmakingStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
constexpr CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victim_slot_(0u)
  , count_(0u){}
struct CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_PlayerKill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
constexpr CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(0u)
  , purchase_time_(0){}
struct CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
constexpr CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_()
  , game_time_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , level_(0u){}
struct CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_InventorySnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
constexpr CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_token_(0u)
  , value_(0){}
struct CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_AutoStyleCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
constexpr CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_eater_type_(0u)
  , gem_item_def_index_(0u)
  , required_hero_id_(0u)
  , starting_value_(0u)
  , ending_value_(0u)
  , owner_item_def_index_(0u)
  , owner_item_id_(uint64_t{0u}){}
struct CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_StrangeGemProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
constexpr CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(uint64_t{0u})
  , item_def_index_(0u)
  , starting_value_(0u)
  , is_victory_(false){}
struct CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_VictoryPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
constexpr CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_id_(0u)
  , start_value_(0u)
  , end_value_(0u)
  , completed_(false){}
struct CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_SubChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
constexpr CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_path_id_(0u)
  , claimed_room_id_(0u){}
struct CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_CavernChallengeResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal _CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_;
constexpr CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(0u)
  , quantity_(0u)
  , audit_(0u){}
struct CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ActionGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_ActionGrant_default_instance_;
constexpr CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_challenges_with_progress_()
  , cavern_challenge_map_results_()
  , actions_granted_()
  , event_id_(0u)
  , event_points_(0u)
  , challenge_instance_id_(0u)
  , challenge_quest_id_(0u)
  , challenge_quest_challenge_id_(0u)
  , challenge_rank_completed_(0u)
  , challenge_rank_previously_completed_(0u)
  , challenge_completed_(false)
  , event_owned_(false)
  , cavern_challenge_active_(false)
  , wager_winnings_(0u)
  , cavern_challenge_winnings_(0u)
  , amount_wagered_(0u)
  , team_wager_amount_(0u)
  , periodic_point_adjustments_(0u)
  , cavern_challenge_plus_shard_winnings_(0u){}
struct CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_EventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
constexpr CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_upgrades_()
  , equipped_econ_items_()
  , kills_()
  , items_()
  , level_up_times_()
  , graph_net_worth_()
  , inventory_snapshot_()
  , auto_style_criteria_()
  , event_data_()
  , strange_gem_progress_()
  , victory_prediction_()
  , account_id_(0u)
  , player_slot_(0u)
  , avg_kills_x16_(0u)
  , avg_deaths_x16_(0u)
  , avg_assists_x16_(0u)
  , avg_gpm_x16_(0u)
  , avg_xpm_x16_(0u)
  , best_kills_x16_(0u)
  , best_assists_x16_(0u)
  , best_gpm_x16_(0u)
  , best_xpm_x16_(0u)
  , win_streak_(0u)
  , best_win_streak_(0u)
  , fight_score_(0)
  , farm_score_(0)
  , support_score_(0)
  , push_score_(0)
  , avg_stats_calibrated_(false)
  , hero_xp_(0u)
  , camps_stacked_(0u)
  , lane_selection_flags_(0u)
  , rampages_(0u)
  , triple_kills_(0u)
  , aegis_snatched_(0u)
  , rapiers_purchased_(0u)
  , couriers_killed_(0u)
  , net_worth_rank_(0u)
  , support_gold_spent_(0u)
  , observer_wards_placed_(0u)
  , sentry_wards_placed_(0u)
  , wards_dewarded_(0u)
  , stun_duration_(0)
  , rank_mmr_boost_type_(0)
{}
struct CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
constexpr CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , graph_experience_()
  , graph_gold_earned_()
  , graph_net_worth_()
  , cm_bans_()
  , cm_picks_()
  , dota_team_(0u)
  , cm_first_pick_(false)
  , cm_captain_player_id_(0u)
  , cm_penalty_(0u){}
struct CDOTAMatchMetadata_TeamDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_TeamDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
constexpr CDOTAMatchMetadata::CDOTAMatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , item_rewards_()
  , match_tips_()
  , event_game_custom_table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , matchmaking_stats_(nullptr)
  , lobby_id_(uint64_t{0u})
  , report_until_time_(uint64_t{0u})
  , primary_event_id_(0u){}
struct CDOTAMatchMetadataDefaultTypeInternal {
  constexpr CDOTAMatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dotaproto_2eproto[69];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dotaproto_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dotaproto_2eproto = nullptr;

const uint32_t TableStruct_dotaproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, give_to_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, gift_message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, object_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, service_id_),
  3,
  0,
  2,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, timestamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSocialFeedResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSocialFeedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSocialFeedResponse, unk_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSocialFeedResponse, unk_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSocialFeedResponse, unk_3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, win_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, valid_until_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, division_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, trophy_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, style_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, trophy_score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, stat_score_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, serialized_item_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, hero_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, hero_losses_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Emoticon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Emoticon, emoticon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Team, team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, trophy_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, stat_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, hero_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, emoticon_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, team_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, badge_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, event_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, recent_battle_cup_victory_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, leaderboard_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, plus_original_start_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, previous_rank_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_mmr_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, leaderboard_rank_core_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_peak_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, title_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, favorite_team_packed_),
  1,
  ~0u,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, win_percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, longest_streak_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, curr_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, laps_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, curr_hero_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, curr_lap_time_started_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, curr_lap_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, best_lap_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, best_lap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, lap_heroes_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, lap_heroes_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, next_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, prev_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, prev_hero_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, prev_avg_tries_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, curr_avg_tries_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, next_avg_tries_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, full_lap_avg_tries_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, curr_lap_avg_tries_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, profile_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetAllHeroProgressResponse, start_hero_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  0,
  19,
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, equipped_econ_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, manually_set_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, plus_hero_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_FeaturedHero, plus_hero_relics_item_),
  1,
  ~0u,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, match_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, performance_rating_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse_MatchInfo, won_match_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, background_item_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, featured_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, recent_matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, successful_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, recent_match_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgProfileResponse, result_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, object_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_modified_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_added_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_removed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, service_id_),
  ~0u,
  1,
  ~0u,
  ~0u,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, object_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, objects_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, service_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, sync_version_),
  ~0u,
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_TipAlert, tip_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse_Trophy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse_Trophy, trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse_Trophy, trophy_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse_Trophy, last_updated_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse, trophies_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetTrophyListResponse, profile_name_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, playername_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventCNY2015Cmd, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_RankWager, announce_wager_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_EventPointsTip, recipient_player_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_CoinWager, wager_amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, cached_file_version_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, player_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, match_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, mean_gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, mean_xppm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, mean_lasthits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, rampages_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, first_blood_claimed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, first_blood_given_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, aegises_snatched_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, cheeses_eaten_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, creeps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, fight_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, farm_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, support_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, push_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, versatility_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, mean_networth_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, mean_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, mean_heals_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPlayerStatsResponse, rapiers_purchased_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, new_class_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, new_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, style_index_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItems, equips_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, socache_have_versions_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, client_session_need_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, client_launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, secret_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, client_language_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, engine_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, steamdatagram_login_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, platform_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, game_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_system_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_system_req_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, screen_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, screen_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, screen_refresh_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, swap_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, swap_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, is_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, platform_name_),
  4,
  ~0u,
  5,
  6,
  0,
  7,
  8,
  1,
  9,
  2,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, name_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, cvars_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, convars_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMsg_CoachHUDPing, tgtpath_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAUserMsg_CoachHUDPing, hud_ping_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, option_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelectOption, force_recalculate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, guide_workshop_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_GuideSelected, is_plus_guide_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, code_path_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, path_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, code_filename_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, filename_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, crc_),
  2,
  0,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_ClientMessage, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAClientMsg_MatchMetadata, metadata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_bytes_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_class_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, level_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quality_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, flags_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, origin_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, attribute_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, interior_item_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, style_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, original_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, equipped_state_),
  1,
  2,
  3,
  4,
  10,
  11,
  9,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, is_supply_crate_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, is_timed_drop_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, account_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, origin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, source_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, tip_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, event_id_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips, tips_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, average_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, maximum_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, behavior_score_variance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, victim_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, assists_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, level_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, gem_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, required_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, ending_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, start_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, end_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, completed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, completed_path_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, claimed_room_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, action_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, quantity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, audit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_quest_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_rank_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_rank_previously_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_owned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, sub_challenges_with_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, wager_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_active_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, amount_wagered_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, team_wager_amount_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, periodic_point_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_map_results_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_plus_shard_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, actions_granted_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  8,
  ~0u,
  10,
  9,
  11,
  12,
  13,
  14,
  ~0u,
  15,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, equipped_econ_items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, fight_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, farm_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, support_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, push_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, level_up_times_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, inventory_snapshot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_stats_calibrated_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, auto_style_criteria_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, event_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, strange_gem_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, hero_xp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, victory_prediction_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rampages_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, aegis_snatched_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, net_worth_rank_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, sentry_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, wards_dewarded_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rank_mmr_boost_type_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  ~0u,
  ~0u,
  ~0u,
  18,
  19,
  ~0u,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, dota_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_experience_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_gold_earned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_first_pick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_captain_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_bans_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_picks_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_penalty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, teams_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, item_rewards_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, report_until_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, event_game_custom_table_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, match_tips_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, matchmaking_stats_),
  ~0u,
  ~0u,
  2,
  3,
  0,
  4,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgSOIDOwner)},
  { 10, 19, -1, sizeof(::CMsgClientToGCWrapAndDeliverGift)},
  { 22, 33, -1, sizeof(::CMsgSOSingleObject)},
  { 38, 53, -1, sizeof(::CMsgRecentMatchInfo)},
  { 62, 71, -1, sizeof(::CMsgClientToGCRequestSocialFeedResponse)},
  { 74, 89, -1, sizeof(::CMsgBattleCupVictory)},
  { 98, 106, -1, sizeof(::CMsgClientToGCSetItemStyle)},
  { 108, 116, -1, sizeof(::CMsgDOTAProfileCard_Slot_Trophy)},
  { 118, 126, -1, sizeof(::CMsgDOTAProfileCard_Slot_Stat)},
  { 128, 136, -1, sizeof(::CMsgDOTAProfileCard_Slot_Item)},
  { 138, 147, -1, sizeof(::CMsgDOTAProfileCard_Slot_Hero)},
  { 150, 157, -1, sizeof(::CMsgDOTAProfileCard_Slot_Emoticon)},
  { 158, 165, -1, sizeof(::CMsgDOTAProfileCard_Slot_Team)},
  { 166, 179, -1, sizeof(::CMsgDOTAProfileCard_Slot)},
  { 186, 209, -1, sizeof(::CMsgDOTAProfileCard)},
  { 226, 235, -1, sizeof(::CMsgSuccessfulHero)},
  { 238, 264, -1, sizeof(::CMsgClientToGCGetAllHeroProgressResponse)},
  { 284, 295, -1, sizeof(::CMsgProfileResponse_FeaturedHero)},
  { 300, 311, -1, sizeof(::CMsgProfileResponse_MatchInfo)},
  { 316, 328, -1, sizeof(::CMsgProfileResponse)},
  { 334, 342, -1, sizeof(::CMsgSOMultipleObjects_SingleObject)},
  { 344, 356, -1, sizeof(::CMsgSOMultipleObjects)},
  { 362, 370, -1, sizeof(::CMsgSOCacheSubscribed_SubscribedType)},
  { 372, 384, -1, sizeof(::CMsgSOCacheSubscribed)},
  { 390, 397, -1, sizeof(::CDOTAClientMsg_TipAlert)},
  { 398, 407, -1, sizeof(::CMsgClientToGCGetTrophyListResponse_Trophy)},
  { 410, 419, -1, sizeof(::CMsgClientToGCGetTrophyListResponse)},
  { 422, 429, -1, sizeof(::CCLCMsg_SplitPlayerConnect)},
  { 430, 437, -1, sizeof(::CDOTAClientMsg_EventCNY2015Cmd)},
  { 438, 445, -1, sizeof(::CDOTAClientMsg_RankWager)},
  { 446, 453, -1, sizeof(::CDOTAClientMsg_EventPointsTip)},
  { 454, 461, -1, sizeof(::CDOTAClientMsg_CoinWager)},
  { 462, 472, -1, sizeof(::CMsgSOCacheHaveVersion)},
  { 476, 505, -1, sizeof(::CMsgGCToClientPlayerStatsResponse)},
  { 528, 538, -1, sizeof(::CMsgAdjustItemEquippedState)},
  { 542, -1, -1, sizeof(::CMsgClientToGCEquipItems)},
  { 549, 577, -1, sizeof(::CMsgClientHello)},
  { 599, 607, -1, sizeof(::CMsg_CVars_CVar)},
  { 609, -1, -1, sizeof(::CMsg_CVars)},
  { 616, 623, -1, sizeof(::CNETMsg_SetConVar)},
  { 624, 631, -1, sizeof(::CNETMsg_StringCmd)},
  { 632, 641, -1, sizeof(::CDOTAMsg_CoachHUDPing)},
  { 644, 652, -1, sizeof(::CDOTAUserMsg_CoachHUDPing)},
  { 654, 662, -1, sizeof(::CDOTAClientMsg_GuideSelectOption)},
  { 664, 672, -1, sizeof(::CDOTAClientMsg_GuideSelected)},
  { 674, 681, -1, sizeof(::CCLCMsg_CmdKeyValues)},
  { 682, 693, -1, sizeof(::CCLCMsg_FileCRCCheck)},
  { 698, 706, -1, sizeof(::CCLCMsg_ClientMessage)},
  { 708, 716, -1, sizeof(::CDOTAClientMsg_MatchMetadata)},
  { 718, 727, -1, sizeof(::CSOEconItemAttribute)},
  { 730, 738, -1, sizeof(::CSOEconItemEquipped)},
  { 740, 760, -1, sizeof(::CSOEconItem)},
  { 774, 785, -1, sizeof(::CLobbyTimedRewardDetails)},
  { 790, 800, -1, sizeof(::CMsgMatchTips_SingleTip)},
  { 804, -1, -1, sizeof(::CMsgMatchTips)},
  { 811, 820, -1, sizeof(::CMsgMatchMatchmakingStats)},
  { 823, 831, -1, sizeof(::CDOTAMatchMetadata_Team_PlayerKill)},
  { 833, 841, -1, sizeof(::CDOTAMatchMetadata_Team_ItemPurchase)},
  { 843, 855, -1, sizeof(::CDOTAMatchMetadata_Team_InventorySnapshot)},
  { 861, 869, -1, sizeof(::CDOTAMatchMetadata_Team_AutoStyleCriteria)},
  { 871, 884, -1, sizeof(::CDOTAMatchMetadata_Team_StrangeGemProgress)},
  { 891, 901, -1, sizeof(::CDOTAMatchMetadata_Team_VictoryPrediction)},
  { 905, 915, -1, sizeof(::CDOTAMatchMetadata_Team_SubChallenge)},
  { 919, 927, -1, sizeof(::CDOTAMatchMetadata_Team_CavernChallengeResult)},
  { 929, 938, -1, sizeof(::CDOTAMatchMetadata_Team_ActionGrant)},
  { 941, 966, -1, sizeof(::CDOTAMatchMetadata_Team_EventData)},
  { 985, 1035, -1, sizeof(::CDOTAMatchMetadata_Team_Player)},
  { 1079, 1095, -1, sizeof(::CDOTAMatchMetadata_Team)},
  { 1105, 1119, -1, sizeof(::CDOTAMatchMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOIDOwner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCWrapAndDeliverGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOSingleObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRecentMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRequestSocialFeedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBattleCupVictory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSetItemStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Hero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSuccessfulHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetAllHeroProgressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProfileResponse_FeaturedHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProfileResponse_MatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProfileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOMultipleObjects_SingleObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOMultipleObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscribed_SubscribedType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscribed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_TipAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetTrophyListResponse_Trophy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetTrophyListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_SplitPlayerConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EventCNY2015Cmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_RankWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_EventPointsTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_CoinWager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheHaveVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPlayerStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAdjustItemEquippedState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCEquipItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientHello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsg_CVars_CVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsg_CVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_SetConVar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CNETMsg_StringCmd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAUserMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GuideSelectOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_GuideSelected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_CmdKeyValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_FileCRCCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAClientMsg_MatchMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemEquipped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyTimedRewardDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchTips_SingleTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchTips_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchMatchmakingStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_PlayerKill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_SubChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_ActionGrant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_EventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_default_instance_),
};

const char descriptor_table_protodef_dotaproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017dotaproto.proto\")\n\rCMsgSOIDOwner\022\014\n\004ty"
  "pe\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\"e\n CMsgClientToGCWr"
  "apAndDeliverGift\022\017\n\007item_id\030\001 \001(\004\022\032\n\022giv"
  "e_to_account_id\030\002 \001(\r\022\024\n\014gift_message\030\003 "
  "\001(\t\"\203\001\n\022CMsgSOSingleObject\022\017\n\007type_id\030\002 "
  "\001(\005\022\023\n\013object_data\030\003 \001(\014\022\017\n\007version\030\004 \001("
  "\006\022\"\n\nowner_soid\030\005 \001(\0132\016.CMsgSOIDOwner\022\022\n"
  "\nservice_id\030\006 \001(\r\"\210\002\n\023CMsgRecentMatchInf"
  "o\022\020\n\010match_id\030\001 \001(\004\0225\n\tgame_mode\030\002 \001(\0162\016"
  ".DOTA_GameMode:\022DOTA_GAMEMODE_NONE\022\r\n\005ki"
  "lls\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assists\030\005 \001"
  "(\r\022\020\n\010duration\030\006 \001(\r\022\023\n\013player_slot\030\007 \001("
  "\r\022>\n\rmatch_outcome\030\010 \001(\0162\016.EMatchOutcome"
  ":\027k_EMatchOutcome_Unknown\022\021\n\ttimestamp\030\t"
  " \001(\r\"V\n\'CMsgClientToGCRequestSocialFeedR"
  "esponse\022\r\n\005unk_1\030\001 \001(\004\022\r\n\005unk_2\030\002 \001(\004\022\r\n"
  "\005unk_3\030\003 \001(\004\"\306\001\n\024CMsgBattleCupVictory\022\022\n"
  "\naccount_id\030\001 \001(\r\022\020\n\010win_date\030\002 \001(\r\022\023\n\013v"
  "alid_until\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\025\n"
  "\rtournament_id\030\005 \001(\r\022\023\n\013division_id\030\006 \001("
  "\r\022\017\n\007team_id\030\007 \001(\r\022\016\n\006streak\030\010 \001(\r\022\021\n\ttr"
  "ophy_id\030\t \001(\r\"B\n\032CMsgClientToGCSetItemSt"
  "yle\022\017\n\007item_id\030\001 \001(\004\022\023\n\013style_index\030\002 \001("
  "\r\"\375\t\n\023CMsgDOTAProfileCard\022\022\n\naccount_id\030"
  "\001 \001(\r\022(\n\005slots\030\003 \003(\0132\031.CMsgDOTAProfileCa"
  "rd.Slot\022\024\n\014badge_points\030\004 \001(\r\022\024\n\014event_p"
  "oints\030\005 \001(\r\022\020\n\010event_id\030\006 \001(\r\0228\n\031recent_"
  "battle_cup_victory\030\007 \001(\0132\025.CMsgBattleCup"
  "Victory\022\021\n\trank_tier\030\010 \001(\r\022\030\n\020leaderboar"
  "d_rank\030\t \001(\r\022\032\n\022is_plus_subscriber\030\n \001(\010"
  "\022 \n\030plus_original_start_date\030\013 \001(\r\022\027\n\017ra"
  "nk_tier_score\030\014 \001(\r\022\032\n\022previous_rank_tie"
  "r\030\r \001(\r\022\032\n\022rank_tier_mmr_type\030\016 \001(\r\022\035\n\025l"
  "eaderboard_rank_core\030\021 \001(\r\022\026\n\016rank_tier_"
  "peak\030\025 \001(\r\022\r\n\005title\030\027 \001(\r\022\034\n\024favorite_te"
  "am_packed\030\030 \001(\004\032\360\004\n\004Slot\022\017\n\007slot_id\030\001 \001("
  "\r\0220\n\006trophy\030\002 \001(\0132 .CMsgDOTAProfileCard."
  "Slot.Trophy\022,\n\004stat\030\003 \001(\0132\036.CMsgDOTAProf"
  "ileCard.Slot.Stat\022,\n\004item\030\004 \001(\0132\036.CMsgDO"
  "TAProfileCard.Slot.Item\022,\n\004hero\030\005 \001(\0132\036."
  "CMsgDOTAProfileCard.Slot.Hero\0224\n\010emotico"
  "n\030\006 \001(\0132\".CMsgDOTAProfileCard.Slot.Emoti"
  "con\022,\n\004team\030\007 \001(\0132\036.CMsgDOTAProfileCard."
  "Slot.Team\0321\n\006Trophy\022\021\n\ttrophy_id\030\001 \001(\r\022\024"
  "\n\014trophy_score\030\002 \001(\r\032W\n\004Stat\022;\n\007stat_id\030"
  "\001 \001(\0162\034.CMsgDOTAProfileCard.EStatID:\014k_e"
  "Stat_Wins\022\022\n\nstat_score\030\002 \001(\r\0320\n\004Item\022\027\n"
  "\017serialized_item\030\001 \001(\014\022\017\n\007item_id\030\002 \001(\004\032"
  "\?\n\004Hero\022\017\n\007hero_id\030\001 \001(\r\022\021\n\thero_wins\030\002 "
  "\001(\r\022\023\n\013hero_losses\030\003 \001(\r\032\037\n\010Emoticon\022\023\n\013"
  "emoticon_id\030\001 \001(\r\032\027\n\004Team\022\017\n\007team_id\030\001 \001"
  "(\r\"\234\001\n\007EStatID\022\020\n\014k_eStat_Wins\020\003\022\024\n\020k_eS"
  "tat_Commends\020\004\022\027\n\023k_eStat_GamesPlayed\020\005\022"
  "\032\n\026k_eStat_FirstMatchDate\020\006\022\036\n\032k_eStat_P"
  "reviousSeasonRank\020\007\022\024\n\020k_eStat_GamesMVP\020"
  "\010\"R\n\022CMsgSuccessfulHero\022\017\n\007hero_id\030\001 \001(\r"
  "\022\023\n\013win_percent\030\002 \001(\002\022\026\n\016longest_streak\030"
  "\003 \001(\r\"\231\004\n(CMsgClientToGCGetAllHeroProgre"
  "ssResponse\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014curr_h"
  "ero_id\030\002 \001(\r\022\026\n\016laps_completed\030\003 \001(\r\022\027\n\017"
  "curr_hero_games\030\004 \001(\r\022\035\n\025curr_lap_time_s"
  "tarted\030\005 \001(\r\022\026\n\016curr_lap_games\030\006 \001(\r\022\026\n\016"
  "best_lap_games\030\007 \001(\r\022\025\n\rbest_lap_time\030\010 "
  "\001(\r\022\034\n\024lap_heroes_completed\030\t \001(\r\022\034\n\024lap"
  "_heroes_remaining\030\n \001(\r\022\024\n\014next_hero_id\030"
  "\013 \001(\r\022\024\n\014prev_hero_id\030\014 \001(\r\022\027\n\017prev_hero"
  "_games\030\r \001(\r\022\026\n\016prev_avg_tries\030\016 \001(\002\022\026\n\016"
  "curr_avg_tries\030\017 \001(\002\022\026\n\016next_avg_tries\030\020"
  " \001(\002\022\032\n\022full_lap_avg_tries\030\021 \001(\002\022\032\n\022curr"
  "_lap_avg_tries\030\022 \001(\002\022\024\n\014profile_name\030\023 \001"
  "(\t\022\025\n\rstart_hero_id\030\024 \001(\r\"\310\005\n\023CMsgProfil"
  "eResponse\022%\n\017background_item\030\001 \001(\0132\014.CSO"
  "EconItem\022:\n\017featured_heroes\030\002 \003(\0132!.CMsg"
  "ProfileResponse.FeaturedHero\0226\n\016recent_m"
  "atches\030\003 \003(\0132\036.CMsgProfileResponse.Match"
  "Info\022.\n\021successful_heroes\030\004 \003(\0132\023.CMsgSu"
  "ccessfulHero\0222\n\024recent_match_details\030\005 \001"
  "(\0132\024.CMsgRecentMatchInfo\022@\n\006result\030\006 \001(\016"
  "2\036.CMsgProfileResponse.EResponse:\020k_eInt"
  "ernalError\032\243\001\n\014FeaturedHero\022\017\n\007hero_id\030\001"
  " \001(\r\022)\n\023equipped_econ_items\030\002 \003(\0132\014.CSOE"
  "conItem\022\024\n\014manually_set\030\003 \001(\010\022\024\n\014plus_he"
  "ro_xp\030\004 \001(\r\022+\n\025plus_hero_relics_item\030\005 \001"
  "(\0132\014.CSOEconItem\032v\n\tMatchInfo\022\020\n\010match_i"
  "d\030\001 \001(\004\022\027\n\017match_timestamp\030\002 \001(\r\022\032\n\022perf"
  "ormance_rating\030\003 \001(\021\022\017\n\007hero_id\030\004 \001(\r\022\021\n"
  "\twon_match\030\005 \001(\010\"R\n\tEResponse\022\024\n\020k_eInte"
  "rnalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBus"
  "y\020\002\022\017\n\013k_eDisabled\020\003\"\317\002\n\025CMsgSOMultipleO"
  "bjects\022=\n\020objects_modified\030\002 \003(\0132#.CMsgS"
  "OMultipleObjects.SingleObject\022\017\n\007version"
  "\030\003 \001(\006\022:\n\robjects_added\030\004 \003(\0132#.CMsgSOMu"
  "ltipleObjects.SingleObject\022<\n\017objects_re"
  "moved\030\005 \003(\0132#.CMsgSOMultipleObjects.Sing"
  "leObject\022\"\n\nowner_soid\030\006 \001(\0132\016.CMsgSOIDO"
  "wner\022\022\n\nservice_id\030\007 \001(\r\0324\n\014SingleObject"
  "\022\017\n\007type_id\030\001 \001(\005\022\023\n\013object_data\030\002 \001(\014\"\374"
  "\001\n\025CMsgSOCacheSubscribed\0226\n\007objects\030\002 \003("
  "\0132%.CMsgSOCacheSubscribed.SubscribedType"
  "\022\017\n\007version\030\003 \001(\006\022\"\n\nowner_soid\030\004 \001(\0132\016."
  "CMsgSOIDOwner\022\022\n\nservice_id\030\005 \001(\r\022\024\n\014ser"
  "vice_list\030\006 \003(\r\022\024\n\014sync_version\030\007 \001(\006\0326\n"
  "\016SubscribedType\022\017\n\007type_id\030\001 \001(\005\022\023\n\013obje"
  "ct_data\030\002 \003(\014\"+\n\027CDOTAClientMsg_TipAlert"
  "\022\020\n\010tip_text\030\001 \001(\t\"\327\001\n#CMsgClientToGCGet"
  "TrophyListResponse\022\022\n\naccount_id\030\001 \001(\r\022="
  "\n\010trophies\030\002 \003(\0132+.CMsgClientToGCGetTrop"
  "hyListResponse.Trophy\022\024\n\014profile_name\030\003 "
  "\001(\t\032G\n\006Trophy\022\021\n\ttrophy_id\030\001 \001(\r\022\024\n\014trop"
  "hy_score\030\002 \001(\r\022\024\n\014last_updated\030\003 \001(\r\"0\n\032"
  "CCLCMsg_SplitPlayerConnect\022\022\n\nplayername"
  "\030\001 \001(\t\".\n\036CDOTAClientMsg_EventCNY2015Cmd"
  "\022\014\n\004data\030\001 \001(\014\"2\n\030CDOTAClientMsg_RankWag"
  "er\022\026\n\016announce_wager\030\001 \001(\010\"<\n\035CDOTAClien"
  "tMsg_EventPointsTip\022\033\n\023recipient_player_"
  "id\030\001 \001(\r\"0\n\030CDOTAClientMsg_CoinWager\022\024\n\014"
  "wager_amount\030\001 \001(\r\"x\n\026CMsgSOCacheHaveVer"
  "sion\022\034\n\004soid\030\001 \001(\0132\016.CMsgSOIDOwner\022\017\n\007ve"
  "rsion\030\002 \001(\006\022\022\n\nservice_id\030\003 \001(\r\022\033\n\023cache"
  "d_file_version\030\004 \001(\r\"\252\004\n!CMsgGCToClientP"
  "layerStatsResponse\022\022\n\naccount_id\030\001 \001(\r\022\024"
  "\n\014player_stats\030\002 \003(\002\022\023\n\013match_count\030\003 \001("
  "\r\022\020\n\010mean_gpm\030\004 \001(\002\022\021\n\tmean_xppm\030\005 \001(\002\022\025"
  "\n\rmean_lasthits\030\006 \001(\002\022\020\n\010rampages\030\007 \001(\r\022"
  "\024\n\014triple_kills\030\010 \001(\r\022\033\n\023first_blood_cla"
  "imed\030\t \001(\r\022\031\n\021first_blood_given\030\n \001(\r\022\027\n"
  "\017couriers_killed\030\013 \001(\r\022\030\n\020aegises_snatch"
  "ed\030\014 \001(\r\022\025\n\rcheeses_eaten\030\r \001(\r\022\026\n\016creep"
  "s_stacked\030\016 \001(\r\022\023\n\013fight_score\030\017 \001(\002\022\022\n\n"
  "farm_score\030\020 \001(\002\022\025\n\rsupport_score\030\021 \001(\002\022"
  "\022\n\npush_score\030\022 \001(\002\022\031\n\021versatility_score"
  "\030\023 \001(\002\022\025\n\rmean_networth\030\024 \001(\002\022\023\n\013mean_da"
  "mage\030\025 \001(\002\022\022\n\nmean_heals\030\026 \001(\002\022\031\n\021rapier"
  "s_purchased\030\027 \001(\r\"h\n\033CMsgAdjustItemEquip"
  "pedState\022\017\n\007item_id\030\001 \001(\004\022\021\n\tnew_class\030\002"
  " \001(\r\022\020\n\010new_slot\030\003 \001(\r\022\023\n\013style_index\030\004 "
  "\001(\r\"H\n\030CMsgClientToGCEquipItems\022,\n\006equip"
  "s\030\001 \003(\0132\034.CMsgAdjustItemEquippedState\"\340\004"
  "\n\017CMsgClientHello\022\017\n\007version\030\001 \001(\r\0226\n\025so"
  "cache_have_versions\030\002 \003(\0132\027.CMsgSOCacheH"
  "aveVersion\022\033\n\023client_session_need\030\003 \001(\r\022"
  ":\n\017client_launcher\030\004 \001(\0162\023.PartnerAccoun"
  "tType:\014PARTNER_NONE\022\022\n\nsecret_key\030\005 \001(\t\022"
  "\027\n\017client_language\030\006 \001(\r\022-\n\006engine\030\007 \001(\016"
  "2\016.ESourceEngine:\rk_ESE_Source1\022\033\n\023steam"
  "datagram_login\030\010 \001(\014\022\023\n\013platform_id\030\t \001("
  "\r\022\020\n\010game_msg\030\n \001(\014\022\017\n\007os_type\030\013 \001(\005\022\025\n\r"
  "render_system\030\014 \001(\r\022\031\n\021render_system_req"
  "\030\r \001(\r\022\024\n\014screen_width\030\016 \001(\r\022\025\n\rscreen_h"
  "eight\030\017 \001(\r\022\026\n\016screen_refresh\030\020 \001(\r\022\024\n\014r"
  "ender_width\030\021 \001(\r\022\025\n\rrender_height\030\022 \001(\r"
  "\022\022\n\nswap_width\030\023 \001(\r\022\023\n\013swap_height\030\024 \001("
  "\r\022\026\n\016is_steam_china\030\026 \001(\010\022\025\n\rplatform_na"
  "me\030\027 \001(\t\"R\n\nCMsg_CVars\022\037\n\005cvars\030\001 \003(\0132\020."
  "CMsg_CVars.CVar\032#\n\004CVar\022\014\n\004name\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t\"1\n\021CNETMsg_SetConVar\022\034\n\007con"
  "vars\030\001 \001(\0132\013.CMsg_CVars\"$\n\021CNETMsg_Strin"
  "gCmd\022\017\n\007command\030\001 \001(\t\">\n\025CDOTAMsg_CoachH"
  "UDPing\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\017\n\007tgtpath\030"
  "\003 \001(\t\"X\n\031CDOTAUserMsg_CoachHUDPing\022\021\n\tpl"
  "ayer_id\030\001 \001(\r\022(\n\010hud_ping\030\002 \001(\0132\026.CDOTAM"
  "sg_CoachHUDPing\"M\n CDOTAClientMsg_GuideS"
  "electOption\022\016\n\006option\030\001 \001(\r\022\031\n\021force_rec"
  "alculate\030\002 \001(\010\"P\n\034CDOTAClientMsg_GuideSe"
  "lected\022\031\n\021guide_workshop_id\030\001 \001(\004\022\025\n\ris_"
  "plus_guide\030\002 \001(\010\"$\n\024CCLCMsg_CmdKeyValues"
  "\022\014\n\004data\030\001 \001(\014\"m\n\024CCLCMsg_FileCRCCheck\022\021"
  "\n\tcode_path\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\025\n\rcode_"
  "filename\030\003 \001(\005\022\020\n\010filename\030\004 \001(\t\022\013\n\003crc\030"
  "\005 \001(\007\"7\n\025CCLCMsg_ClientMessage\022\020\n\010msg_ty"
  "pe\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\"B\n\034CDOTAClientMsg"
  "_MatchMetadata\022\020\n\010match_id\030\001 \001(\004\022\020\n\010meta"
  "data\030\002 \001(\014\"M\n\024CSOEconItemAttribute\022\021\n\tde"
  "f_index\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\023\n\013value_by"
  "tes\030\003 \001(\014\":\n\023CSOEconItemEquipped\022\021\n\tnew_"
  "class\030\001 \001(\r\022\020\n\010new_slot\030\002 \001(\r\"\332\002\n\013CSOEco"
  "nItem\022\n\n\002id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\021\n"
  "\tinventory\030\003 \001(\r\022\021\n\tdef_index\030\004 \001(\r\022\023\n\010q"
  "uantity\030\005 \001(\r:\0011\022\020\n\005level\030\006 \001(\r:\0011\022\022\n\007qu"
  "ality\030\007 \001(\r:\0014\022\020\n\005flags\030\010 \001(\r:\0010\022\021\n\006orig"
  "in\030\t \001(\r:\0010\022(\n\tattribute\030\014 \003(\0132\025.CSOEcon"
  "ItemAttribute\022#\n\rinterior_item\030\r \001(\0132\014.C"
  "SOEconItem\022\020\n\005style\030\017 \001(\r:\0010\022\026\n\013original"
  "_id\030\020 \001(\004:\0010\022,\n\016equipped_state\030\022 \003(\0132\024.C"
  "SOEconItemEquipped\"\206\001\n\030CLobbyTimedReward"
  "Details\022\026\n\016item_def_index\030\002 \001(\r\022\027\n\017is_su"
  "pply_crate\030\003 \001(\010\022\025\n\ris_timed_drop\030\004 \001(\010\022"
  "\022\n\naccount_id\030\005 \001(\r\022\016\n\006origin\030\006 \001(\r\"\270\001\n\r"
  "CMsgMatchTips\022&\n\004tips\030\002 \003(\0132\030.CMsgMatchT"
  "ips.SingleTip\032\177\n\tSingleTip\022\031\n\021source_acc"
  "ount_id\030\001 \001(\r\022\031\n\021target_account_id\030\002 \001(\r"
  "\022\022\n\ntip_amount\030\003 \001(\r\022(\n\010event_id\030\004 \001(\0162\007"
  ".EEvent:\rEVENT_ID_NONE\"\271\001\n\031CMsgMatchMatc"
  "hmakingStats\022\032\n\022average_queue_time\030\001 \001(\r"
  "\022\032\n\022maximum_queue_time\030\002 \001(\r\022d\n\027behavior"
  "_score_variance\030\003 \001(\0162\034.EMatchBehaviorSc"
  "oreVariance:%k_EMatchBehaviorScoreVarian"
  "ce_Invalid\"\320\033\n\022CDOTAMatchMetadata\022\'\n\005tea"
  "ms\030\001 \003(\0132\030.CDOTAMatchMetadata.Team\022/\n\014it"
  "em_rewards\030\002 \003(\0132\031.CLobbyTimedRewardDeta"
  "ils\022\020\n\010lobby_id\030\003 \001(\006\022\031\n\021report_until_ti"
  "me\030\004 \001(\006\022\037\n\027event_game_custom_table\030\005 \001("
  "\014\022\030\n\020primary_event_id\030\006 \001(\r\022\"\n\nmatch_tip"
  "s\030\007 \003(\0132\016.CMsgMatchTips\0225\n\021matchmaking_s"
  "tats\030\010 \001(\0132\032.CMsgMatchMatchmakingStats\032\234"
  "\031\n\004Team\022\021\n\tdota_team\030\001 \001(\r\0220\n\007players\030\002 "
  "\003(\0132\037.CDOTAMatchMetadata.Team.Player\022\030\n\020"
  "graph_experience\030\003 \003(\002\022\031\n\021graph_gold_ear"
  "ned\030\004 \003(\002\022\027\n\017graph_net_worth\030\005 \003(\002\022\025\n\rcm"
  "_first_pick\030\006 \001(\010\022\034\n\024cm_captain_player_i"
  "d\030\007 \001(\r\022\017\n\007cm_bans\030\010 \003(\r\022\020\n\010cm_picks\030\t \003"
  "(\r\022\022\n\ncm_penalty\030\n \001(\r\0320\n\nPlayerKill\022\023\n\013"
  "victim_slot\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\0326\n\014Item"
  "Purchase\022\017\n\007item_id\030\001 \001(\r\022\025\n\rpurchase_ti"
  "me\030\002 \001(\005\032v\n\021InventorySnapshot\022\017\n\007item_id"
  "\030\001 \003(\r\022\021\n\tgame_time\030\002 \001(\005\022\r\n\005kills\030\003 \001(\r"
  "\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assists\030\005 \001(\r\022\r\n\005lev"
  "el\030\006 \001(\r\0326\n\021AutoStyleCriteria\022\022\n\nname_to"
  "ken\030\001 \001(\r\022\r\n\005value\030\002 \001(\002\032\306\001\n\022StrangeGemP"
  "rogress\022\027\n\017kill_eater_type\030\001 \001(\r\022\032\n\022gem_"
  "item_def_index\030\002 \001(\r\022\030\n\020required_hero_id"
  "\030\003 \001(\r\022\026\n\016starting_value\030\004 \001(\r\022\024\n\014ending"
  "_value\030\005 \001(\r\022\034\n\024owner_item_def_index\030\006 \001"
  "(\r\022\025\n\rowner_item_id\030\007 \001(\004\032h\n\021VictoryPred"
  "iction\022\017\n\007item_id\030\001 \001(\004\022\026\n\016item_def_inde"
  "x\030\002 \001(\r\022\026\n\016starting_value\030\003 \001(\r\022\022\n\nis_vi"
  "ctory\030\004 \001(\010\032Z\n\014SubChallenge\022\017\n\007slot_id\030\001"
  " \001(\r\022\023\n\013start_value\030\002 \001(\r\022\021\n\tend_value\030\003"
  " \001(\r\022\021\n\tcompleted\030\004 \001(\010\032K\n\025CavernChallen"
  "geResult\022\031\n\021completed_path_id\030\001 \001(\r\022\027\n\017c"
  "laimed_room_id\030\002 \001(\r\032A\n\013ActionGrant\022\021\n\ta"
  "ction_id\030\001 \001(\r\022\020\n\010quantity\030\002 \001(\r\022\r\n\005audi"
  "t\030\003 \001(\r\032\330\005\n\tEventData\022\020\n\010event_id\030\001 \001(\r\022"
  "\024\n\014event_points\030\002 \001(\r\022\035\n\025challenge_insta"
  "nce_id\030\003 \001(\r\022\032\n\022challenge_quest_id\030\004 \001(\r"
  "\022$\n\034challenge_quest_challenge_id\030\005 \001(\r\022\033"
  "\n\023challenge_completed\030\006 \001(\010\022 \n\030challenge"
  "_rank_completed\030\007 \001(\r\022+\n#challenge_rank_"
  "previously_completed\030\010 \001(\r\022\023\n\013event_owne"
  "d\030\t \001(\010\022K\n\034sub_challenges_with_progress\030"
  "\n \003(\0132%.CDOTAMatchMetadata.Team.SubChall"
  "enge\022\026\n\016wager_winnings\030\013 \001(\r\022\037\n\027cavern_c"
  "hallenge_active\030\014 \001(\010\022!\n\031cavern_challeng"
  "e_winnings\030\r \001(\r\022\026\n\016amount_wagered\030\016 \001(\r"
  "\022\031\n\021team_wager_amount\030\017 \001(\r\022\"\n\032periodic_"
  "point_adjustments\030\020 \001(\r\022T\n\034cavern_challe"
  "nge_map_results\030\021 \003(\0132..CDOTAMatchMetada"
  "ta.Team.CavernChallengeResult\022,\n$cavern_"
  "challenge_plus_shard_winnings\030\022 \001(\r\022=\n\017a"
  "ctions_granted\030\023 \003(\0132$.CDOTAMatchMetadat"
  "a.Team.ActionGrant\032\200\013\n\006Player\022\022\n\naccount"
  "_id\030\001 \001(\r\022\030\n\020ability_upgrades\030\002 \003(\r\022\023\n\013p"
  "layer_slot\030\003 \001(\r\022)\n\023equipped_econ_items\030"
  "\004 \003(\0132\014.CSOEconItem\0222\n\005kills\030\005 \003(\0132#.CDO"
  "TAMatchMetadata.Team.PlayerKill\0224\n\005items"
  "\030\006 \003(\0132%.CDOTAMatchMetadata.Team.ItemPur"
  "chase\022\025\n\ravg_kills_x16\030\007 \001(\r\022\026\n\016avg_deat"
  "hs_x16\030\010 \001(\r\022\027\n\017avg_assists_x16\030\t \001(\r\022\023\n"
  "\013avg_gpm_x16\030\n \001(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r\022"
  "\026\n\016best_kills_x16\030\014 \001(\r\022\030\n\020best_assists_"
  "x16\030\r \001(\r\022\024\n\014best_gpm_x16\030\016 \001(\r\022\024\n\014best_"
  "xpm_x16\030\017 \001(\r\022\022\n\nwin_streak\030\020 \001(\r\022\027\n\017bes"
  "t_win_streak\030\021 \001(\r\022\023\n\013fight_score\030\022 \001(\002\022"
  "\022\n\nfarm_score\030\023 \001(\002\022\025\n\rsupport_score\030\024 \001"
  "(\002\022\022\n\npush_score\030\025 \001(\002\022\026\n\016level_up_times"
  "\030\026 \003(\r\022\027\n\017graph_net_worth\030\027 \003(\002\022F\n\022inven"
  "tory_snapshot\030\030 \003(\0132*.CDOTAMatchMetadata"
  ".Team.InventorySnapshot\022\034\n\024avg_stats_cal"
  "ibrated\030\031 \001(\010\022G\n\023auto_style_criteria\030\032 \003"
  "(\0132*.CDOTAMatchMetadata.Team.AutoStyleCr"
  "iteria\0226\n\nevent_data\030\035 \003(\0132\".CDOTAMatchM"
  "etadata.Team.EventData\022I\n\024strange_gem_pr"
  "ogress\030\036 \003(\0132+.CDOTAMatchMetadata.Team.S"
  "trangeGemProgress\022\017\n\007hero_xp\030\037 \001(\r\022\025\n\rca"
  "mps_stacked\030  \001(\r\022F\n\022victory_prediction\030"
  "! \003(\0132*.CDOTAMatchMetadata.Team.VictoryP"
  "rediction\022\034\n\024lane_selection_flags\030\" \001(\r\022"
  "\020\n\010rampages\030# \001(\r\022\024\n\014triple_kills\030$ \001(\r\022"
  "\026\n\016aegis_snatched\030% \001(\r\022\031\n\021rapiers_purch"
  "ased\030& \001(\r\022\027\n\017couriers_killed\030\' \001(\r\022\026\n\016n"
  "et_worth_rank\030( \001(\r\022\032\n\022support_gold_spen"
  "t\030) \001(\r\022\035\n\025observer_wards_placed\030* \001(\r\022\033"
  "\n\023sentry_wards_placed\030+ \001(\r\022\026\n\016wards_dew"
  "arded\030, \001(\r\022\025\n\rstun_duration\030- \001(\002\022I\n\023ra"
  "nk_mmr_boost_type\030. \001(\0162\022.EDOTAMMRBoostT"
  "ype:\030k_EDOTAMMRBoostType_None*V\n\022Partner"
  "AccountType\022\020\n\014PARTNER_NONE\020\000\022\031\n\025PARTNER"
  "_PERFECT_WORLD\020\001\022\023\n\017PARTNER_INVALID\020\003*5\n"
  "\rESourceEngine\022\021\n\rk_ESE_Source1\020\000\022\021\n\rk_E"
  "SE_Source2\020\001*\232\005\n\rDOTA_GameMode\022\026\n\022DOTA_G"
  "AMEMODE_NONE\020\000\022\024\n\020DOTA_GAMEMODE_AP\020\001\022\024\n\020"
  "DOTA_GAMEMODE_CM\020\002\022\024\n\020DOTA_GAMEMODE_RD\020\003"
  "\022\024\n\020DOTA_GAMEMODE_SD\020\004\022\024\n\020DOTA_GAMEMODE_"
  "AR\020\005\022\027\n\023DOTA_GAMEMODE_INTRO\020\006\022\024\n\020DOTA_GA"
  "MEMODE_HW\020\007\022\034\n\030DOTA_GAMEMODE_REVERSE_CM\020"
  "\010\022\026\n\022DOTA_GAMEMODE_XMAS\020\t\022\032\n\026DOTA_GAMEMO"
  "DE_TUTORIAL\020\n\022\024\n\020DOTA_GAMEMODE_MO\020\013\022\024\n\020D"
  "OTA_GAMEMODE_LP\020\014\022\027\n\023DOTA_GAMEMODE_POOL1"
  "\020\r\022\024\n\020DOTA_GAMEMODE_FH\020\016\022\030\n\024DOTA_GAMEMOD"
  "E_CUSTOM\020\017\022\024\n\020DOTA_GAMEMODE_CD\020\020\022\024\n\020DOTA"
  "_GAMEMODE_BD\020\021\022\037\n\033DOTA_GAMEMODE_ABILITY_"
  "DRAFT\020\022\022\027\n\023DOTA_GAMEMODE_EVENT\020\023\022\026\n\022DOTA"
  "_GAMEMODE_ARDM\020\024\022\030\n\024DOTA_GAMEMODE_1V1MID"
  "\020\025\022\033\n\027DOTA_GAMEMODE_ALL_DRAFT\020\026\022\027\n\023DOTA_"
  "GAMEMODE_TURBO\020\027\022\032\n\026DOTA_GAMEMODE_MUTATI"
  "ON\020\030\022#\n\037DOTA_GAMEMODE_COACHES_CHALLENGE\020"
  "\031*\361\002\n\rEMatchOutcome\022\033\n\027k_EMatchOutcome_U"
  "nknown\020\000\022\036\n\032k_EMatchOutcome_RadVictory\020\002"
  "\022\037\n\033k_EMatchOutcome_DireVictory\020\003\0223\n/k_E"
  "MatchOutcome_NotScored_PoorNetworkCondit"
  "ions\020@\022$\n k_EMatchOutcome_NotScored_Leav"
  "er\020A\022)\n%k_EMatchOutcome_NotScored_Server"
  "Crash\020B\022*\n&k_EMatchOutcome_NotScored_Nev"
  "erStarted\020C\022&\n\"k_EMatchOutcome_NotScored"
  "_Canceled\020D\022(\n$k_EMatchOutcome_NotScored"
  "_Suspicious\020E*s\n\021EDOTAMMRBoostType\022\034\n\030k_"
  "EDOTAMMRBoostType_None\020\000\022\036\n\032k_EDOTAMMRBo"
  "ostType_Leader\020\001\022 \n\034k_EDOTAMMRBoostType_"
  "Follower\020\002*\337\006\n\006EEvent\022\021\n\rEVENT_ID_NONE\020\000"
  "\022\025\n\021EVENT_ID_DIRETIDE\020\001\022\034\n\030EVENT_ID_SPRI"
  "NG_FESTIVAL\020\002\022\033\n\027EVENT_ID_FROSTIVUS_2013"
  "\020\003\022\034\n\030EVENT_ID_COMPENDIUM_2014\020\004\022\032\n\026EVEN"
  "T_ID_NEXON_PC_BANG\020\005\022\032\n\026EVENT_ID_PWRD_DA"
  "C_2015\020\006\022\033\n\027EVENT_ID_NEW_BLOOM_2015\020\007\022\037\n"
  "\033EVENT_ID_INTERNATIONAL_2015\020\010\022\034\n\030EVENT_"
  "ID_FALL_MAJOR_2015\020\t\022\026\n\022EVENT_ID_ORACLE_"
  "PA\020\n\022$\n EVENT_ID_NEW_BLOOM_2015_PREBEAST"
  "\020\013\022\026\n\022EVENT_ID_FROSTIVUS\020\014\022\036\n\032EVENT_ID_W"
  "INTER_MAJOR_2016\020\r\022\037\n\033EVENT_ID_INTERNATI"
  "ONAL_2016\020\016\022\034\n\030EVENT_ID_FALL_MAJOR_2016\020"
  "\017\022\036\n\032EVENT_ID_WINTER_MAJOR_2017\020\020\022\033\n\027EVE"
  "NT_ID_NEW_BLOOM_2017\020\021\022\037\n\033EVENT_ID_INTER"
  "NATIONAL_2017\020\022\022\036\n\032EVENT_ID_PLUS_SUBSCRI"
  "PTION\020\023\022\035\n\031EVENT_ID_SINGLES_DAY_2017\020\024\022\033"
  "\n\027EVENT_ID_FROSTIVUS_2017\020\025\022\037\n\033EVENT_ID_"
  "INTERNATIONAL_2018\020\026\022\033\n\027EVENT_ID_FROSTIV"
  "US_2018\020\027\022\033\n\027EVENT_ID_NEW_BLOOM_2019\020\030\022\037"
  "\n\033EVENT_ID_INTERNATIONAL_2019\020\031\022\"\n\036EVENT"
  "_ID_NEW_PLAYER_EXPERIENCE\020\032\022\033\n\027EVENT_ID_"
  "FROSTIVUS_2019\020\033\022\022\n\016EVENT_ID_COUNT\020\034*\301\001\n"
  "\033EMatchBehaviorScoreVariance\022)\n%k_EMatch"
  "BehaviorScoreVariance_Invalid\020\000\022%\n!k_EMa"
  "tchBehaviorScoreVariance_Low\020\001\022(\n$k_EMat"
  "chBehaviorScoreVariance_Medium\020\002\022&\n\"k_EM"
  "atchBehaviorScoreVariance_High\020\003B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dotaproto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dotaproto_2eproto = {
  false, false, 13799, descriptor_table_protodef_dotaproto_2eproto, "dotaproto.proto", 
  &descriptor_table_dotaproto_2eproto_once, nullptr, 0, 69,
  schemas, file_default_instances, TableStruct_dotaproto_2eproto::offsets,
  file_level_metadata_dotaproto_2eproto, file_level_enum_descriptors_dotaproto_2eproto, file_level_service_descriptors_dotaproto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dotaproto_2eproto_getter() {
  return &descriptor_table_dotaproto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dotaproto_2eproto(&descriptor_table_dotaproto_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[0];
}
bool CMsgDOTAProfileCard_EStatID_IsValid(int value) {
  switch (value) {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Wins;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Commends;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesPlayed;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_FirstMatchDate;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PreviousSeasonRank;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesMVP;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MIN;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MAX;
constexpr int CMsgDOTAProfileCard::EStatID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgProfileResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[1];
}
bool CMsgProfileResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse::k_eInternalError;
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse::k_eSuccess;
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse::k_eTooBusy;
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse::k_eDisabled;
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse::EResponse_MIN;
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse::EResponse_MAX;
constexpr int CMsgProfileResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[2];
}
bool PartnerAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESourceEngine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[3];
}
bool ESourceEngine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_GameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[4];
}
bool DOTA_GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[5];
}
bool EMatchOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAMMRBoostType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[6];
}
bool EDOTAMMRBoostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[7];
}
bool EEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dotaproto_2eproto);
  return file_level_enum_descriptors_dotaproto_2eproto[8];
}
bool EMatchBehaviorScoreVariance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgSOIDOwner::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOIDOwner>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOIDOwner::CMsgSOIDOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOIDOwner)
}
CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOIDOwner)
}

inline void CMsgSOIDOwner::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  // @@protoc_insertion_point(destructor:CMsgSOIDOwner)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOIDOwner::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSOIDOwner::ArenaDtor(void* object) {
  CMsgSOIDOwner* _this = reinterpret_cast< CMsgSOIDOwner* >(object);
  (void)_this;
}
void CMsgSOIDOwner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOIDOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOIDOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOIDOwner)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOIDOwner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOIDOwner::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOIDOwner)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOIDOwner)
  return target;
}

size_t CMsgSOIDOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOIDOwner)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOIDOwner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOIDOwner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOIDOwner::GetClassData() const { return &_class_data_; }

void CMsgSOIDOwner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOIDOwner *>(to)->MergeFrom(
      static_cast<const CMsgSOIDOwner &>(from));
}


void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {
  return true;
}

void CMsgSOIDOwner::InternalSwap(CMsgSOIDOwner* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOIDOwner, type_)
      + sizeof(CMsgSOIDOwner::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOIDOwner, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOIDOwner::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[0]);
}

// ===================================================================

class CMsgClientToGCWrapAndDeliverGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCWrapAndDeliverGift>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_give_to_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gift_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCWrapAndDeliverGift)
}
CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(const CMsgClientToGCWrapAndDeliverGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gift_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gift_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gift_message()) {
    gift_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gift_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&give_to_account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(give_to_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCWrapAndDeliverGift)
}

inline void CMsgClientToGCWrapAndDeliverGift::SharedCtor() {
gift_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gift_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&give_to_account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(give_to_account_id_));
}

CMsgClientToGCWrapAndDeliverGift::~CMsgClientToGCWrapAndDeliverGift() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCWrapAndDeliverGift)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCWrapAndDeliverGift::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gift_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCWrapAndDeliverGift::ArenaDtor(void* object) {
  CMsgClientToGCWrapAndDeliverGift* _this = reinterpret_cast< CMsgClientToGCWrapAndDeliverGift* >(object);
  (void)_this;
}
void CMsgClientToGCWrapAndDeliverGift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCWrapAndDeliverGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCWrapAndDeliverGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCWrapAndDeliverGift)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gift_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&give_to_account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(give_to_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCWrapAndDeliverGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 give_to_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_give_to_account_id(&has_bits);
          give_to_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gift_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gift_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCWrapAndDeliverGift.gift_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCWrapAndDeliverGift::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCWrapAndDeliverGift)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 give_to_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_give_to_account_id(), target);
  }

  // optional string gift_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gift_message().data(), static_cast<int>(this->_internal_gift_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCWrapAndDeliverGift.gift_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gift_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCWrapAndDeliverGift)
  return target;
}

size_t CMsgClientToGCWrapAndDeliverGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCWrapAndDeliverGift)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string gift_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gift_message());
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 give_to_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_give_to_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCWrapAndDeliverGift::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCWrapAndDeliverGift::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCWrapAndDeliverGift::GetClassData() const { return &_class_data_; }

void CMsgClientToGCWrapAndDeliverGift::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCWrapAndDeliverGift *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCWrapAndDeliverGift &>(from));
}


void CMsgClientToGCWrapAndDeliverGift::MergeFrom(const CMsgClientToGCWrapAndDeliverGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCWrapAndDeliverGift)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gift_message(from._internal_gift_message());
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      give_to_account_id_ = from.give_to_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCWrapAndDeliverGift::CopyFrom(const CMsgClientToGCWrapAndDeliverGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCWrapAndDeliverGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCWrapAndDeliverGift::IsInitialized() const {
  return true;
}

void CMsgClientToGCWrapAndDeliverGift::InternalSwap(CMsgClientToGCWrapAndDeliverGift* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gift_message_, lhs_arena,
      &other->gift_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGift, give_to_account_id_)
      + sizeof(CMsgClientToGCWrapAndDeliverGift::give_to_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGift, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCWrapAndDeliverGift::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[1]);
}

// ===================================================================

class CMsgSOSingleObject::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOSingleObject>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_object_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOSingleObject* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOSingleObject::_Internal::owner_soid(const CMsgSOSingleObject* msg) {
  return *msg->owner_soid_;
}
CMsgSOSingleObject::CMsgSOSingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOSingleObject)
}
CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_data()) {
    object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOSingleObject)
}

inline void CMsgSOSingleObject::SharedCtor() {
object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOSingleObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOSingleObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOSingleObject::ArenaDtor(void* object) {
  CMsgSOSingleObject* _this = reinterpret_cast< CMsgSOSingleObject* >(object);
  (void)_this;
}
void CMsgSOSingleObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOSingleObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOSingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOSingleObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      object_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(owner_soid_ != nullptr);
      owner_soid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOSingleObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes object_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_object_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 service_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOSingleObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOSingleObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_object_data(), target);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOSingleObject)
  return target;
}

size_t CMsgSOSingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOSingleObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes object_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_object_data());
    }

    // optional .CMsgSOIDOwner owner_soid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 type_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
    }

    // optional uint32 service_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_service_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOSingleObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOSingleObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOSingleObject::GetClassData() const { return &_class_data_; }

void CMsgSOSingleObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOSingleObject *>(to)->MergeFrom(
      static_cast<const CMsgSOSingleObject &>(from));
}


void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object_data(from._internal_object_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {
  return true;
}

void CMsgSOSingleObject::InternalSwap(CMsgSOSingleObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_data_, lhs_arena,
      &other->object_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOSingleObject, service_id_)
      + sizeof(CMsgSOSingleObject::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOSingleObject, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOSingleObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[2]);
}

// ===================================================================

class CMsgRecentMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRecentMatchInfo>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgRecentMatchInfo::CMsgRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgRecentMatchInfo)
}
CMsgRecentMatchInfo::CMsgRecentMatchInfo(const CMsgRecentMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgRecentMatchInfo)
}

inline void CMsgRecentMatchInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
}

CMsgRecentMatchInfo::~CMsgRecentMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgRecentMatchInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgRecentMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRecentMatchInfo::ArenaDtor(void* object) {
  CMsgRecentMatchInfo* _this = reinterpret_cast< CMsgRecentMatchInfo* >(object);
  (void)_this;
}
void CMsgRecentMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRecentMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRecentMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRecentMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_outcome_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(match_outcome_));
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRecentMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRecentMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRecentMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_mode(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // optional uint32 duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_duration(), target);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_player_slot(), target);
  }

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_match_outcome(), target);
  }

  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRecentMatchInfo)
  return target;
}

size_t CMsgRecentMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRecentMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 duration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 player_slot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

  }
  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRecentMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgRecentMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRecentMatchInfo::GetClassData() const { return &_class_data_; }

void CMsgRecentMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgRecentMatchInfo *>(to)->MergeFrom(
      static_cast<const CMsgRecentMatchInfo &>(from));
}


void CMsgRecentMatchInfo::MergeFrom(const CMsgRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_outcome_ = from.match_outcome_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRecentMatchInfo::CopyFrom(const CMsgRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecentMatchInfo::IsInitialized() const {
  return true;
}

void CMsgRecentMatchInfo::InternalSwap(CMsgRecentMatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRecentMatchInfo, timestamp_)
      + sizeof(CMsgRecentMatchInfo::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgRecentMatchInfo, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRecentMatchInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[3]);
}

// ===================================================================

class CMsgClientToGCRequestSocialFeedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestSocialFeedResponse>()._has_bits_);
  static void set_has_unk_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unk_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unk_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCRequestSocialFeedResponse::CMsgClientToGCRequestSocialFeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestSocialFeedResponse)
}
CMsgClientToGCRequestSocialFeedResponse::CMsgClientToGCRequestSocialFeedResponse(const CMsgClientToGCRequestSocialFeedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unk_1_, &from.unk_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&unk_3_) -
    reinterpret_cast<char*>(&unk_1_)) + sizeof(unk_3_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSocialFeedResponse)
}

inline void CMsgClientToGCRequestSocialFeedResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unk_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unk_3_) -
    reinterpret_cast<char*>(&unk_1_)) + sizeof(unk_3_));
}

CMsgClientToGCRequestSocialFeedResponse::~CMsgClientToGCRequestSocialFeedResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSocialFeedResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCRequestSocialFeedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRequestSocialFeedResponse::ArenaDtor(void* object) {
  CMsgClientToGCRequestSocialFeedResponse* _this = reinterpret_cast< CMsgClientToGCRequestSocialFeedResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRequestSocialFeedResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRequestSocialFeedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRequestSocialFeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestSocialFeedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&unk_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unk_3_) -
        reinterpret_cast<char*>(&unk_1_)) + sizeof(unk_3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestSocialFeedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 unk_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unk_1(&has_bits);
          unk_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 unk_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unk_2(&has_bits);
          unk_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 unk_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_unk_3(&has_bits);
          unk_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestSocialFeedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSocialFeedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unk_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unk_1(), target);
  }

  // optional uint64 unk_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unk_2(), target);
  }

  // optional uint64 unk_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_unk_3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSocialFeedResponse)
  return target;
}

size_t CMsgClientToGCRequestSocialFeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestSocialFeedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 unk_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_unk_1());
    }

    // optional uint64 unk_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_unk_2());
    }

    // optional uint64 unk_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_unk_3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestSocialFeedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCRequestSocialFeedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestSocialFeedResponse::GetClassData() const { return &_class_data_; }

void CMsgClientToGCRequestSocialFeedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCRequestSocialFeedResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCRequestSocialFeedResponse &>(from));
}


void CMsgClientToGCRequestSocialFeedResponse::MergeFrom(const CMsgClientToGCRequestSocialFeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestSocialFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unk_1_ = from.unk_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      unk_2_ = from.unk_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      unk_3_ = from.unk_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestSocialFeedResponse::CopyFrom(const CMsgClientToGCRequestSocialFeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestSocialFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSocialFeedResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSocialFeedResponse::InternalSwap(CMsgClientToGCRequestSocialFeedResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestSocialFeedResponse, unk_3_)
      + sizeof(CMsgClientToGCRequestSocialFeedResponse::unk_3_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRequestSocialFeedResponse, unk_1_)>(
          reinterpret_cast<char*>(&unk_1_),
          reinterpret_cast<char*>(&other->unk_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestSocialFeedResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[4]);
}

// ===================================================================

class CMsgBattleCupVictory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleCupVictory>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valid_until(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgBattleCupVictory::CMsgBattleCupVictory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgBattleCupVictory)
}
CMsgBattleCupVictory::CMsgBattleCupVictory(const CMsgBattleCupVictory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(trophy_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleCupVictory)
}

inline void CMsgBattleCupVictory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(trophy_id_));
}

CMsgBattleCupVictory::~CMsgBattleCupVictory() {
  // @@protoc_insertion_point(destructor:CMsgBattleCupVictory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgBattleCupVictory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgBattleCupVictory::ArenaDtor(void* object) {
  CMsgBattleCupVictory* _this = reinterpret_cast< CMsgBattleCupVictory* >(object);
  (void)_this;
}
void CMsgBattleCupVictory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBattleCupVictory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBattleCupVictory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleCupVictory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streak_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(streak_));
  }
  trophy_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleCupVictory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 win_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_win_date(&has_bits);
          win_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 valid_until = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_valid_until(&has_bits);
          valid_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 skill_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_skill_level(&has_bits);
          skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 division_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_division_id(&has_bits);
          division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 streak = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_streak(&has_bits);
          streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trophy_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_trophy_id(&has_bits);
          trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBattleCupVictory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleCupVictory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 win_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_win_date(), target);
  }

  // optional uint32 valid_until = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_valid_until(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_level(), target);
  }

  // optional uint32 tournament_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tournament_id(), target);
  }

  // optional uint32 division_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_division_id(), target);
  }

  // optional uint32 team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_team_id(), target);
  }

  // optional uint32 streak = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_streak(), target);
  }

  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleCupVictory)
  return target;
}

size_t CMsgBattleCupVictory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleCupVictory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 win_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_win_date());
    }

    // optional uint32 valid_until = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_valid_until());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_skill_level());
    }

    // optional uint32 tournament_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tournament_id());
    }

    // optional uint32 division_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_division_id());
    }

    // optional uint32 team_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 streak = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_streak());
    }

  }
  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBattleCupVictory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgBattleCupVictory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBattleCupVictory::GetClassData() const { return &_class_data_; }

void CMsgBattleCupVictory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgBattleCupVictory *>(to)->MergeFrom(
      static_cast<const CMsgBattleCupVictory &>(from));
}


void CMsgBattleCupVictory::MergeFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_date_ = from.win_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_until_ = from.valid_until_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_trophy_id(from._internal_trophy_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBattleCupVictory::CopyFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleCupVictory::IsInitialized() const {
  return true;
}

void CMsgBattleCupVictory::InternalSwap(CMsgBattleCupVictory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleCupVictory, trophy_id_)
      + sizeof(CMsgBattleCupVictory::trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleCupVictory, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleCupVictory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[5]);
}

// ===================================================================

class CMsgClientToGCSetItemStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemStyle>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemStyle)
}
CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(const CMsgClientToGCSetItemStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemStyle)
}

inline void CMsgClientToGCSetItemStyle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
}

CMsgClientToGCSetItemStyle::~CMsgClientToGCSetItemStyle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCSetItemStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCSetItemStyle::ArenaDtor(void* object) {
  CMsgClientToGCSetItemStyle* _this = reinterpret_cast< CMsgClientToGCSetItemStyle* >(object);
  (void)_this;
}
void CMsgClientToGCSetItemStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSetItemStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSetItemStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCSetItemStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 style_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemStyle)
  return target;
}

size_t CMsgClientToGCSetItemStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 style_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCSetItemStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCSetItemStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCSetItemStyle::GetClassData() const { return &_class_data_; }

void CMsgClientToGCSetItemStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCSetItemStyle *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCSetItemStyle &>(from));
}


void CMsgClientToGCSetItemStyle::MergeFrom(const CMsgClientToGCSetItemStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      style_index_ = from.style_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCSetItemStyle::CopyFrom(const CMsgClientToGCSetItemStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemStyle::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemStyle::InternalSwap(CMsgClientToGCSetItemStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemStyle, style_index_)
      + sizeof(CMsgClientToGCSetItemStyle::style_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemStyle, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[6]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot_Trophy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Trophy>()._has_bits_);
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trophy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Trophy)
}
CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trophy_id_, &from.trophy_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Trophy)
}

inline void CMsgDOTAProfileCard_Slot_Trophy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trophy_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
}

CMsgDOTAProfileCard_Slot_Trophy::~CMsgDOTAProfileCard_Slot_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Trophy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot_Trophy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Trophy::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Trophy* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Trophy* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Trophy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Trophy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Trophy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&trophy_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trophy_score_) -
        reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Trophy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 trophy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trophy_id(&has_bits);
          trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trophy_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trophy_score(&has_bits);
          trophy_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot_Trophy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Trophy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trophy_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Trophy)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Trophy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 trophy_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot_Trophy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot_Trophy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot_Trophy::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot_Trophy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot_Trophy *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot_Trophy &>(from));
}


void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      trophy_score_ = from.trophy_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Trophy::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Trophy::InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_score_)
      + sizeof(CMsgDOTAProfileCard_Slot_Trophy::trophy_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_id_)>(
          reinterpret_cast<char*>(&trophy_id_),
          reinterpret_cast<char*>(&other->trophy_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Trophy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[7]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Stat>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stat_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Stat)
}
CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_score_, &from.stat_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_id_) -
    reinterpret_cast<char*>(&stat_score_)) + sizeof(stat_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Stat)
}

inline void CMsgDOTAProfileCard_Slot_Stat::SharedCtor() {
stat_score_ = 0u;
stat_id_ = 3;
}

CMsgDOTAProfileCard_Slot_Stat::~CMsgDOTAProfileCard_Slot_Stat() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Stat::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Stat* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Stat* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    stat_score_ = 0u;
    stat_id_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAProfileCard_EStatID_IsValid(val))) {
            _internal_set_stat_id(static_cast<::CMsgDOTAProfileCard_EStatID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_score(&has_bits);
          stat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Stat)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_score());
    }

    // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot_Stat::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot_Stat *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot_Stat &>(from));
}


void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_score_ = from.stat_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_id_ = from.stat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Stat::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Stat::InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_score_, other->stat_score_);
  swap(stat_id_, other->stat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[8]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Item>()._has_bits_);
  static void set_has_serialized_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Item)
}
CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_item_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_item()) {
    serialized_item_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_item(), 
      GetArenaForAllocation());
  }
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Item)
}

inline void CMsgDOTAProfileCard_Slot_Item::SharedCtor() {
serialized_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_item_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_id_ = uint64_t{0u};
}

CMsgDOTAProfileCard_Slot_Item::~CMsgDOTAProfileCard_Slot_Item() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serialized_item_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProfileCard_Slot_Item::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Item* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Item* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_item_.ClearNonDefaultToEmpty();
  }
  item_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes serialized_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serialized_item();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_item(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Item)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_item());
    }

    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot_Item::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot_Item *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot_Item &>(from));
}


void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_item(from._internal_serialized_item());
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Item::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Item::InternalSwap(CMsgDOTAProfileCard_Slot_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_item_, lhs_arena,
      &other->serialized_item_, rhs_arena
  );
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[9]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Hero>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Hero)
}
CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Hero)
}

inline void CMsgDOTAProfileCard_Slot_Hero::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
}

CMsgDOTAProfileCard_Slot_Hero::~CMsgDOTAProfileCard_Slot_Hero() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Hero)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Hero::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Hero* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Hero* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Hero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Hero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_losses_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_wins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_wins(&has_bits);
          hero_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_losses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_losses(&has_bits);
          hero_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot_Hero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Hero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 hero_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_wins(), target);
  }

  // optional uint32 hero_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_losses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Hero)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Hero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 hero_wins = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_wins());
    }

    // optional uint32 hero_losses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_losses());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot_Hero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot_Hero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot_Hero::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot_Hero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot_Hero *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot_Hero &>(from));
}


void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_wins_ = from.hero_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_losses_ = from.hero_losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Hero::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Hero::InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_losses_)
      + sizeof(CMsgDOTAProfileCard_Slot_Hero::hero_losses_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Hero::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[10]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot_Emoticon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Emoticon>()._has_bits_);
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}
CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  emoticon_id_ = from.emoticon_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}

inline void CMsgDOTAProfileCard_Slot_Emoticon::SharedCtor() {
emoticon_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Emoticon::~CMsgDOTAProfileCard_Slot_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Emoticon)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot_Emoticon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Emoticon::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Emoticon* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Emoticon* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Emoticon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Emoticon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Emoticon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoticon_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Emoticon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 emoticon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_emoticon_id(&has_bits);
          emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot_Emoticon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Emoticon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 emoticon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Emoticon)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Emoticon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 emoticon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_emoticon_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot_Emoticon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot_Emoticon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot_Emoticon::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot_Emoticon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot_Emoticon *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot_Emoticon &>(from));
}


void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_emoticon_id()) {
    _internal_set_emoticon_id(from._internal_emoticon_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Emoticon::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Emoticon::InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(emoticon_id_, other->emoticon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Emoticon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[11]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Team>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Team)
}
CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Team)
}

inline void CMsgDOTAProfileCard_Slot_Team::SharedCtor() {
team_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Team::~CMsgDOTAProfileCard_Slot_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Team)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Team::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Team* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Team* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Team)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot_Team::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot_Team *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot_Team &>(from));
}


void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team_id()) {
    _internal_set_team_id(from._internal_team_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Team::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Team::InternalSwap(CMsgDOTAProfileCard_Slot_Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Team::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[12]);
}

// ===================================================================

class CMsgDOTAProfileCard_Slot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Trophy& trophy(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_trophy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Stat& stat(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Item& item(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Hero& hero(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Emoticon& emoticon(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_emoticon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Team& team(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgDOTAProfileCard_Slot_Trophy&
CMsgDOTAProfileCard_Slot::_Internal::trophy(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->trophy_;
}
const ::CMsgDOTAProfileCard_Slot_Stat&
CMsgDOTAProfileCard_Slot::_Internal::stat(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->stat_;
}
const ::CMsgDOTAProfileCard_Slot_Item&
CMsgDOTAProfileCard_Slot::_Internal::item(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->item_;
}
const ::CMsgDOTAProfileCard_Slot_Hero&
CMsgDOTAProfileCard_Slot::_Internal::hero(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->hero_;
}
const ::CMsgDOTAProfileCard_Slot_Emoticon&
CMsgDOTAProfileCard_Slot::_Internal::emoticon(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->emoticon_;
}
const ::CMsgDOTAProfileCard_Slot_Team&
CMsgDOTAProfileCard_Slot::_Internal::team(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->team_;
}
CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot)
}
CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trophy()) {
    trophy_ = new ::CMsgDOTAProfileCard_Slot_Trophy(*from.trophy_);
  } else {
    trophy_ = nullptr;
  }
  if (from._internal_has_stat()) {
    stat_ = new ::CMsgDOTAProfileCard_Slot_Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::CMsgDOTAProfileCard_Slot_Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_hero()) {
    hero_ = new ::CMsgDOTAProfileCard_Slot_Hero(*from.hero_);
  } else {
    hero_ = nullptr;
  }
  if (from._internal_has_emoticon()) {
    emoticon_ = new ::CMsgDOTAProfileCard_Slot_Emoticon(*from.emoticon_);
  } else {
    emoticon_ = nullptr;
  }
  if (from._internal_has_team()) {
    team_ = new ::CMsgDOTAProfileCard_Slot_Team(*from.team_);
  } else {
    team_ = nullptr;
  }
  slot_id_ = from.slot_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot)
}

inline void CMsgDOTAProfileCard_Slot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trophy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&trophy_)) + sizeof(slot_id_));
}

CMsgDOTAProfileCard_Slot::~CMsgDOTAProfileCard_Slot() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard_Slot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trophy_;
  if (this != internal_default_instance()) delete stat_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete hero_;
  if (this != internal_default_instance()) delete emoticon_;
  if (this != internal_default_instance()) delete team_;
}

void CMsgDOTAProfileCard_Slot::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trophy_ != nullptr);
      trophy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stat_ != nullptr);
      stat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(item_ != nullptr);
      item_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hero_ != nullptr);
      hero_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(emoticon_ != nullptr);
      emoticon_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(team_ != nullptr);
      team_->Clear();
    }
  }
  slot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trophy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_emoticon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard_Slot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trophy(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stat(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::item(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hero(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::emoticon(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::team(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot)
  return target;
}

size_t CMsgDOTAProfileCard_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trophy_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stat_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hero_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emoticon_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_);
    }

    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard_Slot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard_Slot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard_Slot::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard_Slot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard_Slot *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard_Slot &>(from));
}


void CMsgDOTAProfileCard_Slot::MergeFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trophy()->::CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(from._internal_trophy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stat()->::CMsgDOTAProfileCard_Slot_Stat::MergeFrom(from._internal_stat());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_item()->::CMsgDOTAProfileCard_Slot_Item::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_hero()->::CMsgDOTAProfileCard_Slot_Hero::MergeFrom(from._internal_hero());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_emoticon()->::CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(from._internal_emoticon());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_team()->::CMsgDOTAProfileCard_Slot_Team::MergeFrom(from._internal_team());
    }
    if (cached_has_bits & 0x00000040u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot::InternalSwap(CMsgDOTAProfileCard_Slot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, slot_id_)
      + sizeof(CMsgDOTAProfileCard_Slot::slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, trophy_)>(
          reinterpret_cast<char*>(&trophy_),
          reinterpret_cast<char*>(&other->trophy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[13]);
}

// ===================================================================

class CMsgDOTAProfileCard::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_badge_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgBattleCupVictory& recent_battle_cup_victory(const CMsgDOTAProfileCard* msg);
  static void set_has_recent_battle_cup_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_leaderboard_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_plus_original_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank_tier_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_previous_rank_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rank_tier_mmr_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_leaderboard_rank_core(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rank_tier_peak(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_favorite_team_packed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgBattleCupVictory&
CMsgDOTAProfileCard::_Internal::recent_battle_cup_victory(const CMsgDOTAProfileCard* msg) {
  return *msg->recent_battle_cup_victory_;
}
CMsgDOTAProfileCard::CMsgDOTAProfileCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slots_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard)
}
CMsgDOTAProfileCard::CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recent_battle_cup_victory()) {
    recent_battle_cup_victory_ = new ::CMsgBattleCupVictory(*from.recent_battle_cup_victory_);
  } else {
    recent_battle_cup_victory_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(favorite_team_packed_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard)
}

inline void CMsgDOTAProfileCard::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recent_battle_cup_victory_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&recent_battle_cup_victory_)) + sizeof(favorite_team_packed_));
}

CMsgDOTAProfileCard::~CMsgDOTAProfileCard() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDOTAProfileCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete recent_battle_cup_victory_;
}

void CMsgDOTAProfileCard::ArenaDtor(void* object) {
  CMsgDOTAProfileCard* _this = reinterpret_cast< CMsgDOTAProfileCard* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(recent_battle_cup_victory_ != nullptr);
    recent_battle_cup_victory_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plus_subscriber_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_plus_subscriber_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&plus_original_start_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favorite_team_packed_) -
        reinterpret_cast<char*>(&plus_original_start_date_)) + sizeof(favorite_team_packed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAProfileCard.Slot slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 badge_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_badge_points(&has_bits);
          badge_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_event_points(&has_bits);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_battle_cup_victory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_tier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_rank_tier(&has_bits);
          rank_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leaderboard_rank = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_leaderboard_rank(&has_bits);
          leaderboard_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_plus_subscriber(&has_bits);
          is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 plus_original_start_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_plus_original_start_date(&has_bits);
          plus_original_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_tier_score = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_rank_tier_score(&has_bits);
          rank_tier_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 previous_rank_tier = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_previous_rank_tier(&has_bits);
          previous_rank_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_tier_mmr_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_rank_tier_mmr_type(&has_bits);
          rank_tier_mmr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leaderboard_rank_core = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_leaderboard_rank_core(&has_bits);
          leaderboard_rank_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_tier_peak = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_rank_tier_peak(&has_bits);
          rank_tier_peak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 title = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_title(&has_bits);
          title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 favorite_team_packed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_favorite_team_packed(&has_bits);
          favorite_team_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAProfileCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_slots(i), target, stream);
  }

  // optional uint32 badge_points = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_badge_points(), target);
  }

  // optional uint32 event_points = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_points(), target);
  }

  // optional uint32 event_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_event_id(), target);
  }

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::recent_battle_cup_victory(this), target, stream);
  }

  // optional uint32 rank_tier = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rank_tier(), target);
  }

  // optional uint32 leaderboard_rank = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_leaderboard_rank(), target);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 plus_original_start_date = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_plus_original_start_date(), target);
  }

  // optional uint32 rank_tier_score = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rank_tier_score(), target);
  }

  // optional uint32 previous_rank_tier = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_previous_rank_tier(), target);
  }

  // optional uint32 rank_tier_mmr_type = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rank_tier_mmr_type(), target);
  }

  // optional uint32 leaderboard_rank_core = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_leaderboard_rank_core(), target);
  }

  // optional uint32 rank_tier_peak = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_rank_tier_peak(), target);
  }

  // optional uint32 title = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_title(), target);
  }

  // optional uint64 favorite_team_packed = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_favorite_team_packed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard)
  return target;
}

size_t CMsgDOTAProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_battle_cup_victory_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 badge_points = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_badge_points());
    }

    // optional uint32 event_points = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_points());
    }

    // optional uint32 event_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 rank_tier = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_tier());
    }

    // optional uint32 leaderboard_rank = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leaderboard_rank());
    }

    // optional bool is_plus_subscriber = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 plus_original_start_date = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_plus_original_start_date());
    }

    // optional uint32 rank_tier_score = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_tier_score());
    }

    // optional uint32 previous_rank_tier = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_previous_rank_tier());
    }

    // optional uint32 rank_tier_mmr_type = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_tier_mmr_type());
    }

    // optional uint32 leaderboard_rank_core = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaderboard_rank_core());
    }

    // optional uint32 rank_tier_peak = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_tier_peak());
    }

    // optional uint32 title = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_title());
    }

    // optional uint64 favorite_team_packed = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_favorite_team_packed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAProfileCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDOTAProfileCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAProfileCard::GetClassData() const { return &_class_data_; }

void CMsgDOTAProfileCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDOTAProfileCard *>(to)->MergeFrom(
      static_cast<const CMsgDOTAProfileCard &>(from));
}


void CMsgDOTAProfileCard::MergeFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_recent_battle_cup_victory()->::CMsgBattleCupVictory::MergeFrom(from._internal_recent_battle_cup_victory());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      badge_points_ = from.badge_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rank_tier_ = from.rank_tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      leaderboard_rank_ = from.leaderboard_rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      plus_original_start_date_ = from.plus_original_start_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      rank_tier_score_ = from.rank_tier_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      previous_rank_tier_ = from.previous_rank_tier_;
    }
    if (cached_has_bits & 0x00000800u) {
      rank_tier_mmr_type_ = from.rank_tier_mmr_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      leaderboard_rank_core_ = from.leaderboard_rank_core_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_tier_peak_ = from.rank_tier_peak_;
    }
    if (cached_has_bits & 0x00004000u) {
      title_ = from.title_;
    }
    if (cached_has_bits & 0x00008000u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAProfileCard::CopyFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard::InternalSwap(CMsgDOTAProfileCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slots_.InternalSwap(&other->slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard, favorite_team_packed_)
      + sizeof(CMsgDOTAProfileCard::favorite_team_packed_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard, recent_battle_cup_victory_)>(
          reinterpret_cast<char*>(&recent_battle_cup_victory_),
          reinterpret_cast<char*>(&other->recent_battle_cup_victory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[14]);
}

// ===================================================================

class CMsgSuccessfulHero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSuccessfulHero>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longest_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSuccessfulHero::CMsgSuccessfulHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSuccessfulHero)
}
CMsgSuccessfulHero::CMsgSuccessfulHero(const CMsgSuccessfulHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&longest_streak_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
  // @@protoc_insertion_point(copy_constructor:CMsgSuccessfulHero)
}

inline void CMsgSuccessfulHero::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longest_streak_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
}

CMsgSuccessfulHero::~CMsgSuccessfulHero() {
  // @@protoc_insertion_point(destructor:CMsgSuccessfulHero)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSuccessfulHero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSuccessfulHero::ArenaDtor(void* object) {
  CMsgSuccessfulHero* _this = reinterpret_cast< CMsgSuccessfulHero* >(object);
  (void)_this;
}
void CMsgSuccessfulHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSuccessfulHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSuccessfulHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSuccessfulHero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longest_streak_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSuccessfulHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float win_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_win_percent(&has_bits);
          win_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 longest_streak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_longest_streak(&has_bits);
          longest_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSuccessfulHero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSuccessfulHero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional float win_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_win_percent(), target);
  }

  // optional uint32 longest_streak = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_longest_streak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSuccessfulHero)
  return target;
}

size_t CMsgSuccessfulHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSuccessfulHero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional float win_percent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 longest_streak = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_longest_streak());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSuccessfulHero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSuccessfulHero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSuccessfulHero::GetClassData() const { return &_class_data_; }

void CMsgSuccessfulHero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSuccessfulHero *>(to)->MergeFrom(
      static_cast<const CMsgSuccessfulHero &>(from));
}


void CMsgSuccessfulHero::MergeFrom(const CMsgSuccessfulHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSuccessfulHero)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_percent_ = from.win_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      longest_streak_ = from.longest_streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSuccessfulHero::CopyFrom(const CMsgSuccessfulHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSuccessfulHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSuccessfulHero::IsInitialized() const {
  return true;
}

void CMsgSuccessfulHero::InternalSwap(CMsgSuccessfulHero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSuccessfulHero, longest_streak_)
      + sizeof(CMsgSuccessfulHero::longest_streak_)
      - PROTOBUF_FIELD_OFFSET(CMsgSuccessfulHero, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSuccessfulHero::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[15]);
}

// ===================================================================

class CMsgClientToGCGetAllHeroProgressResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetAllHeroProgressResponse>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curr_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_laps_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_curr_hero_games(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_curr_lap_time_started(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_curr_lap_games(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_lap_games(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_lap_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lap_heroes_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lap_heroes_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_next_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_prev_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_prev_hero_games(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_prev_avg_tries(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_curr_avg_tries(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_next_avg_tries(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_full_lap_avg_tries(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_curr_lap_avg_tries(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_profile_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

CMsgClientToGCGetAllHeroProgressResponse::CMsgClientToGCGetAllHeroProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetAllHeroProgressResponse)
}
CMsgClientToGCGetAllHeroProgressResponse::CMsgClientToGCGetAllHeroProgressResponse(const CMsgClientToGCGetAllHeroProgressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_name()) {
    profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(start_hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetAllHeroProgressResponse)
}

inline void CMsgClientToGCGetAllHeroProgressResponse::SharedCtor() {
profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(start_hero_id_));
}

CMsgClientToGCGetAllHeroProgressResponse::~CMsgClientToGCGetAllHeroProgressResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetAllHeroProgressResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCGetAllHeroProgressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  profile_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCGetAllHeroProgressResponse::ArenaDtor(void* object) {
  CMsgClientToGCGetAllHeroProgressResponse* _this = reinterpret_cast< CMsgClientToGCGetAllHeroProgressResponse* >(object);
  (void)_this;
}
void CMsgClientToGCGetAllHeroProgressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetAllHeroProgressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetAllHeroProgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetAllHeroProgressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    profile_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_lap_games_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(best_lap_games_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&best_lap_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curr_avg_tries_) -
        reinterpret_cast<char*>(&best_lap_time_)) + sizeof(curr_avg_tries_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&next_avg_tries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_hero_id_) -
        reinterpret_cast<char*>(&next_avg_tries_)) + sizeof(start_hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetAllHeroProgressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 curr_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_curr_hero_id(&has_bits);
          curr_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 laps_completed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_laps_completed(&has_bits);
          laps_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 curr_hero_games = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_curr_hero_games(&has_bits);
          curr_hero_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 curr_lap_time_started = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_curr_lap_time_started(&has_bits);
          curr_lap_time_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 curr_lap_games = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_curr_lap_games(&has_bits);
          curr_lap_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_lap_games = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_best_lap_games(&has_bits);
          best_lap_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_lap_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_best_lap_time(&has_bits);
          best_lap_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lap_heroes_completed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_lap_heroes_completed(&has_bits);
          lap_heroes_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lap_heroes_remaining = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_lap_heroes_remaining(&has_bits);
          lap_heroes_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 next_hero_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_next_hero_id(&has_bits);
          next_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prev_hero_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_prev_hero_id(&has_bits);
          prev_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prev_hero_games = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_prev_hero_games(&has_bits);
          prev_hero_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float prev_avg_tries = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_prev_avg_tries(&has_bits);
          prev_avg_tries_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float curr_avg_tries = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_curr_avg_tries(&has_bits);
          curr_avg_tries_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float next_avg_tries = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_next_avg_tries(&has_bits);
          next_avg_tries_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float full_lap_avg_tries = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_full_lap_avg_tries(&has_bits);
          full_lap_avg_tries_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float curr_lap_avg_tries = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_curr_lap_avg_tries(&has_bits);
          curr_lap_avg_tries_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string profile_name = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_profile_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCGetAllHeroProgressResponse.profile_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_hero_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_start_hero_id(&has_bits);
          start_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetAllHeroProgressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetAllHeroProgressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 curr_hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_curr_hero_id(), target);
  }

  // optional uint32 laps_completed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_laps_completed(), target);
  }

  // optional uint32 curr_hero_games = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curr_hero_games(), target);
  }

  // optional uint32 curr_lap_time_started = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_curr_lap_time_started(), target);
  }

  // optional uint32 curr_lap_games = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_curr_lap_games(), target);
  }

  // optional uint32 best_lap_games = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_best_lap_games(), target);
  }

  // optional uint32 best_lap_time = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_best_lap_time(), target);
  }

  // optional uint32 lap_heroes_completed = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_lap_heroes_completed(), target);
  }

  // optional uint32 lap_heroes_remaining = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lap_heroes_remaining(), target);
  }

  // optional uint32 next_hero_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_next_hero_id(), target);
  }

  // optional uint32 prev_hero_id = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_prev_hero_id(), target);
  }

  // optional uint32 prev_hero_games = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_prev_hero_games(), target);
  }

  // optional float prev_avg_tries = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_prev_avg_tries(), target);
  }

  // optional float curr_avg_tries = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_curr_avg_tries(), target);
  }

  // optional float next_avg_tries = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_next_avg_tries(), target);
  }

  // optional float full_lap_avg_tries = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_full_lap_avg_tries(), target);
  }

  // optional float curr_lap_avg_tries = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_curr_lap_avg_tries(), target);
  }

  // optional string profile_name = 19;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_name().data(), static_cast<int>(this->_internal_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCGetAllHeroProgressResponse.profile_name");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_profile_name(), target);
  }

  // optional uint32 start_hero_id = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_start_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetAllHeroProgressResponse)
  return target;
}

size_t CMsgClientToGCGetAllHeroProgressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetAllHeroProgressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string profile_name = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 curr_hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_curr_hero_id());
    }

    // optional uint32 laps_completed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_laps_completed());
    }

    // optional uint32 curr_hero_games = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_curr_hero_games());
    }

    // optional uint32 curr_lap_time_started = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_curr_lap_time_started());
    }

    // optional uint32 curr_lap_games = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_curr_lap_games());
    }

    // optional uint32 best_lap_games = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_best_lap_games());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 best_lap_time = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_best_lap_time());
    }

    // optional uint32 lap_heroes_completed = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lap_heroes_completed());
    }

    // optional uint32 lap_heroes_remaining = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lap_heroes_remaining());
    }

    // optional uint32 next_hero_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_next_hero_id());
    }

    // optional uint32 prev_hero_id = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prev_hero_id());
    }

    // optional uint32 prev_hero_games = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prev_hero_games());
    }

    // optional float prev_avg_tries = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float curr_avg_tries = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float next_avg_tries = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float full_lap_avg_tries = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float curr_lap_avg_tries = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 start_hero_id = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetAllHeroProgressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCGetAllHeroProgressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetAllHeroProgressResponse::GetClassData() const { return &_class_data_; }

void CMsgClientToGCGetAllHeroProgressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCGetAllHeroProgressResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCGetAllHeroProgressResponse &>(from));
}


void CMsgClientToGCGetAllHeroProgressResponse::MergeFrom(const CMsgClientToGCGetAllHeroProgressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetAllHeroProgressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_profile_name(from._internal_profile_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      curr_hero_id_ = from.curr_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      laps_completed_ = from.laps_completed_;
    }
    if (cached_has_bits & 0x00000010u) {
      curr_hero_games_ = from.curr_hero_games_;
    }
    if (cached_has_bits & 0x00000020u) {
      curr_lap_time_started_ = from.curr_lap_time_started_;
    }
    if (cached_has_bits & 0x00000040u) {
      curr_lap_games_ = from.curr_lap_games_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_lap_games_ = from.best_lap_games_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      best_lap_time_ = from.best_lap_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      lap_heroes_completed_ = from.lap_heroes_completed_;
    }
    if (cached_has_bits & 0x00000400u) {
      lap_heroes_remaining_ = from.lap_heroes_remaining_;
    }
    if (cached_has_bits & 0x00000800u) {
      next_hero_id_ = from.next_hero_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      prev_hero_id_ = from.prev_hero_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      prev_hero_games_ = from.prev_hero_games_;
    }
    if (cached_has_bits & 0x00004000u) {
      prev_avg_tries_ = from.prev_avg_tries_;
    }
    if (cached_has_bits & 0x00008000u) {
      curr_avg_tries_ = from.curr_avg_tries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      next_avg_tries_ = from.next_avg_tries_;
    }
    if (cached_has_bits & 0x00020000u) {
      full_lap_avg_tries_ = from.full_lap_avg_tries_;
    }
    if (cached_has_bits & 0x00040000u) {
      curr_lap_avg_tries_ = from.curr_lap_avg_tries_;
    }
    if (cached_has_bits & 0x00080000u) {
      start_hero_id_ = from.start_hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetAllHeroProgressResponse::CopyFrom(const CMsgClientToGCGetAllHeroProgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetAllHeroProgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetAllHeroProgressResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetAllHeroProgressResponse::InternalSwap(CMsgClientToGCGetAllHeroProgressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_name_, lhs_arena,
      &other->profile_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetAllHeroProgressResponse, start_hero_id_)
      + sizeof(CMsgClientToGCGetAllHeroProgressResponse::start_hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetAllHeroProgressResponse, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetAllHeroProgressResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[16]);
}

// ===================================================================

class CMsgProfileResponse_FeaturedHero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProfileResponse_FeaturedHero>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manually_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_plus_hero_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CSOEconItem& plus_hero_relics_item(const CMsgProfileResponse_FeaturedHero* msg);
  static void set_has_plus_hero_relics_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOEconItem&
CMsgProfileResponse_FeaturedHero::_Internal::plus_hero_relics_item(const CMsgProfileResponse_FeaturedHero* msg) {
  return *msg->plus_hero_relics_item_;
}
CMsgProfileResponse_FeaturedHero::CMsgProfileResponse_FeaturedHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  equipped_econ_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgProfileResponse.FeaturedHero)
}
CMsgProfileResponse_FeaturedHero::CMsgProfileResponse_FeaturedHero(const CMsgProfileResponse_FeaturedHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      equipped_econ_items_(from.equipped_econ_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plus_hero_relics_item()) {
    plus_hero_relics_item_ = new ::CSOEconItem(*from.plus_hero_relics_item_);
  } else {
    plus_hero_relics_item_ = nullptr;
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&plus_hero_xp_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(plus_hero_xp_));
  // @@protoc_insertion_point(copy_constructor:CMsgProfileResponse.FeaturedHero)
}

inline void CMsgProfileResponse_FeaturedHero::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plus_hero_relics_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&plus_hero_xp_) -
    reinterpret_cast<char*>(&plus_hero_relics_item_)) + sizeof(plus_hero_xp_));
}

CMsgProfileResponse_FeaturedHero::~CMsgProfileResponse_FeaturedHero() {
  // @@protoc_insertion_point(destructor:CMsgProfileResponse.FeaturedHero)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgProfileResponse_FeaturedHero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete plus_hero_relics_item_;
}

void CMsgProfileResponse_FeaturedHero::ArenaDtor(void* object) {
  CMsgProfileResponse_FeaturedHero* _this = reinterpret_cast< CMsgProfileResponse_FeaturedHero* >(object);
  (void)_this;
}
void CMsgProfileResponse_FeaturedHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProfileResponse_FeaturedHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProfileResponse_FeaturedHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProfileResponse.FeaturedHero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equipped_econ_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plus_hero_relics_item_ != nullptr);
    plus_hero_relics_item_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plus_hero_xp_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(plus_hero_xp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProfileResponse_FeaturedHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItem equipped_econ_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipped_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool manually_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_manually_set(&has_bits);
          manually_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 plus_hero_xp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_plus_hero_xp(&has_bits);
          plus_hero_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSOEconItem plus_hero_relics_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_plus_hero_relics_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProfileResponse_FeaturedHero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProfileResponse.FeaturedHero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // repeated .CSOEconItem equipped_econ_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_econ_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_equipped_econ_items(i), target, stream);
  }

  // optional bool manually_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_manually_set(), target);
  }

  // optional uint32 plus_hero_xp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_plus_hero_xp(), target);
  }

  // optional .CSOEconItem plus_hero_relics_item = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::plus_hero_relics_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProfileResponse.FeaturedHero)
  return target;
}

size_t CMsgProfileResponse_FeaturedHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProfileResponse.FeaturedHero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItem equipped_econ_items = 2;
  total_size += 1UL * this->_internal_equipped_econ_items_size();
  for (const auto& msg : this->equipped_econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CSOEconItem plus_hero_relics_item = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plus_hero_relics_item_);
    }

    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional bool manually_set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 plus_hero_xp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_plus_hero_xp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProfileResponse_FeaturedHero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgProfileResponse_FeaturedHero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProfileResponse_FeaturedHero::GetClassData() const { return &_class_data_; }

void CMsgProfileResponse_FeaturedHero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgProfileResponse_FeaturedHero *>(to)->MergeFrom(
      static_cast<const CMsgProfileResponse_FeaturedHero &>(from));
}


void CMsgProfileResponse_FeaturedHero::MergeFrom(const CMsgProfileResponse_FeaturedHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProfileResponse.FeaturedHero)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_plus_hero_relics_item()->::CSOEconItem::MergeFrom(from._internal_plus_hero_relics_item());
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      manually_set_ = from.manually_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      plus_hero_xp_ = from.plus_hero_xp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProfileResponse_FeaturedHero::CopyFrom(const CMsgProfileResponse_FeaturedHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProfileResponse.FeaturedHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProfileResponse_FeaturedHero::IsInitialized() const {
  return true;
}

void CMsgProfileResponse_FeaturedHero::InternalSwap(CMsgProfileResponse_FeaturedHero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  equipped_econ_items_.InternalSwap(&other->equipped_econ_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProfileResponse_FeaturedHero, plus_hero_xp_)
      + sizeof(CMsgProfileResponse_FeaturedHero::plus_hero_xp_)
      - PROTOBUF_FIELD_OFFSET(CMsgProfileResponse_FeaturedHero, plus_hero_relics_item_)>(
          reinterpret_cast<char*>(&plus_hero_relics_item_),
          reinterpret_cast<char*>(&other->plus_hero_relics_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProfileResponse_FeaturedHero::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[17]);
}

// ===================================================================

class CMsgProfileResponse_MatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProfileResponse_MatchInfo>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_performance_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_won_match(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgProfileResponse_MatchInfo::CMsgProfileResponse_MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgProfileResponse.MatchInfo)
}
CMsgProfileResponse_MatchInfo::CMsgProfileResponse_MatchInfo(const CMsgProfileResponse_MatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&won_match_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(won_match_));
  // @@protoc_insertion_point(copy_constructor:CMsgProfileResponse.MatchInfo)
}

inline void CMsgProfileResponse_MatchInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&won_match_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(won_match_));
}

CMsgProfileResponse_MatchInfo::~CMsgProfileResponse_MatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgProfileResponse.MatchInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgProfileResponse_MatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgProfileResponse_MatchInfo::ArenaDtor(void* object) {
  CMsgProfileResponse_MatchInfo* _this = reinterpret_cast< CMsgProfileResponse_MatchInfo* >(object);
  (void)_this;
}
void CMsgProfileResponse_MatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProfileResponse_MatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProfileResponse_MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProfileResponse.MatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&won_match_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(won_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProfileResponse_MatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_timestamp(&has_bits);
          match_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 performance_rating = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_performance_rating(&has_bits);
          performance_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool won_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_won_match(&has_bits);
          won_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProfileResponse_MatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProfileResponse.MatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 match_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_match_timestamp(), target);
  }

  // optional sint32 performance_rating = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_performance_rating(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional bool won_match = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_won_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProfileResponse.MatchInfo)
  return target;
}

size_t CMsgProfileResponse_MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProfileResponse.MatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 match_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_match_timestamp());
    }

    // optional sint32 performance_rating = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32SizePlusOne(this->_internal_performance_rating());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional bool won_match = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProfileResponse_MatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgProfileResponse_MatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProfileResponse_MatchInfo::GetClassData() const { return &_class_data_; }

void CMsgProfileResponse_MatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgProfileResponse_MatchInfo *>(to)->MergeFrom(
      static_cast<const CMsgProfileResponse_MatchInfo &>(from));
}


void CMsgProfileResponse_MatchInfo::MergeFrom(const CMsgProfileResponse_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProfileResponse.MatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_timestamp_ = from.match_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      performance_rating_ = from.performance_rating_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      won_match_ = from.won_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProfileResponse_MatchInfo::CopyFrom(const CMsgProfileResponse_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProfileResponse.MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProfileResponse_MatchInfo::IsInitialized() const {
  return true;
}

void CMsgProfileResponse_MatchInfo::InternalSwap(CMsgProfileResponse_MatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProfileResponse_MatchInfo, won_match_)
      + sizeof(CMsgProfileResponse_MatchInfo::won_match_)
      - PROTOBUF_FIELD_OFFSET(CMsgProfileResponse_MatchInfo, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProfileResponse_MatchInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[18]);
}

// ===================================================================

class CMsgProfileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProfileResponse>()._has_bits_);
  static const ::CSOEconItem& background_item(const CMsgProfileResponse* msg);
  static void set_has_background_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgRecentMatchInfo& recent_match_details(const CMsgProfileResponse* msg);
  static void set_has_recent_match_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CSOEconItem&
CMsgProfileResponse::_Internal::background_item(const CMsgProfileResponse* msg) {
  return *msg->background_item_;
}
const ::CMsgRecentMatchInfo&
CMsgProfileResponse::_Internal::recent_match_details(const CMsgProfileResponse* msg) {
  return *msg->recent_match_details_;
}
CMsgProfileResponse::CMsgProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  featured_heroes_(arena),
  recent_matches_(arena),
  successful_heroes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgProfileResponse)
}
CMsgProfileResponse::CMsgProfileResponse(const CMsgProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      featured_heroes_(from.featured_heroes_),
      recent_matches_(from.recent_matches_),
      successful_heroes_(from.successful_heroes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_background_item()) {
    background_item_ = new ::CSOEconItem(*from.background_item_);
  } else {
    background_item_ = nullptr;
  }
  if (from._internal_has_recent_match_details()) {
    recent_match_details_ = new ::CMsgRecentMatchInfo(*from.recent_match_details_);
  } else {
    recent_match_details_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgProfileResponse)
}

inline void CMsgProfileResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&background_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&background_item_)) + sizeof(result_));
}

CMsgProfileResponse::~CMsgProfileResponse() {
  // @@protoc_insertion_point(destructor:CMsgProfileResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete background_item_;
  if (this != internal_default_instance()) delete recent_match_details_;
}

void CMsgProfileResponse::ArenaDtor(void* object) {
  CMsgProfileResponse* _this = reinterpret_cast< CMsgProfileResponse* >(object);
  (void)_this;
}
void CMsgProfileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProfileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  featured_heroes_.Clear();
  recent_matches_.Clear();
  successful_heroes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(background_item_ != nullptr);
      background_item_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(recent_match_details_ != nullptr);
      recent_match_details_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProfileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOEconItem background_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgProfileResponse.FeaturedHero featured_heroes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_featured_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgProfileResponse.MatchInfo recent_matches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recent_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSuccessfulHero successful_heroes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_successful_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRecentMatchInfo recent_match_details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_match_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgProfileResponse.EResponse result = 6 [default = k_eInternalError];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgProfileResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgProfileResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProfileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProfileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CSOEconItem background_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::background_item(this), target, stream);
  }

  // repeated .CMsgProfileResponse.FeaturedHero featured_heroes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_featured_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_featured_heroes(i), target, stream);
  }

  // repeated .CMsgProfileResponse.MatchInfo recent_matches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recent_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_recent_matches(i), target, stream);
  }

  // repeated .CMsgSuccessfulHero successful_heroes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_successful_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_successful_heroes(i), target, stream);
  }

  // optional .CMsgRecentMatchInfo recent_match_details = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::recent_match_details(this), target, stream);
  }

  // optional .CMsgProfileResponse.EResponse result = 6 [default = k_eInternalError];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProfileResponse)
  return target;
}

size_t CMsgProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProfileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgProfileResponse.FeaturedHero featured_heroes = 2;
  total_size += 1UL * this->_internal_featured_heroes_size();
  for (const auto& msg : this->featured_heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgProfileResponse.MatchInfo recent_matches = 3;
  total_size += 1UL * this->_internal_recent_matches_size();
  for (const auto& msg : this->recent_matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSuccessfulHero successful_heroes = 4;
  total_size += 1UL * this->_internal_successful_heroes_size();
  for (const auto& msg : this->successful_heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CSOEconItem background_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_item_);
    }

    // optional .CMsgRecentMatchInfo recent_match_details = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_match_details_);
    }

    // optional .CMsgProfileResponse.EResponse result = 6 [default = k_eInternalError];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProfileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgProfileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProfileResponse::GetClassData() const { return &_class_data_; }

void CMsgProfileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgProfileResponse *>(to)->MergeFrom(
      static_cast<const CMsgProfileResponse &>(from));
}


void CMsgProfileResponse::MergeFrom(const CMsgProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  featured_heroes_.MergeFrom(from.featured_heroes_);
  recent_matches_.MergeFrom(from.recent_matches_);
  successful_heroes_.MergeFrom(from.successful_heroes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_background_item()->::CSOEconItem::MergeFrom(from._internal_background_item());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_recent_match_details()->::CMsgRecentMatchInfo::MergeFrom(from._internal_recent_match_details());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProfileResponse::CopyFrom(const CMsgProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProfileResponse::IsInitialized() const {
  return true;
}

void CMsgProfileResponse::InternalSwap(CMsgProfileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  featured_heroes_.InternalSwap(&other->featured_heroes_);
  recent_matches_.InternalSwap(&other->recent_matches_);
  successful_heroes_.InternalSwap(&other->successful_heroes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProfileResponse, result_)
      + sizeof(CMsgProfileResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgProfileResponse, background_item_)>(
          reinterpret_cast<char*>(&background_item_),
          reinterpret_cast<char*>(&other->background_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProfileResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[19]);
}

// ===================================================================

class CMsgSOMultipleObjects_SingleObject::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOMultipleObjects_SingleObject>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOMultipleObjects.SingleObject)
}
CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_data()) {
    object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_data(), 
      GetArenaForAllocation());
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects.SingleObject)
}

inline void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_id_ = 0;
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects.SingleObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSOMultipleObjects_SingleObject::ArenaDtor(void* object) {
  CMsgSOMultipleObjects_SingleObject* _this = reinterpret_cast< CMsgSOMultipleObjects_SingleObject* >(object);
  (void)_this;
}
void CMsgSOMultipleObjects_SingleObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOMultipleObjects.SingleObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    object_data_.ClearNonDefaultToEmpty();
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOMultipleObjects_SingleObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes object_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_object_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOMultipleObjects_SingleObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects.SingleObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type_id(), target);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_object_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects.SingleObject)
  return target;
}

size_t CMsgSOMultipleObjects_SingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOMultipleObjects.SingleObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes object_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_object_data());
    }

    // optional int32 type_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOMultipleObjects_SingleObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOMultipleObjects_SingleObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOMultipleObjects_SingleObject::GetClassData() const { return &_class_data_; }

void CMsgSOMultipleObjects_SingleObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOMultipleObjects_SingleObject *>(to)->MergeFrom(
      static_cast<const CMsgSOMultipleObjects_SingleObject &>(from));
}


void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object_data(from._internal_object_data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects_SingleObject::InternalSwap(CMsgSOMultipleObjects_SingleObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &object_data_, lhs_arena,
      &other->object_data_, rhs_arena
  );
  swap(type_id_, other->type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[20]);
}

// ===================================================================

class CMsgSOMultipleObjects::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOMultipleObjects>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOMultipleObjects* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOMultipleObjects::_Internal::owner_soid(const CMsgSOMultipleObjects* msg) {
  return *msg->owner_soid_;
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objects_modified_(arena),
  objects_added_(arena),
  objects_removed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOMultipleObjects)
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_modified_(from.objects_modified_),
      objects_added_(from.objects_added_),
      objects_removed_(from.objects_removed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects)
}

inline void CMsgSOMultipleObjects::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOMultipleObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOMultipleObjects::ArenaDtor(void* object) {
  CMsgSOMultipleObjects* _this = reinterpret_cast< CMsgSOMultipleObjects* >(object);
  (void)_this;
}
void CMsgSOMultipleObjects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOMultipleObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOMultipleObjects)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_modified_.Clear();
  objects_added_.Clear();
  objects_removed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOMultipleObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects_modified(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects_added(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 service_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOMultipleObjects::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_modified_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects_modified(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_version(), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_added_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_objects_added(i), target, stream);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_removed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_objects_removed(i), target, stream);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects)
  return target;
}

size_t CMsgSOMultipleObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOMultipleObjects)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  total_size += 1UL * this->_internal_objects_modified_size();
  for (const auto& msg : this->objects_modified_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  total_size += 1UL * this->_internal_objects_added_size();
  for (const auto& msg : this->objects_added_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  total_size += 1UL * this->_internal_objects_removed_size();
  for (const auto& msg : this->objects_removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgSOIDOwner owner_soid = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_service_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOMultipleObjects::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOMultipleObjects::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOMultipleObjects::GetClassData() const { return &_class_data_; }

void CMsgSOMultipleObjects::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOMultipleObjects *>(to)->MergeFrom(
      static_cast<const CMsgSOMultipleObjects &>(from));
}


void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objects_modified_.MergeFrom(from.objects_modified_);
  objects_added_.MergeFrom(from.objects_added_);
  objects_removed_.MergeFrom(from.objects_removed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects::InternalSwap(CMsgSOMultipleObjects* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_modified_.InternalSwap(&other->objects_modified_);
  objects_added_.InternalSwap(&other->objects_added_);
  objects_removed_.InternalSwap(&other->objects_removed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOMultipleObjects, service_id_)
      + sizeof(CMsgSOMultipleObjects::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOMultipleObjects, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[21]);
}

// ===================================================================

class CMsgSOCacheSubscribed_SubscribedType::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscribed_SubscribedType>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  object_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscribed.SubscribedType)
}
CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      object_data_(from.object_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed.SubscribedType)
}

inline void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
type_id_ = 0;
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed.SubscribedType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSOCacheSubscribed_SubscribedType::ArenaDtor(void* object) {
  CMsgSOCacheSubscribed_SubscribedType* _this = reinterpret_cast< CMsgSOCacheSubscribed_SubscribedType* >(object);
  (void)_this;
}
void CMsgSOCacheSubscribed_SubscribedType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribed.SubscribedType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_data_.Clear();
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscribed_SubscribedType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes object_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_object_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOCacheSubscribed_SubscribedType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed.SubscribedType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->_internal_object_data_size(); i < n; i++) {
    const auto& s = this->_internal_object_data(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed.SubscribedType)
  return target;
}

size_t CMsgSOCacheSubscribed_SubscribedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribed.SubscribedType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes object_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(object_data_.size());
  for (int i = 0, n = object_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      object_data_.Get(i));
  }

  // optional int32 type_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOCacheSubscribed_SubscribedType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOCacheSubscribed_SubscribedType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOCacheSubscribed_SubscribedType::GetClassData() const { return &_class_data_; }

void CMsgSOCacheSubscribed_SubscribedType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOCacheSubscribed_SubscribedType *>(to)->MergeFrom(
      static_cast<const CMsgSOCacheSubscribed_SubscribedType &>(from));
}


void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  object_data_.MergeFrom(from.object_data_);
  if (from._internal_has_type_id()) {
    _internal_set_type_id(from._internal_type_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.InternalSwap(&other->object_data_);
  swap(type_id_, other->type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[22]);
}

// ===================================================================

class CMsgSOCacheSubscribed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscribed>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscribed* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheSubscribed::_Internal::owner_soid(const CMsgSOCacheSubscribed* msg) {
  return *msg->owner_soid_;
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objects_(arena),
  service_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscribed)
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_(from.objects_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed)
}

inline void CMsgSOCacheSubscribed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOCacheSubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribed::ArenaDtor(void* object) {
  CMsgSOCacheSubscribed* _this = reinterpret_cast< CMsgSOCacheSubscribed* >(object);
  (void)_this;
}
void CMsgSOCacheSubscribed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscribed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 service_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 service_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sync_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_sync_version(&has_bits);
          sync_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOCacheSubscribed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_service_id(), target);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0, n = this->_internal_service_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_service_list(i), target);
  }

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_sync_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed)
  return target;
}

size_t CMsgSOCacheSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 service_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgSOIDOwner owner_soid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_service_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOCacheSubscribed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOCacheSubscribed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOCacheSubscribed::GetClassData() const { return &_class_data_; }

void CMsgSOCacheSubscribed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOCacheSubscribed *>(to)->MergeFrom(
      static_cast<const CMsgSOCacheSubscribed &>(from));
}


void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed::InternalSwap(CMsgSOCacheSubscribed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(&other->objects_);
  service_list_.InternalSwap(&other->service_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscribed, service_id_)
      + sizeof(CMsgSOCacheSubscribed::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscribed, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[23]);
}

// ===================================================================

class CDOTAClientMsg_TipAlert::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_TipAlert>()._has_bits_);
  static void set_has_tip_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_TipAlert)
}
CDOTAClientMsg_TipAlert::CDOTAClientMsg_TipAlert(const CDOTAClientMsg_TipAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tip_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tip_text()) {
    tip_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tip_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_TipAlert)
}

inline void CDOTAClientMsg_TipAlert::SharedCtor() {
tip_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tip_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAClientMsg_TipAlert::~CDOTAClientMsg_TipAlert() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_TipAlert)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_TipAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tip_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_TipAlert::ArenaDtor(void* object) {
  CDOTAClientMsg_TipAlert* _this = reinterpret_cast< CDOTAClientMsg_TipAlert* >(object);
  (void)_this;
}
void CDOTAClientMsg_TipAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_TipAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_TipAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_TipAlert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tip_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_TipAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tip_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tip_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAClientMsg_TipAlert.tip_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_TipAlert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_TipAlert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tip_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tip_text().data(), static_cast<int>(this->_internal_tip_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAClientMsg_TipAlert.tip_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tip_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_TipAlert)
  return target;
}

size_t CDOTAClientMsg_TipAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_TipAlert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string tip_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tip_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_TipAlert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_TipAlert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_TipAlert::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_TipAlert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_TipAlert *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_TipAlert &>(from));
}


void CDOTAClientMsg_TipAlert::MergeFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_TipAlert)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tip_text()) {
    _internal_set_tip_text(from._internal_tip_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_TipAlert::CopyFrom(const CDOTAClientMsg_TipAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_TipAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TipAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TipAlert::InternalSwap(CDOTAClientMsg_TipAlert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tip_text_, lhs_arena,
      &other->tip_text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_TipAlert::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[24]);
}

// ===================================================================

class CMsgClientToGCGetTrophyListResponse_Trophy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetTrophyListResponse_Trophy>()._has_bits_);
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trophy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCGetTrophyListResponse_Trophy::CMsgClientToGCGetTrophyListResponse_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetTrophyListResponse.Trophy)
}
CMsgClientToGCGetTrophyListResponse_Trophy::CMsgClientToGCGetTrophyListResponse_Trophy(const CMsgClientToGCGetTrophyListResponse_Trophy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trophy_id_, &from.trophy_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(last_updated_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetTrophyListResponse.Trophy)
}

inline void CMsgClientToGCGetTrophyListResponse_Trophy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trophy_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_updated_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(last_updated_));
}

CMsgClientToGCGetTrophyListResponse_Trophy::~CMsgClientToGCGetTrophyListResponse_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetTrophyListResponse.Trophy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCGetTrophyListResponse_Trophy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCGetTrophyListResponse_Trophy::ArenaDtor(void* object) {
  CMsgClientToGCGetTrophyListResponse_Trophy* _this = reinterpret_cast< CMsgClientToGCGetTrophyListResponse_Trophy* >(object);
  (void)_this;
}
void CMsgClientToGCGetTrophyListResponse_Trophy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetTrophyListResponse_Trophy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetTrophyListResponse_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetTrophyListResponse.Trophy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&trophy_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_updated_) -
        reinterpret_cast<char*>(&trophy_id_)) + sizeof(last_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetTrophyListResponse_Trophy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 trophy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_trophy_id(&has_bits);
          trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trophy_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_trophy_score(&has_bits);
          trophy_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_updated(&has_bits);
          last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetTrophyListResponse_Trophy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetTrophyListResponse.Trophy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trophy_score(), target);
  }

  // optional uint32 last_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetTrophyListResponse.Trophy)
  return target;
}

size_t CMsgClientToGCGetTrophyListResponse_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetTrophyListResponse.Trophy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 trophy_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_trophy_score());
    }

    // optional uint32 last_updated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_updated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetTrophyListResponse_Trophy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCGetTrophyListResponse_Trophy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetTrophyListResponse_Trophy::GetClassData() const { return &_class_data_; }

void CMsgClientToGCGetTrophyListResponse_Trophy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCGetTrophyListResponse_Trophy *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCGetTrophyListResponse_Trophy &>(from));
}


void CMsgClientToGCGetTrophyListResponse_Trophy::MergeFrom(const CMsgClientToGCGetTrophyListResponse_Trophy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetTrophyListResponse.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      trophy_score_ = from.trophy_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_updated_ = from.last_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetTrophyListResponse_Trophy::CopyFrom(const CMsgClientToGCGetTrophyListResponse_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetTrophyListResponse.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetTrophyListResponse_Trophy::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetTrophyListResponse_Trophy::InternalSwap(CMsgClientToGCGetTrophyListResponse_Trophy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetTrophyListResponse_Trophy, last_updated_)
      + sizeof(CMsgClientToGCGetTrophyListResponse_Trophy::last_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetTrophyListResponse_Trophy, trophy_id_)>(
          reinterpret_cast<char*>(&trophy_id_),
          reinterpret_cast<char*>(&other->trophy_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetTrophyListResponse_Trophy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[25]);
}

// ===================================================================

class CMsgClientToGCGetTrophyListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetTrophyListResponse>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_profile_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCGetTrophyListResponse::CMsgClientToGCGetTrophyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trophies_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetTrophyListResponse)
}
CMsgClientToGCGetTrophyListResponse::CMsgClientToGCGetTrophyListResponse(const CMsgClientToGCGetTrophyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trophies_(from.trophies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_profile_name()) {
    profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_profile_name(), 
      GetArenaForAllocation());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetTrophyListResponse)
}

inline void CMsgClientToGCGetTrophyListResponse::SharedCtor() {
profile_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_id_ = 0u;
}

CMsgClientToGCGetTrophyListResponse::~CMsgClientToGCGetTrophyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetTrophyListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCGetTrophyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  profile_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCGetTrophyListResponse::ArenaDtor(void* object) {
  CMsgClientToGCGetTrophyListResponse* _this = reinterpret_cast< CMsgClientToGCGetTrophyListResponse* >(object);
  (void)_this;
}
void CMsgClientToGCGetTrophyListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetTrophyListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetTrophyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetTrophyListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trophies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    profile_name_.ClearNonDefaultToEmpty();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetTrophyListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCGetTrophyListResponse.Trophy trophies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trophies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string profile_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_profile_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCGetTrophyListResponse.profile_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCGetTrophyListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetTrophyListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgClientToGCGetTrophyListResponse.Trophy trophies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trophies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trophies(i), target, stream);
  }

  // optional string profile_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_profile_name().data(), static_cast<int>(this->_internal_profile_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCGetTrophyListResponse.profile_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_profile_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetTrophyListResponse)
  return target;
}

size_t CMsgClientToGCGetTrophyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetTrophyListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCGetTrophyListResponse.Trophy trophies = 2;
  total_size += 1UL * this->_internal_trophies_size();
  for (const auto& msg : this->trophies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string profile_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_profile_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCGetTrophyListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCGetTrophyListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCGetTrophyListResponse::GetClassData() const { return &_class_data_; }

void CMsgClientToGCGetTrophyListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCGetTrophyListResponse *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCGetTrophyListResponse &>(from));
}


void CMsgClientToGCGetTrophyListResponse::MergeFrom(const CMsgClientToGCGetTrophyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetTrophyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  trophies_.MergeFrom(from.trophies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_profile_name(from._internal_profile_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCGetTrophyListResponse::CopyFrom(const CMsgClientToGCGetTrophyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetTrophyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetTrophyListResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetTrophyListResponse::InternalSwap(CMsgClientToGCGetTrophyListResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trophies_.InternalSwap(&other->trophies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &profile_name_, lhs_arena,
      &other->profile_name_, rhs_arena
  );
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetTrophyListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[26]);
}

// ===================================================================

class CCLCMsg_SplitPlayerConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_SplitPlayerConnect>()._has_bits_);
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_SplitPlayerConnect)
}
CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_playername()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_SplitPlayerConnect)
}

inline void CCLCMsg_SplitPlayerConnect::SharedCtor() {
playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCLCMsg_SplitPlayerConnect::~CCLCMsg_SplitPlayerConnect() {
  // @@protoc_insertion_point(destructor:CCLCMsg_SplitPlayerConnect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCLCMsg_SplitPlayerConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_SplitPlayerConnect::ArenaDtor(void* object) {
  CCLCMsg_SplitPlayerConnect* _this = reinterpret_cast< CCLCMsg_SplitPlayerConnect* >(object);
  (void)_this;
}
void CCLCMsg_SplitPlayerConnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_SplitPlayerConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_SplitPlayerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_SplitPlayerConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    playername_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_SplitPlayerConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string playername = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCLCMsg_SplitPlayerConnect.playername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCLCMsg_SplitPlayerConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_SplitPlayerConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCLCMsg_SplitPlayerConnect.playername");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_SplitPlayerConnect)
  return target;
}

size_t CCLCMsg_SplitPlayerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_SplitPlayerConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string playername = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCLCMsg_SplitPlayerConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCLCMsg_SplitPlayerConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCLCMsg_SplitPlayerConnect::GetClassData() const { return &_class_data_; }

void CCLCMsg_SplitPlayerConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCLCMsg_SplitPlayerConnect *>(to)->MergeFrom(
      static_cast<const CCLCMsg_SplitPlayerConnect &>(from));
}


void CCLCMsg_SplitPlayerConnect::MergeFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playername()) {
    _internal_set_playername(from._internal_playername());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_SplitPlayerConnect::IsInitialized() const {
  return true;
}

void CCLCMsg_SplitPlayerConnect::InternalSwap(CCLCMsg_SplitPlayerConnect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playername_, lhs_arena,
      &other->playername_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_SplitPlayerConnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[27]);
}

// ===================================================================

class CDOTAClientMsg_EventCNY2015Cmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EventCNY2015Cmd>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}
CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventCNY2015Cmd)
}

inline void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventCNY2015Cmd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_EventCNY2015Cmd::ArenaDtor(void* object) {
  CDOTAClientMsg_EventCNY2015Cmd* _this = reinterpret_cast< CDOTAClientMsg_EventCNY2015Cmd* >(object);
  (void)_this;
}
void CDOTAClientMsg_EventCNY2015Cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EventCNY2015Cmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EventCNY2015Cmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_EventCNY2015Cmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventCNY2015Cmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

size_t CDOTAClientMsg_EventCNY2015Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EventCNY2015Cmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_EventCNY2015Cmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_EventCNY2015Cmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_EventCNY2015Cmd::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_EventCNY2015Cmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_EventCNY2015Cmd *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_EventCNY2015Cmd &>(from));
}


void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[28]);
}

// ===================================================================

class CDOTAClientMsg_RankWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_RankWager>()._has_bits_);
  static void set_has_announce_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_RankWager)
}
CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announce_wager_ = from.announce_wager_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_RankWager)
}

inline void CDOTAClientMsg_RankWager::SharedCtor() {
announce_wager_ = false;
}

CDOTAClientMsg_RankWager::~CDOTAClientMsg_RankWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_RankWager)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_RankWager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAClientMsg_RankWager::ArenaDtor(void* object) {
  CDOTAClientMsg_RankWager* _this = reinterpret_cast< CDOTAClientMsg_RankWager* >(object);
  (void)_this;
}
void CDOTAClientMsg_RankWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_RankWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_RankWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_RankWager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announce_wager_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_RankWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool announce_wager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_announce_wager(&has_bits);
          announce_wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_RankWager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_RankWager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_announce_wager(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_RankWager)
  return target;
}

size_t CDOTAClientMsg_RankWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_RankWager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool announce_wager = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_RankWager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_RankWager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_RankWager::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_RankWager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_RankWager *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_RankWager &>(from));
}


void CDOTAClientMsg_RankWager::MergeFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_announce_wager()) {
    _internal_set_announce_wager(from._internal_announce_wager());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_RankWager::CopyFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RankWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RankWager::InternalSwap(CDOTAClientMsg_RankWager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(announce_wager_, other->announce_wager_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_RankWager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[29]);
}

// ===================================================================

class CDOTAClientMsg_EventPointsTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_EventPointsTip>()._has_bits_);
  static void set_has_recipient_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_EventPointsTip)
}
CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipient_player_id_ = from.recipient_player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_EventPointsTip)
}

inline void CDOTAClientMsg_EventPointsTip::SharedCtor() {
recipient_player_id_ = 0u;
}

CDOTAClientMsg_EventPointsTip::~CDOTAClientMsg_EventPointsTip() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_EventPointsTip)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_EventPointsTip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAClientMsg_EventPointsTip::ArenaDtor(void* object) {
  CDOTAClientMsg_EventPointsTip* _this = reinterpret_cast< CDOTAClientMsg_EventPointsTip* >(object);
  (void)_this;
}
void CDOTAClientMsg_EventPointsTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_EventPointsTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_EventPointsTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_EventPointsTip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipient_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_EventPointsTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 recipient_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_recipient_player_id(&has_bits);
          recipient_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_EventPointsTip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_EventPointsTip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recipient_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_EventPointsTip)
  return target;
}

size_t CDOTAClientMsg_EventPointsTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_EventPointsTip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 recipient_player_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_recipient_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_EventPointsTip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_EventPointsTip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_EventPointsTip::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_EventPointsTip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_EventPointsTip *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_EventPointsTip &>(from));
}


void CDOTAClientMsg_EventPointsTip::MergeFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_recipient_player_id()) {
    _internal_set_recipient_player_id(from._internal_recipient_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventPointsTip::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventPointsTip::InternalSwap(CDOTAClientMsg_EventPointsTip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recipient_player_id_, other->recipient_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_EventPointsTip::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[30]);
}

// ===================================================================

class CDOTAClientMsg_CoinWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_CoinWager>()._has_bits_);
  static void set_has_wager_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_CoinWager)
}
CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wager_amount_ = from.wager_amount_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_CoinWager)
}

inline void CDOTAClientMsg_CoinWager::SharedCtor() {
wager_amount_ = 0u;
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_CoinWager)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_CoinWager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAClientMsg_CoinWager::ArenaDtor(void* object) {
  CDOTAClientMsg_CoinWager* _this = reinterpret_cast< CDOTAClientMsg_CoinWager* >(object);
  (void)_this;
}
void CDOTAClientMsg_CoinWager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_CoinWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_CoinWager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wager_amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_CoinWager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 wager_amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_wager_amount(&has_bits);
          wager_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_CoinWager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_CoinWager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wager_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_CoinWager)
  return target;
}

size_t CDOTAClientMsg_CoinWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_CoinWager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 wager_amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_wager_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_CoinWager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_CoinWager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_CoinWager::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_CoinWager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_CoinWager *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_CoinWager &>(from));
}


void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wager_amount()) {
    _internal_set_wager_amount(from._internal_wager_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWager::InternalSwap(CDOTAClientMsg_CoinWager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wager_amount_, other->wager_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[31]);
}

// ===================================================================

class CMsgSOCacheHaveVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheHaveVersion>()._has_bits_);
  static const ::CMsgSOIDOwner& soid(const CMsgSOCacheHaveVersion* msg);
  static void set_has_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cached_file_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheHaveVersion::_Internal::soid(const CMsgSOCacheHaveVersion* msg) {
  return *msg->soid_;
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheHaveVersion)
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_soid()) {
    soid_ = new ::CMsgSOIDOwner(*from.soid_);
  } else {
    soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&version_)) + sizeof(cached_file_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheHaveVersion)
}

inline void CMsgSOCacheHaveVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&soid_)) + sizeof(cached_file_version_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheHaveVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSOCacheHaveVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete soid_;
}

void CMsgSOCacheHaveVersion::ArenaDtor(void* object) {
  CMsgSOCacheHaveVersion* _this = reinterpret_cast< CMsgSOCacheHaveVersion* >(object);
  (void)_this;
}
void CMsgSOCacheHaveVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheHaveVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheHaveVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(soid_ != nullptr);
    soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cached_file_version_) -
        reinterpret_cast<char*>(&version_)) + sizeof(cached_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheHaveVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgSOIDOwner soid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_soid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 service_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cached_file_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cached_file_version(&has_bits);
          cached_file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSOCacheHaveVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheHaveVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::soid(this), target, stream);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_version(), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_service_id(), target);
  }

  // optional uint32 cached_file_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cached_file_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheHaveVersion)
  return target;
}

size_t CMsgSOCacheHaveVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheHaveVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgSOIDOwner soid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soid_);
    }

    // optional fixed64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_service_id());
    }

    // optional uint32 cached_file_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cached_file_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSOCacheHaveVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSOCacheHaveVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSOCacheHaveVersion::GetClassData() const { return &_class_data_; }

void CMsgSOCacheHaveVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSOCacheHaveVersion *>(to)->MergeFrom(
      static_cast<const CMsgSOCacheHaveVersion &>(from));
}


void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cached_file_version_ = from.cached_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheHaveVersion::InternalSwap(CMsgSOCacheHaveVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOCacheHaveVersion, cached_file_version_)
      + sizeof(CMsgSOCacheHaveVersion::cached_file_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOCacheHaveVersion, soid_)>(
          reinterpret_cast<char*>(&soid_),
          reinterpret_cast<char*>(&other->soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[32]);
}

// ===================================================================

class CMsgGCToClientPlayerStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPlayerStatsResponse>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mean_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mean_xppm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mean_lasthits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_blood_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_first_blood_given(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_aegises_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cheeses_eaten(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_creeps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_versatility_score(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mean_networth(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mean_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_mean_heals(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

CMsgGCToClientPlayerStatsResponse::CMsgGCToClientPlayerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  player_stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPlayerStatsResponse)
}
CMsgGCToClientPlayerStatsResponse::CMsgGCToClientPlayerStatsResponse(const CMsgGCToClientPlayerStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_stats_(from.player_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rapiers_purchased_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rapiers_purchased_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPlayerStatsResponse)
}

inline void CMsgGCToClientPlayerStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rapiers_purchased_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rapiers_purchased_));
}

CMsgGCToClientPlayerStatsResponse::~CMsgGCToClientPlayerStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPlayerStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToClientPlayerStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientPlayerStatsResponse::ArenaDtor(void* object) {
  CMsgGCToClientPlayerStatsResponse* _this = reinterpret_cast< CMsgGCToClientPlayerStatsResponse* >(object);
  (void)_this;
}
void CMsgGCToClientPlayerStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPlayerStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPlayerStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPlayerStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_blood_claimed_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(first_blood_claimed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&first_blood_given_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&support_score_) -
        reinterpret_cast<char*>(&first_blood_given_)) + sizeof(support_score_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&push_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rapiers_purchased_) -
        reinterpret_cast<char*>(&push_score_)) + sizeof(rapiers_purchased_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPlayerStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float player_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_stats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_player_stats(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_count(&has_bits);
          match_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_gpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_mean_gpm(&has_bits);
          mean_gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_xppm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_mean_xppm(&has_bits);
          mean_xppm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_lasthits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_mean_lasthits(&has_bits);
          mean_lasthits_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rampages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rampages(&has_bits);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_triple_kills(&has_bits);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_blood_claimed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_first_blood_claimed(&has_bits);
          first_blood_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_blood_given = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_first_blood_given(&has_bits);
          first_blood_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_couriers_killed(&has_bits);
          couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 aegises_snatched = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_aegises_snatched(&has_bits);
          aegises_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheeses_eaten = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_cheeses_eaten(&has_bits);
          cheeses_eaten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creeps_stacked = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_creeps_stacked(&has_bits);
          creeps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fight_score = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_fight_score(&has_bits);
          fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float farm_score = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_farm_score(&has_bits);
          farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float support_score = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_support_score(&has_bits);
          support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float push_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_push_score(&has_bits);
          push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float versatility_score = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_versatility_score(&has_bits);
          versatility_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_networth = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_mean_networth(&has_bits);
          mean_networth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_damage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_mean_damage(&has_bits);
          mean_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float mean_heals = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_mean_heals(&has_bits);
          mean_heals_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_rapiers_purchased(&has_bits);
          rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientPlayerStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPlayerStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated float player_stats = 2;
  for (int i = 0, n = this->_internal_player_stats_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_player_stats(i), target);
  }

  // optional uint32 match_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_match_count(), target);
  }

  // optional float mean_gpm = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_mean_gpm(), target);
  }

  // optional float mean_xppm = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_mean_xppm(), target);
  }

  // optional float mean_lasthits = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_mean_lasthits(), target);
  }

  // optional uint32 rampages = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_triple_kills(), target);
  }

  // optional uint32 first_blood_claimed = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_first_blood_claimed(), target);
  }

  // optional uint32 first_blood_given = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_first_blood_given(), target);
  }

  // optional uint32 couriers_killed = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_couriers_killed(), target);
  }

  // optional uint32 aegises_snatched = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_aegises_snatched(), target);
  }

  // optional uint32 cheeses_eaten = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cheeses_eaten(), target);
  }

  // optional uint32 creeps_stacked = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_creeps_stacked(), target);
  }

  // optional float fight_score = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_farm_score(), target);
  }

  // optional float support_score = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_support_score(), target);
  }

  // optional float push_score = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_push_score(), target);
  }

  // optional float versatility_score = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_versatility_score(), target);
  }

  // optional float mean_networth = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_mean_networth(), target);
  }

  // optional float mean_damage = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_mean_damage(), target);
  }

  // optional float mean_heals = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_mean_heals(), target);
  }

  // optional uint32 rapiers_purchased = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_rapiers_purchased(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPlayerStatsResponse)
  return target;
}

size_t CMsgGCToClientPlayerStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPlayerStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float player_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_player_stats_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_stats_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 match_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_match_count());
    }

    // optional float mean_gpm = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float mean_xppm = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float mean_lasthits = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 rampages = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rampages());
    }

    // optional uint32 triple_kills = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_triple_kills());
    }

    // optional uint32 first_blood_claimed = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_blood_claimed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 first_blood_given = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_first_blood_given());
    }

    // optional uint32 couriers_killed = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_couriers_killed());
    }

    // optional uint32 aegises_snatched = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_aegises_snatched());
    }

    // optional uint32 cheeses_eaten = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cheeses_eaten());
    }

    // optional uint32 creeps_stacked = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_creeps_stacked());
    }

    // optional float fight_score = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float farm_score = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float support_score = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional float push_score = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float versatility_score = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float mean_networth = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float mean_damage = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float mean_heals = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional uint32 rapiers_purchased = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientPlayerStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToClientPlayerStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientPlayerStatsResponse::GetClassData() const { return &_class_data_; }

void CMsgGCToClientPlayerStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToClientPlayerStatsResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCToClientPlayerStatsResponse &>(from));
}


void CMsgGCToClientPlayerStatsResponse::MergeFrom(const CMsgGCToClientPlayerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPlayerStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  player_stats_.MergeFrom(from.player_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_count_ = from.match_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      mean_gpm_ = from.mean_gpm_;
    }
    if (cached_has_bits & 0x00000008u) {
      mean_xppm_ = from.mean_xppm_;
    }
    if (cached_has_bits & 0x00000010u) {
      mean_lasthits_ = from.mean_lasthits_;
    }
    if (cached_has_bits & 0x00000020u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00000040u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_blood_claimed_ = from.first_blood_claimed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      first_blood_given_ = from.first_blood_given_;
    }
    if (cached_has_bits & 0x00000200u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x00000400u) {
      aegises_snatched_ = from.aegises_snatched_;
    }
    if (cached_has_bits & 0x00000800u) {
      cheeses_eaten_ = from.cheeses_eaten_;
    }
    if (cached_has_bits & 0x00001000u) {
      creeps_stacked_ = from.creeps_stacked_;
    }
    if (cached_has_bits & 0x00002000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      support_score_ = from.support_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      push_score_ = from.push_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      versatility_score_ = from.versatility_score_;
    }
    if (cached_has_bits & 0x00040000u) {
      mean_networth_ = from.mean_networth_;
    }
    if (cached_has_bits & 0x00080000u) {
      mean_damage_ = from.mean_damage_;
    }
    if (cached_has_bits & 0x00100000u) {
      mean_heals_ = from.mean_heals_;
    }
    if (cached_has_bits & 0x00200000u) {
      rapiers_purchased_ = from.rapiers_purchased_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientPlayerStatsResponse::CopyFrom(const CMsgGCToClientPlayerStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPlayerStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPlayerStatsResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPlayerStatsResponse::InternalSwap(CMsgGCToClientPlayerStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_stats_.InternalSwap(&other->player_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPlayerStatsResponse, rapiers_purchased_)
      + sizeof(CMsgGCToClientPlayerStatsResponse::rapiers_purchased_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPlayerStatsResponse, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPlayerStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[33]);
}

// ===================================================================

class CMsgAdjustItemEquippedState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdjustItemEquippedState>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAdjustItemEquippedState)
}
CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgAdjustItemEquippedState)
}

inline void CMsgAdjustItemEquippedState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
}

CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState() {
  // @@protoc_insertion_point(destructor:CMsgAdjustItemEquippedState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAdjustItemEquippedState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAdjustItemEquippedState::ArenaDtor(void* object) {
  CMsgAdjustItemEquippedState* _this = reinterpret_cast< CMsgAdjustItemEquippedState* >(object);
  (void)_this;
}
void CMsgAdjustItemEquippedState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAdjustItemEquippedState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAdjustItemEquippedState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdjustItemEquippedState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdjustItemEquippedState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAdjustItemEquippedState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdjustItemEquippedState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 new_class = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_slot(), target);
  }

  // optional uint32 style_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdjustItemEquippedState)
  return target;
}

size_t CMsgAdjustItemEquippedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdjustItemEquippedState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 new_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_class());
    }

    // optional uint32 new_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_slot());
    }

    // optional uint32 style_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_style_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAdjustItemEquippedState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAdjustItemEquippedState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAdjustItemEquippedState::GetClassData() const { return &_class_data_; }

void CMsgAdjustItemEquippedState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAdjustItemEquippedState *>(to)->MergeFrom(
      static_cast<const CMsgAdjustItemEquippedState &>(from));
}


void CMsgAdjustItemEquippedState::MergeFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdjustItemEquippedState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_slot_ = from.new_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      style_index_ = from.style_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAdjustItemEquippedState::CopyFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdjustItemEquippedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdjustItemEquippedState::IsInitialized() const {
  return true;
}

void CMsgAdjustItemEquippedState::InternalSwap(CMsgAdjustItemEquippedState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, style_index_)
      + sizeof(CMsgAdjustItemEquippedState::style_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdjustItemEquippedState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[34]);
}

// ===================================================================

class CMsgClientToGCEquipItems::_Internal {
 public:
};

CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  equips_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCEquipItems)
}
CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(const CMsgClientToGCEquipItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCEquipItems)
}

inline void CMsgClientToGCEquipItems::SharedCtor() {
}

CMsgClientToGCEquipItems::~CMsgClientToGCEquipItems() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCEquipItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientToGCEquipItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCEquipItems::ArenaDtor(void* object) {
  CMsgClientToGCEquipItems* _this = reinterpret_cast< CMsgClientToGCEquipItems* >(object);
  (void)_this;
}
void CMsgClientToGCEquipItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCEquipItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCEquipItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCEquipItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCEquipItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgAdjustItemEquippedState equips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCEquipItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCEquipItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgAdjustItemEquippedState equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_equips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCEquipItems)
  return target;
}

size_t CMsgClientToGCEquipItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCEquipItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAdjustItemEquippedState equips = 1;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCEquipItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientToGCEquipItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCEquipItems::GetClassData() const { return &_class_data_; }

void CMsgClientToGCEquipItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientToGCEquipItems *>(to)->MergeFrom(
      static_cast<const CMsgClientToGCEquipItems &>(from));
}


void CMsgClientToGCEquipItems::MergeFrom(const CMsgClientToGCEquipItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCEquipItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCEquipItems::CopyFrom(const CMsgClientToGCEquipItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCEquipItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCEquipItems::IsInitialized() const {
  return true;
}

void CMsgClientToGCEquipItems::InternalSwap(CMsgClientToGCEquipItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  equips_.InternalSwap(&other->equips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCEquipItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[35]);
}

// ===================================================================

class CMsgClientHello::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientHello>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_session_need(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_secret_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_language(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steamdatagram_login(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_game_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_render_system(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_render_system_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_screen_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_screen_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_screen_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_render_width(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_render_height(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_swap_width(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_swap_height(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_platform_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientHello::CMsgClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  socache_have_versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgClientHello)
}
CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      socache_have_versions_(from.socache_have_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_secret_key()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  steamdatagram_login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    steamdatagram_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steamdatagram_login()) {
    steamdatagram_login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamdatagram_login(), 
      GetArenaForAllocation());
  }
  game_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_msg()) {
    game_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_msg(), 
      GetArenaForAllocation());
  }
  platform_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_platform_name()) {
    platform_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_steam_china_) -
    reinterpret_cast<char*>(&version_)) + sizeof(is_steam_china_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientHello)
}

inline void CMsgClientHello::SharedCtor() {
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamdatagram_login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  steamdatagram_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_steam_china_) -
    reinterpret_cast<char*>(&version_)) + sizeof(is_steam_china_));
}

CMsgClientHello::~CMsgClientHello() {
  // @@protoc_insertion_point(destructor:CMsgClientHello)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgClientHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamdatagram_login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientHello::ArenaDtor(void* object) {
  CMsgClientHello* _this = reinterpret_cast< CMsgClientHello* >(object);
  (void)_this;
}
void CMsgClientHello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socache_have_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      secret_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      steamdatagram_login_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      game_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      platform_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_language_) -
        reinterpret_cast<char*>(&version_)) + sizeof(client_language_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&engine_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_refresh_) -
        reinterpret_cast<char*>(&engine_)) + sizeof(screen_refresh_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&render_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_steam_china_) -
        reinterpret_cast<char*>(&render_width_)) + sizeof(is_steam_china_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientHello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socache_have_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_session_need = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_session_need(&has_bits);
          client_session_need_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PartnerAccountType_IsValid(val))) {
            _internal_set_client_launcher(static_cast<::PartnerAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string secret_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientHello.secret_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_client_language(&has_bits);
          client_language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESourceEngine_IsValid(val))) {
            _internal_set_engine(static_cast<::ESourceEngine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes steamdatagram_login = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_steamdatagram_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platform_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_platform_id(&has_bits);
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes game_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_game_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 os_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_os_type(&has_bits);
          os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 render_system = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_render_system(&has_bits);
          render_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 render_system_req = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_render_system_req(&has_bits);
          render_system_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 screen_width = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_screen_width(&has_bits);
          screen_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 screen_height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_screen_height(&has_bits);
          screen_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 screen_refresh = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_screen_refresh(&has_bits);
          screen_refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 render_width = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_render_width(&has_bits);
          render_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 render_height = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_render_height(&has_bits);
          render_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 swap_width = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_swap_width(&has_bits);
          swap_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 swap_height = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_swap_height(&has_bits);
          swap_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steam_china = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_is_steam_china(&has_bits);
          is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string platform_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_platform_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientHello.platform_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_socache_have_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_socache_have_versions(i), target, stream);
  }

  // optional uint32 client_session_need = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_session_need(), target);
  }

  // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_launcher(), target);
  }

  // optional string secret_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientHello.secret_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secret_key(), target);
  }

  // optional uint32 client_language = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_client_language(), target);
  }

  // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_engine(), target);
  }

  // optional bytes steamdatagram_login = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_steamdatagram_login(), target);
  }

  // optional uint32 platform_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_platform_id(), target);
  }

  // optional bytes game_msg = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_game_msg(), target);
  }

  // optional int32 os_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_os_type(), target);
  }

  // optional uint32 render_system = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_render_system(), target);
  }

  // optional uint32 render_system_req = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_render_system_req(), target);
  }

  // optional uint32 screen_width = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_screen_width(), target);
  }

  // optional uint32 screen_height = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_screen_height(), target);
  }

  // optional uint32 screen_refresh = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_screen_refresh(), target);
  }

  // optional uint32 render_width = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_render_width(), target);
  }

  // optional uint32 render_height = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_render_height(), target);
  }

  // optional uint32 swap_width = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_swap_width(), target);
  }

  // optional uint32 swap_height = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_swap_height(), target);
  }

  // optional bool is_steam_china = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_steam_china(), target);
  }

  // optional string platform_name = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform_name().data(), static_cast<int>(this->_internal_platform_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientHello.platform_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_platform_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientHello)
  return target;
}

size_t CMsgClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  total_size += 1UL * this->_internal_socache_have_versions_size();
  for (const auto& msg : this->socache_have_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string secret_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_secret_key());
    }

    // optional bytes steamdatagram_login = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_steamdatagram_login());
    }

    // optional bytes game_msg = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_msg());
    }

    // optional string platform_name = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform_name());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 client_session_need = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_session_need());
    }

    // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_launcher());
    }

    // optional uint32 client_language = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_language());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional uint32 platform_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platform_id());
    }

    // optional int32 os_type = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_os_type());
    }

    // optional uint32 render_system = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_render_system());
    }

    // optional uint32 render_system_req = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_render_system_req());
    }

    // optional uint32 screen_width = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_screen_width());
    }

    // optional uint32 screen_height = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_screen_height());
    }

    // optional uint32 screen_refresh = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screen_refresh());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 render_width = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_render_width());
    }

    // optional uint32 render_height = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_render_height());
    }

    // optional uint32 swap_width = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swap_width());
    }

    // optional uint32 swap_height = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swap_height());
    }

    // optional bool is_steam_china = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientHello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgClientHello::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientHello::GetClassData() const { return &_class_data_; }

void CMsgClientHello::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgClientHello *>(to)->MergeFrom(
      static_cast<const CMsgClientHello &>(from));
}


void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_secret_key(from._internal_secret_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_steamdatagram_login(from._internal_steamdatagram_login());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_game_msg(from._internal_game_msg());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_platform_name(from._internal_platform_name());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_launcher_ = from.client_launcher_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_language_ = from.client_language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000200u) {
      platform_id_ = from.platform_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      render_system_ = from.render_system_;
    }
    if (cached_has_bits & 0x00001000u) {
      render_system_req_ = from.render_system_req_;
    }
    if (cached_has_bits & 0x00002000u) {
      screen_width_ = from.screen_width_;
    }
    if (cached_has_bits & 0x00004000u) {
      screen_height_ = from.screen_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      screen_refresh_ = from.screen_refresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      render_width_ = from.render_width_;
    }
    if (cached_has_bits & 0x00020000u) {
      render_height_ = from.render_height_;
    }
    if (cached_has_bits & 0x00040000u) {
      swap_width_ = from.swap_width_;
    }
    if (cached_has_bits & 0x00080000u) {
      swap_height_ = from.swap_height_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_steam_china_ = from.is_steam_china_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {
  return true;
}

void CMsgClientHello::InternalSwap(CMsgClientHello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  socache_have_versions_.InternalSwap(&other->socache_have_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, lhs_arena,
      &other->secret_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &steamdatagram_login_, lhs_arena,
      &other->steamdatagram_login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_msg_, lhs_arena,
      &other->game_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &platform_name_, lhs_arena,
      &other->platform_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientHello, is_steam_china_)
      + sizeof(CMsgClientHello::is_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientHello, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientHello::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[36]);
}

// ===================================================================

class CMsg_CVars_CVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsg_CVars_CVar>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsg_CVars_CVar::CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars.CVar)
}
CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

inline void CMsg_CVars_CVar::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsg_CVars_CVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsg_CVars_CVar::ArenaDtor(void* object) {
  CMsg_CVars_CVar* _this = reinterpret_cast< CMsg_CVars_CVar* >(object);
  (void)_this;
}
void CMsg_CVars_CVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsg_CVars_CVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsg_CVars_CVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars.CVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars_CVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsg_CVars.CVar.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsg_CVars.CVar.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsg_CVars_CVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

size_t CMsg_CVars_CVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars.CVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsg_CVars_CVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsg_CVars_CVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsg_CVars_CVar::GetClassData() const { return &_class_data_; }

void CMsg_CVars_CVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsg_CVars_CVar *>(to)->MergeFrom(
      static_cast<const CMsg_CVars_CVar &>(from));
}


void CMsg_CVars_CVar::MergeFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {
  return true;
}

void CMsg_CVars_CVar::InternalSwap(CMsg_CVars_CVar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars_CVar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[37]);
}

// ===================================================================

class CMsg_CVars::_Internal {
 public:
};

CMsg_CVars::CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cvars_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars)
}
CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cvars_(from.cvars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

inline void CMsg_CVars::SharedCtor() {
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsg_CVars::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsg_CVars::ArenaDtor(void* object) {
  CMsg_CVars* _this = reinterpret_cast< CMsg_CVars* >(object);
  (void)_this;
}
void CMsg_CVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsg_CVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsg_CVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cvars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsg_CVars::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cvars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cvars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

size_t CMsg_CVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  total_size += 1UL * this->_internal_cvars_size();
  for (const auto& msg : this->cvars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsg_CVars::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsg_CVars::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsg_CVars::GetClassData() const { return &_class_data_; }

void CMsg_CVars::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsg_CVars *>(to)->MergeFrom(
      static_cast<const CMsg_CVars &>(from));
}


void CMsg_CVars::MergeFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cvars_.MergeFrom(from.cvars_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {
  return true;
}

void CMsg_CVars::InternalSwap(CMsg_CVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cvars_.InternalSwap(&other->cvars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[38]);
}

// ===================================================================

class CNETMsg_SetConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SetConVar>()._has_bits_);
  static const ::CMsg_CVars& convars(const CNETMsg_SetConVar* msg);
  static void set_has_convars(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsg_CVars&
CNETMsg_SetConVar::_Internal::convars(const CNETMsg_SetConVar* msg) {
  return *msg->convars_;
}
CNETMsg_SetConVar::CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SetConVar)
}
CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

inline void CNETMsg_SetConVar::SharedCtor() {
convars_ = nullptr;
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CNETMsg_SetConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete convars_;
}

void CNETMsg_SetConVar::ArenaDtor(void* object) {
  CNETMsg_SetConVar* _this = reinterpret_cast< CNETMsg_SetConVar* >(object);
  (void)_this;
}
void CNETMsg_SetConVar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_SetConVar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_SetConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SetConVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(convars_ != nullptr);
    convars_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SetConVar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsg_CVars convars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convars(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SetConVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::convars(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

size_t CNETMsg_SetConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SetConVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsg_CVars convars = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convars_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SetConVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CNETMsg_SetConVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SetConVar::GetClassData() const { return &_class_data_; }

void CNETMsg_SetConVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CNETMsg_SetConVar *>(to)->MergeFrom(
      static_cast<const CNETMsg_SetConVar &>(from));
}


void CNETMsg_SetConVar::MergeFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_convars()) {
    _internal_mutable_convars()->::CMsg_CVars::MergeFrom(from._internal_convars());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {
  return true;
}

void CNETMsg_SetConVar::InternalSwap(CNETMsg_SetConVar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(convars_, other->convars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SetConVar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[39]);
}

// ===================================================================

class CNETMsg_StringCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_StringCmd>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_StringCmd::CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CNETMsg_StringCmd)
}
CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

inline void CNETMsg_StringCmd::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CNETMsg_StringCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_StringCmd::ArenaDtor(void* object) {
  CNETMsg_StringCmd* _this = reinterpret_cast< CNETMsg_StringCmd* >(object);
  (void)_this;
}
void CNETMsg_StringCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNETMsg_StringCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNETMsg_StringCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_StringCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_StringCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNETMsg_StringCmd.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_StringCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

size_t CNETMsg_StringCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_StringCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_StringCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CNETMsg_StringCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_StringCmd::GetClassData() const { return &_class_data_; }

void CNETMsg_StringCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CNETMsg_StringCmd *>(to)->MergeFrom(
      static_cast<const CNETMsg_StringCmd &>(from));
}


void CNETMsg_StringCmd::MergeFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {
  return true;
}

void CNETMsg_StringCmd::InternalSwap(CNETMsg_StringCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, lhs_arena,
      &other->command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_StringCmd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[40]);
}

// ===================================================================

class CDOTAMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMsg_CoachHUDPing>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tgtpath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMsg_CoachHUDPing)
}
CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tgtpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tgtpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tgtpath()) {
    tgtpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tgtpath(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMsg_CoachHUDPing)
}

inline void CDOTAMsg_CoachHUDPing::SharedCtor() {
tgtpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tgtpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CDOTAMsg_CoachHUDPing::~CDOTAMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAMsg_CoachHUDPing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tgtpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMsg_CoachHUDPing::ArenaDtor(void* object) {
  CDOTAMsg_CoachHUDPing* _this = reinterpret_cast< CDOTAMsg_CoachHUDPing* >(object);
  (void)_this;
}
void CDOTAMsg_CoachHUDPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMsg_CoachHUDPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tgtpath_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMsg_CoachHUDPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tgtpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tgtpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMsg_CoachHUDPing.tgtpath");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMsg_CoachHUDPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional string tgtpath = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tgtpath().data(), static_cast<int>(this->_internal_tgtpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMsg_CoachHUDPing.tgtpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tgtpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMsg_CoachHUDPing)
  return target;
}

size_t CDOTAMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMsg_CoachHUDPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tgtpath = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tgtpath());
    }

    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMsg_CoachHUDPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMsg_CoachHUDPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMsg_CoachHUDPing::GetClassData() const { return &_class_data_; }

void CDOTAMsg_CoachHUDPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMsg_CoachHUDPing *>(to)->MergeFrom(
      static_cast<const CDOTAMsg_CoachHUDPing &>(from));
}


void CDOTAMsg_CoachHUDPing::MergeFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tgtpath(from._internal_tgtpath());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_CoachHUDPing::InternalSwap(CDOTAMsg_CoachHUDPing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tgtpath_, lhs_arena,
      &other->tgtpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, y_)
      + sizeof(CDOTAMsg_CoachHUDPing::y_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMsg_CoachHUDPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[41]);
}

// ===================================================================

class CDOTAUserMsg_CoachHUDPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAUserMsg_CoachHUDPing>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMsg_CoachHUDPing& hud_ping(const CDOTAUserMsg_CoachHUDPing* msg);
  static void set_has_hud_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMsg_CoachHUDPing&
CDOTAUserMsg_CoachHUDPing::_Internal::hud_ping(const CDOTAUserMsg_CoachHUDPing* msg) {
  return *msg->hud_ping_;
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAUserMsg_CoachHUDPing)
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hud_ping()) {
    hud_ping_ = new ::CDOTAMsg_CoachHUDPing(*from.hud_ping_);
  } else {
    hud_ping_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAUserMsg_CoachHUDPing)
}

inline void CDOTAUserMsg_CoachHUDPing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hud_ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&hud_ping_)) + sizeof(player_id_));
}

CDOTAUserMsg_CoachHUDPing::~CDOTAUserMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:CDOTAUserMsg_CoachHUDPing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAUserMsg_CoachHUDPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hud_ping_;
}

void CDOTAUserMsg_CoachHUDPing::ArenaDtor(void* object) {
  CDOTAUserMsg_CoachHUDPing* _this = reinterpret_cast< CDOTAUserMsg_CoachHUDPing* >(object);
  (void)_this;
}
void CDOTAUserMsg_CoachHUDPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAUserMsg_CoachHUDPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAUserMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAUserMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(hud_ping_ != nullptr);
    hud_ping_->Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAUserMsg_CoachHUDPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hud_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAUserMsg_CoachHUDPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAUserMsg_CoachHUDPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hud_ping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAUserMsg_CoachHUDPing)
  return target;
}

size_t CDOTAUserMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAUserMsg_CoachHUDPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hud_ping_);
    }

    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAUserMsg_CoachHUDPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAUserMsg_CoachHUDPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAUserMsg_CoachHUDPing::GetClassData() const { return &_class_data_; }

void CDOTAUserMsg_CoachHUDPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAUserMsg_CoachHUDPing *>(to)->MergeFrom(
      static_cast<const CDOTAUserMsg_CoachHUDPing &>(from));
}


void CDOTAUserMsg_CoachHUDPing::MergeFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hud_ping()->::CDOTAMsg_CoachHUDPing::MergeFrom(from._internal_hud_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CoachHUDPing::InternalSwap(CDOTAUserMsg_CoachHUDPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, player_id_)
      + sizeof(CDOTAUserMsg_CoachHUDPing::player_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, hud_ping_)>(
          reinterpret_cast<char*>(&hud_ping_),
          reinterpret_cast<char*>(&other->hud_ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAUserMsg_CoachHUDPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[42]);
}

// ===================================================================

class CDOTAClientMsg_GuideSelectOption::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GuideSelectOption>()._has_bits_);
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_force_recalculate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GuideSelectOption)
}
CDOTAClientMsg_GuideSelectOption::CDOTAClientMsg_GuideSelectOption(const CDOTAClientMsg_GuideSelectOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GuideSelectOption)
}

inline void CDOTAClientMsg_GuideSelectOption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&option_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_recalculate_) -
    reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
}

CDOTAClientMsg_GuideSelectOption::~CDOTAClientMsg_GuideSelectOption() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GuideSelectOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_GuideSelectOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAClientMsg_GuideSelectOption::ArenaDtor(void* object) {
  CDOTAClientMsg_GuideSelectOption* _this = reinterpret_cast< CDOTAClientMsg_GuideSelectOption* >(object);
  (void)_this;
}
void CDOTAClientMsg_GuideSelectOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GuideSelectOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GuideSelectOption::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GuideSelectOption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_recalculate_) -
        reinterpret_cast<char*>(&option_)) + sizeof(force_recalculate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GuideSelectOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_option(&has_bits);
          option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_recalculate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_force_recalculate(&has_bits);
          force_recalculate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_GuideSelectOption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GuideSelectOption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 option = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_option(), target);
  }

  // optional bool force_recalculate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force_recalculate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GuideSelectOption)
  return target;
}

size_t CDOTAClientMsg_GuideSelectOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GuideSelectOption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 option = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_option());
    }

    // optional bool force_recalculate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_GuideSelectOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_GuideSelectOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_GuideSelectOption::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_GuideSelectOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_GuideSelectOption *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_GuideSelectOption &>(from));
}


void CDOTAClientMsg_GuideSelectOption::MergeFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GuideSelectOption)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      option_ = from.option_;
    }
    if (cached_has_bits & 0x00000002u) {
      force_recalculate_ = from.force_recalculate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_GuideSelectOption::CopyFrom(const CDOTAClientMsg_GuideSelectOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GuideSelectOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelectOption::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelectOption::InternalSwap(CDOTAClientMsg_GuideSelectOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelectOption, force_recalculate_)
      + sizeof(CDOTAClientMsg_GuideSelectOption::force_recalculate_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelectOption, option_)>(
          reinterpret_cast<char*>(&option_),
          reinterpret_cast<char*>(&other->option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GuideSelectOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[43]);
}

// ===================================================================

class CDOTAClientMsg_GuideSelected::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_GuideSelected>()._has_bits_);
  static void set_has_guide_workshop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_plus_guide(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_GuideSelected)
}
CDOTAClientMsg_GuideSelected::CDOTAClientMsg_GuideSelected(const CDOTAClientMsg_GuideSelected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guide_workshop_id_, &from.guide_workshop_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_GuideSelected)
}

inline void CDOTAClientMsg_GuideSelected::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guide_workshop_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_plus_guide_) -
    reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
}

CDOTAClientMsg_GuideSelected::~CDOTAClientMsg_GuideSelected() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_GuideSelected)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_GuideSelected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAClientMsg_GuideSelected::ArenaDtor(void* object) {
  CDOTAClientMsg_GuideSelected* _this = reinterpret_cast< CDOTAClientMsg_GuideSelected* >(object);
  (void)_this;
}
void CDOTAClientMsg_GuideSelected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_GuideSelected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_GuideSelected::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_GuideSelected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guide_workshop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plus_guide_) -
        reinterpret_cast<char*>(&guide_workshop_id_)) + sizeof(is_plus_guide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_GuideSelected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 guide_workshop_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guide_workshop_id(&has_bits);
          guide_workshop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_plus_guide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_plus_guide(&has_bits);
          is_plus_guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_GuideSelected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_GuideSelected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guide_workshop_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guide_workshop_id(), target);
  }

  // optional bool is_plus_guide = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_plus_guide(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_GuideSelected)
  return target;
}

size_t CDOTAClientMsg_GuideSelected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_GuideSelected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 guide_workshop_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_guide_workshop_id());
    }

    // optional bool is_plus_guide = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_GuideSelected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_GuideSelected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_GuideSelected::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_GuideSelected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_GuideSelected *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_GuideSelected &>(from));
}


void CDOTAClientMsg_GuideSelected::MergeFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_GuideSelected)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guide_workshop_id_ = from.guide_workshop_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_plus_guide_ = from.is_plus_guide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_GuideSelected::CopyFrom(const CDOTAClientMsg_GuideSelected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_GuideSelected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GuideSelected::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GuideSelected::InternalSwap(CDOTAClientMsg_GuideSelected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelected, is_plus_guide_)
      + sizeof(CDOTAClientMsg_GuideSelected::is_plus_guide_)
      - PROTOBUF_FIELD_OFFSET(CDOTAClientMsg_GuideSelected, guide_workshop_id_)>(
          reinterpret_cast<char*>(&guide_workshop_id_),
          reinterpret_cast<char*>(&other->guide_workshop_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_GuideSelected::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[44]);
}

// ===================================================================

class CCLCMsg_CmdKeyValues::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_CmdKeyValues>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_CmdKeyValues)
}
CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_CmdKeyValues)
}

inline void CCLCMsg_CmdKeyValues::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCLCMsg_CmdKeyValues::~CCLCMsg_CmdKeyValues() {
  // @@protoc_insertion_point(destructor:CCLCMsg_CmdKeyValues)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCLCMsg_CmdKeyValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_CmdKeyValues::ArenaDtor(void* object) {
  CCLCMsg_CmdKeyValues* _this = reinterpret_cast< CCLCMsg_CmdKeyValues* >(object);
  (void)_this;
}
void CCLCMsg_CmdKeyValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_CmdKeyValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_CmdKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_CmdKeyValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_CmdKeyValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCLCMsg_CmdKeyValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_CmdKeyValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_CmdKeyValues)
  return target;
}

size_t CCLCMsg_CmdKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_CmdKeyValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCLCMsg_CmdKeyValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCLCMsg_CmdKeyValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCLCMsg_CmdKeyValues::GetClassData() const { return &_class_data_; }

void CCLCMsg_CmdKeyValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCLCMsg_CmdKeyValues *>(to)->MergeFrom(
      static_cast<const CCLCMsg_CmdKeyValues &>(from));
}


void CCLCMsg_CmdKeyValues::MergeFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCLCMsg_CmdKeyValues::CopyFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_CmdKeyValues::IsInitialized() const {
  return true;
}

void CCLCMsg_CmdKeyValues::InternalSwap(CCLCMsg_CmdKeyValues* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_CmdKeyValues::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[45]);
}

// ===================================================================

class CCLCMsg_FileCRCCheck::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_FileCRCCheck>()._has_bits_);
  static void set_has_code_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_FileCRCCheck)
}
CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&code_path_, &from.code_path_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&code_path_)) + sizeof(crc_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_FileCRCCheck)
}

inline void CCLCMsg_FileCRCCheck::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&code_path_)) + sizeof(crc_));
}

CCLCMsg_FileCRCCheck::~CCLCMsg_FileCRCCheck() {
  // @@protoc_insertion_point(destructor:CCLCMsg_FileCRCCheck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCLCMsg_FileCRCCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_FileCRCCheck::ArenaDtor(void* object) {
  CCLCMsg_FileCRCCheck* _this = reinterpret_cast< CCLCMsg_FileCRCCheck* >(object);
  (void)_this;
}
void CCLCMsg_FileCRCCheck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_FileCRCCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_FileCRCCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_FileCRCCheck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&code_path_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_) -
        reinterpret_cast<char*>(&code_path_)) + sizeof(crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_FileCRCCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 code_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_code_path(&has_bits);
          code_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCLCMsg_FileCRCCheck.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 code_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_code_filename(&has_bits);
          code_filename_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCLCMsg_FileCRCCheck.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 crc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCLCMsg_FileCRCCheck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_FileCRCCheck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code_path = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code_path(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // optional int32 code_filename = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code_filename(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_filename(), target);
  }

  // optional fixed32 crc = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_FileCRCCheck)
  return target;
}

size_t CCLCMsg_FileCRCCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_FileCRCCheck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string filename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional int32 code_path = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code_path());
    }

    // optional int32 code_filename = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code_filename());
    }

    // optional fixed32 crc = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCLCMsg_FileCRCCheck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCLCMsg_FileCRCCheck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCLCMsg_FileCRCCheck::GetClassData() const { return &_class_data_; }

void CCLCMsg_FileCRCCheck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCLCMsg_FileCRCCheck *>(to)->MergeFrom(
      static_cast<const CCLCMsg_FileCRCCheck &>(from));
}


void CCLCMsg_FileCRCCheck::MergeFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      code_path_ = from.code_path_;
    }
    if (cached_has_bits & 0x00000008u) {
      code_filename_ = from.code_filename_;
    }
    if (cached_has_bits & 0x00000010u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCLCMsg_FileCRCCheck::CopyFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_FileCRCCheck::IsInitialized() const {
  return true;
}

void CCLCMsg_FileCRCCheck::InternalSwap(CCLCMsg_FileCRCCheck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCLCMsg_FileCRCCheck, crc_)
      + sizeof(CCLCMsg_FileCRCCheck::crc_)
      - PROTOBUF_FIELD_OFFSET(CCLCMsg_FileCRCCheck, code_path_)>(
          reinterpret_cast<char*>(&code_path_),
          reinterpret_cast<char*>(&other->code_path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_FileCRCCheck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[46]);
}

// ===================================================================

class CCLCMsg_ClientMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_ClientMessage>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCLCMsg_ClientMessage::CCLCMsg_ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_ClientMessage)
}
CCLCMsg_ClientMessage::CCLCMsg_ClientMessage(const CCLCMsg_ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_ClientMessage)
}

inline void CCLCMsg_ClientMessage::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_type_ = 0;
}

CCLCMsg_ClientMessage::~CCLCMsg_ClientMessage() {
  // @@protoc_insertion_point(destructor:CCLCMsg_ClientMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCLCMsg_ClientMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_ClientMessage::ArenaDtor(void* object) {
  CCLCMsg_ClientMessage* _this = reinterpret_cast< CCLCMsg_ClientMessage* >(object);
  (void)_this;
}
void CCLCMsg_ClientMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_ClientMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  msg_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCLCMsg_ClientMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_ClientMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_ClientMessage)
  return target;
}

size_t CCLCMsg_ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_ClientMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCLCMsg_ClientMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCLCMsg_ClientMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCLCMsg_ClientMessage::GetClassData() const { return &_class_data_; }

void CCLCMsg_ClientMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCLCMsg_ClientMessage *>(to)->MergeFrom(
      static_cast<const CCLCMsg_ClientMessage &>(from));
}


void CCLCMsg_ClientMessage::MergeFrom(const CCLCMsg_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCLCMsg_ClientMessage::CopyFrom(const CCLCMsg_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_ClientMessage::IsInitialized() const {
  return true;
}

void CCLCMsg_ClientMessage::InternalSwap(CCLCMsg_ClientMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_ClientMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[47]);
}

// ===================================================================

class CDOTAClientMsg_MatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAClientMsg_MatchMetadata>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAClientMsg_MatchMetadata)
}
CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAClientMsg_MatchMetadata)
}

inline void CDOTAClientMsg_MatchMetadata::SharedCtor() {
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
match_id_ = uint64_t{0u};
}

CDOTAClientMsg_MatchMetadata::~CDOTAClientMsg_MatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAClientMsg_MatchMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAClientMsg_MatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_MatchMetadata::ArenaDtor(void* object) {
  CDOTAClientMsg_MatchMetadata* _this = reinterpret_cast< CDOTAClientMsg_MatchMetadata* >(object);
  (void)_this;
}
void CDOTAClientMsg_MatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAClientMsg_MatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAClientMsg_MatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientMsg_MatchMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmpty();
  }
  match_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAClientMsg_MatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAClientMsg_MatchMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientMsg_MatchMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientMsg_MatchMetadata)
  return target;
}

size_t CDOTAClientMsg_MatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientMsg_MatchMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_metadata());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAClientMsg_MatchMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAClientMsg_MatchMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAClientMsg_MatchMetadata::GetClassData() const { return &_class_data_; }

void CDOTAClientMsg_MatchMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAClientMsg_MatchMetadata *>(to)->MergeFrom(
      static_cast<const CDOTAClientMsg_MatchMetadata &>(from));
}


void CDOTAClientMsg_MatchMetadata::MergeFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MatchMetadata::InternalSwap(CDOTAClientMsg_MatchMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAClientMsg_MatchMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[48]);
}

// ===================================================================

class CSOEconItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemAttribute>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconItemAttribute::CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_bytes()) {
    value_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_bytes(), 
      GetArenaForAllocation());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemAttribute)
}

inline void CSOEconItemAttribute::SharedCtor() {
value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:CSOEconItemAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOEconItemAttribute::ArenaDtor(void* object) {
  CSOEconItemAttribute* _this = reinterpret_cast< CSOEconItemAttribute* >(object);
  (void)_this;
}
void CSOEconItemAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconItemAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes value_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value_bytes());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemAttribute::GetClassData() const { return &_class_data_; }

void CSOEconItemAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemAttribute *>(to)->MergeFrom(
      static_cast<const CSOEconItemAttribute &>(from));
}


void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_bytes(from._internal_value_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_bytes_, lhs_arena,
      &other->value_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, value_)
      + sizeof(CSOEconItemAttribute::value_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[49]);
}

// ===================================================================

class CSOEconItemEquipped::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEquipped>()._has_bits_);
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOEconItemEquipped::CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_class_, &from.new_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEquipped)
}

inline void CSOEconItemEquipped::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_class_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:CSOEconItemEquipped)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemEquipped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconItemEquipped::ArenaDtor(void* object) {
  CSOEconItemEquipped* _this = reinterpret_cast< CSOEconItemEquipped* >(object);
  (void)_this;
}
void CSOEconItemEquipped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemEquipped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEquipped)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_slot_) -
        reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEquipped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 new_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconItemEquipped::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEquipped)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEquipped)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_class());
    }

    // optional uint32 new_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemEquipped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemEquipped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemEquipped::GetClassData() const { return &_class_data_; }

void CSOEconItemEquipped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemEquipped *>(to)->MergeFrom(
      static_cast<const CSOEconItemEquipped &>(from));
}


void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_slot_ = from.new_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_slot_)
      + sizeof(CSOEconItemEquipped::new_slot_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_class_)>(
          reinterpret_cast<char*>(&new_class_),
          reinterpret_cast<char*>(&other->new_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEquipped::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[50]);
}

// ===================================================================

class CSOEconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CSOEconItem& interior_item(const CSOEconItem* msg);
  static void set_has_interior_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CSOEconItem&
CSOEconItem::_Internal::interior_item(const CSOEconItem* msg) {
  return *msg->interior_item_;
}
CSOEconItem::CSOEconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attribute_(arena),
  equipped_state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      equipped_state_(from.equipped_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interior_item()) {
    interior_item_ = new ::CSOEconItem(*from.interior_item_);
  } else {
    interior_item_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItem)
}

inline void CSOEconItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interior_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&original_id_) -
    reinterpret_cast<char*>(&interior_item_)) + sizeof(original_id_));
quality_ = 4u;
quantity_ = 1u;
level_ = 1u;
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:CSOEconItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete interior_item_;
}

void CSOEconItem::ArenaDtor(void* object) {
  CSOEconItem* _this = reinterpret_cast< CSOEconItem* >(object);
  (void)_this;
}
void CSOEconItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  equipped_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(interior_item_ != nullptr);
    interior_item_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&id_)) + sizeof(style_));
  }
  if (cached_has_bits & 0x00000f00u) {
    original_id_ = uint64_t{0u};
    quality_ = 4u;
    quantity_ = 1u;
    level_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 7 [default = 4];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CSOEconItem interior_item = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 original_id = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_original_id(&has_bits);
          original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_def_index(), target);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quantity(), target);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_origin(), target);
  }

  // repeated .CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_attribute(i), target, stream);
  }

  // optional .CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::interior_item(this), target, stream);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_style(), target);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_original_id(), target);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_equipped_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2UL * this->_internal_equipped_state_size();
  for (const auto& msg : this->equipped_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CSOEconItem interior_item = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interior_item_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 inventory = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory());
    }

    // optional uint32 def_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 flags = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 origin = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

    // optional uint32 style = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 original_id = 16 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_id());
    }

    // optional uint32 quality = 7 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional uint32 quantity = 5 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 level = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItem::GetClassData() const { return &_class_data_; }

void CSOEconItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItem *>(to)->MergeFrom(
      static_cast<const CSOEconItem &>(from));
}


void CSOEconItem::MergeFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_interior_item()->::CSOEconItem::MergeFrom(from._internal_interior_item());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000010u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000080u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      original_id_ = from.original_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::InternalSwap(CSOEconItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  equipped_state_.InternalSwap(&other->equipped_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItem, original_id_)
      + sizeof(CSOEconItem::original_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItem, interior_item_)>(
          reinterpret_cast<char*>(&interior_item_),
          reinterpret_cast<char*>(&other->interior_item_));
  swap(quality_, other->quality_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[51]);
}

// ===================================================================

class CLobbyTimedRewardDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyTimedRewardDetails>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_supply_crate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_timed_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CLobbyTimedRewardDetails)
}
CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:CLobbyTimedRewardDetails)
}

inline void CLobbyTimedRewardDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTimedRewardDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CLobbyTimedRewardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CLobbyTimedRewardDetails::ArenaDtor(void* object) {
  CLobbyTimedRewardDetails* _this = reinterpret_cast< CLobbyTimedRewardDetails* >(object);
  (void)_this;
}
void CLobbyTimedRewardDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyTimedRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyTimedRewardDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyTimedRewardDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_supply_crate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_supply_crate(&has_bits);
          is_supply_crate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_timed_drop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_timed_drop(&has_bits);
          is_timed_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CLobbyTimedRewardDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTimedRewardDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_account_id(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTimedRewardDetails)
  return target;
}

size_t CLobbyTimedRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyTimedRewardDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CLobbyTimedRewardDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CLobbyTimedRewardDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CLobbyTimedRewardDetails::GetClassData() const { return &_class_data_; }

void CLobbyTimedRewardDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CLobbyTimedRewardDetails *>(to)->MergeFrom(
      static_cast<const CLobbyTimedRewardDetails &>(from));
}


void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_supply_crate_ = from.is_supply_crate_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_timed_drop_ = from.is_timed_drop_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  return true;
}

void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, origin_)
      + sizeof(CLobbyTimedRewardDetails::origin_)
      - PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[52]);
}

// ===================================================================

class CMsgMatchTips_SingleTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchTips_SingleTip>()._has_bits_);
  static void set_has_source_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgMatchTips.SingleTip)
}
CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_account_id_, &from.source_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchTips.SingleTip)
}

inline void CMsgMatchTips_SingleTip::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
}

CMsgMatchTips_SingleTip::~CMsgMatchTips_SingleTip() {
  // @@protoc_insertion_point(destructor:CMsgMatchTips.SingleTip)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgMatchTips_SingleTip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchTips_SingleTip::ArenaDtor(void* object) {
  CMsgMatchTips_SingleTip* _this = reinterpret_cast< CMsgMatchTips_SingleTip* >(object);
  (void)_this;
}
void CMsgMatchTips_SingleTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchTips_SingleTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchTips_SingleTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchTips.SingleTip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchTips_SingleTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_account_id(&has_bits);
          source_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_account_id(&has_bits);
          target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tip_amount(&has_bits);
          tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchTips_SingleTip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchTips.SingleTip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_account_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_account_id(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tip_amount(), target);
  }

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchTips.SingleTip)
  return target;
}

size_t CMsgMatchTips_SingleTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchTips.SingleTip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 source_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_account_id());
    }

    // optional uint32 target_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tip_amount());
    }

    // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchTips_SingleTip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgMatchTips_SingleTip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchTips_SingleTip::GetClassData() const { return &_class_data_; }

void CMsgMatchTips_SingleTip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgMatchTips_SingleTip *>(to)->MergeFrom(
      static_cast<const CMsgMatchTips_SingleTip &>(from));
}


void CMsgMatchTips_SingleTip::MergeFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_account_id_ = from.source_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tip_amount_ = from.tip_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchTips_SingleTip::CopyFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips_SingleTip::IsInitialized() const {
  return true;
}

void CMsgMatchTips_SingleTip::InternalSwap(CMsgMatchTips_SingleTip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchTips_SingleTip, event_id_)
      + sizeof(CMsgMatchTips_SingleTip::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchTips_SingleTip, source_account_id_)>(
          reinterpret_cast<char*>(&source_account_id_),
          reinterpret_cast<char*>(&other->source_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchTips_SingleTip::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[53]);
}

// ===================================================================

class CMsgMatchTips::_Internal {
 public:
};

CMsgMatchTips::CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tips_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgMatchTips)
}
CMsgMatchTips::CMsgMatchTips(const CMsgMatchTips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tips_(from.tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchTips)
}

inline void CMsgMatchTips::SharedCtor() {
}

CMsgMatchTips::~CMsgMatchTips() {
  // @@protoc_insertion_point(destructor:CMsgMatchTips)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgMatchTips::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchTips::ArenaDtor(void* object) {
  CMsgMatchTips* _this = reinterpret_cast< CMsgMatchTips* >(object);
  (void)_this;
}
void CMsgMatchTips::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchTips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchTips::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchTips)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchTips::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMatchTips.SingleTip tips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchTips::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchTips)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchTips.SingleTip tips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchTips)
  return target;
}

size_t CMsgMatchTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchTips)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchTips.SingleTip tips = 2;
  total_size += 1UL * this->_internal_tips_size();
  for (const auto& msg : this->tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchTips::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgMatchTips::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchTips::GetClassData() const { return &_class_data_; }

void CMsgMatchTips::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgMatchTips *>(to)->MergeFrom(
      static_cast<const CMsgMatchTips &>(from));
}


void CMsgMatchTips::MergeFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tips_.MergeFrom(from.tips_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchTips::CopyFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips::IsInitialized() const {
  return true;
}

void CMsgMatchTips::InternalSwap(CMsgMatchTips* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tips_.InternalSwap(&other->tips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchTips::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[54]);
}

// ===================================================================

class CMsgMatchMatchmakingStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMatchmakingStats>()._has_bits_);
  static void set_has_average_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_behavior_score_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMatchmakingStats)
}
CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_queue_time_, &from.average_queue_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_score_variance_) -
    reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMatchmakingStats)
}

inline void CMsgMatchMatchmakingStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_queue_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&behavior_score_variance_) -
    reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
}

CMsgMatchMatchmakingStats::~CMsgMatchMatchmakingStats() {
  // @@protoc_insertion_point(destructor:CMsgMatchMatchmakingStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgMatchMatchmakingStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchMatchmakingStats::ArenaDtor(void* object) {
  CMsgMatchMatchmakingStats* _this = reinterpret_cast< CMsgMatchMatchmakingStats* >(object);
  (void)_this;
}
void CMsgMatchMatchmakingStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchMatchmakingStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchMatchmakingStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMatchmakingStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&average_queue_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&behavior_score_variance_) -
        reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMatchmakingStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 average_queue_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_average_queue_time(&has_bits);
          average_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 maximum_queue_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maximum_queue_time(&has_bits);
          maximum_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchBehaviorScoreVariance_IsValid(val))) {
            _internal_set_behavior_score_variance(static_cast<::EMatchBehaviorScoreVariance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchMatchmakingStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMatchmakingStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 average_queue_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_queue_time(), target);
  }

  // optional uint32 maximum_queue_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_queue_time(), target);
  }

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_behavior_score_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMatchmakingStats)
  return target;
}

size_t CMsgMatchMatchmakingStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMatchmakingStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 average_queue_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_average_queue_time());
    }

    // optional uint32 maximum_queue_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maximum_queue_time());
    }

    // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior_score_variance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchMatchmakingStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgMatchMatchmakingStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchMatchmakingStats::GetClassData() const { return &_class_data_; }

void CMsgMatchMatchmakingStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgMatchMatchmakingStats *>(to)->MergeFrom(
      static_cast<const CMsgMatchMatchmakingStats &>(from));
}


void CMsgMatchMatchmakingStats::MergeFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMatchmakingStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      average_queue_time_ = from.average_queue_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_queue_time_ = from.maximum_queue_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      behavior_score_variance_ = from.behavior_score_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchMatchmakingStats::CopyFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMatchmakingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMatchmakingStats::IsInitialized() const {
  return true;
}

void CMsgMatchMatchmakingStats::InternalSwap(CMsgMatchMatchmakingStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, behavior_score_variance_)
      + sizeof(CMsgMatchMatchmakingStats::behavior_score_variance_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, average_queue_time_)>(
          reinterpret_cast<char*>(&average_queue_time_),
          reinterpret_cast<char*>(&other->average_queue_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMatchmakingStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[55]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_PlayerKill::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_PlayerKill>()._has_bits_);
  static void set_has_victim_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}
CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victim_slot_, &from.victim_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}

inline void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victim_slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.PlayerKill)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_PlayerKill::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_PlayerKill* _this = reinterpret_cast< CDOTAMatchMetadata_Team_PlayerKill* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_PlayerKill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.PlayerKill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&victim_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_PlayerKill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 victim_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_victim_slot(&has_bits);
          victim_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_PlayerKill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.PlayerKill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

size_t CDOTAMatchMetadata_Team_PlayerKill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.PlayerKill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 victim_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_slot());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_PlayerKill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_PlayerKill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_PlayerKill::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_PlayerKill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_PlayerKill *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_PlayerKill &>(from));
}


void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      victim_slot_ = from.victim_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, count_)
      + sizeof(CDOTAMatchMetadata_Team_PlayerKill::count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, victim_slot_)>(
          reinterpret_cast<char*>(&victim_slot_),
          reinterpret_cast<char*>(&other->victim_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[56]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_ItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ItemPurchase>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_purchase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}
CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}

inline void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ItemPurchase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_ItemPurchase::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_ItemPurchase* _this = reinterpret_cast< CDOTAMatchMetadata_Team_ItemPurchase* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_ItemPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ItemPurchase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_time_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ItemPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchase_time(&has_bits);
          purchase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_ItemPurchase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ItemPurchase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

size_t CDOTAMatchMetadata_Team_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ItemPurchase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
    }

    // optional int32 purchase_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_ItemPurchase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_ItemPurchase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_ItemPurchase::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_ItemPurchase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_ItemPurchase *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_ItemPurchase &>(from));
}


void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_time_ = from.purchase_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_)
      + sizeof(CDOTAMatchMetadata_Team_ItemPurchase::purchase_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[57]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_InventorySnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_InventorySnapshot>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}
CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_id_(from.item_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}

inline void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_InventorySnapshot* _this = reinterpret_cast< CDOTAMatchMetadata_Team_InventorySnapshot* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  for (int i = 0, n = this->_internal_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_time(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

size_t CDOTAMatchMetadata_Team_InventorySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 game_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_InventorySnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_InventorySnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_InventorySnapshot::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_InventorySnapshot *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_InventorySnapshot &>(from));
}


void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_id_.MergeFrom(from.item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_id_.InternalSwap(&other->item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, level_)
      + sizeof(CDOTAMatchMetadata_Team_InventorySnapshot::level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, game_time_)>(
          reinterpret_cast<char*>(&game_time_),
          reinterpret_cast<char*>(&other->game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[58]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_AutoStyleCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_AutoStyleCriteria>()._has_bits_);
  static void set_has_name_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}
CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_token_, &from.name_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_AutoStyleCriteria* _this = reinterpret_cast< CDOTAMatchMetadata_Team_AutoStyleCriteria* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 name_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_name_token(&has_bits);
          name_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_name_token(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

size_t CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 name_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_name_token());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_AutoStyleCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_AutoStyleCriteria::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_AutoStyleCriteria *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_AutoStyleCriteria &>(from));
}


void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_token_ = from.name_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, value_)
      + sizeof(CDOTAMatchMetadata_Team_AutoStyleCriteria::value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_)>(
          reinterpret_cast<char*>(&name_token_),
          reinterpret_cast<char*>(&other->name_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[59]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_StrangeGemProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_StrangeGemProgress>()._has_bits_);
  static void set_has_kill_eater_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gem_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_required_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ending_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_owner_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_owner_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}
CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kill_eater_type_, &from.kill_eater_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}

inline void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kill_eater_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
}

CDOTAMatchMetadata_Team_StrangeGemProgress::~CDOTAMatchMetadata_Team_StrangeGemProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_StrangeGemProgress* _this = reinterpret_cast< CDOTAMatchMetadata_Team_StrangeGemProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&kill_eater_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_item_id_) -
        reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 kill_eater_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_kill_eater_type(&has_bits);
          kill_eater_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gem_item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gem_item_def_index(&has_bits);
          gem_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_required_hero_id(&has_bits);
          required_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starting_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_starting_value(&has_bits);
          starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ending_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ending_value(&has_bits);
          ending_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_item_def_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_owner_item_def_index(&has_bits);
          owner_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 owner_item_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_owner_item_id(&has_bits);
          owner_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 kill_eater_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kill_eater_type(), target);
  }

  // optional uint32 gem_item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gem_item_def_index(), target);
  }

  // optional uint32 required_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_hero_id(), target);
  }

  // optional uint32 starting_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_starting_value(), target);
  }

  // optional uint32 ending_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ending_value(), target);
  }

  // optional uint32 owner_item_def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_owner_item_def_index(), target);
  }

  // optional uint64 owner_item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_owner_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.StrangeGemProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_StrangeGemProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 kill_eater_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_kill_eater_type());
    }

    // optional uint32 gem_item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gem_item_def_index());
    }

    // optional uint32 required_hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_required_hero_id());
    }

    // optional uint32 starting_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_starting_value());
    }

    // optional uint32 ending_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ending_value());
    }

    // optional uint32 owner_item_def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_item_def_index());
    }

    // optional uint64 owner_item_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_owner_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_StrangeGemProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_StrangeGemProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_StrangeGemProgress::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_StrangeGemProgress *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_StrangeGemProgress &>(from));
}


void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      kill_eater_type_ = from.kill_eater_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      gem_item_def_index_ = from.gem_item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_hero_id_ = from.required_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      ending_value_ = from.ending_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      owner_item_def_index_ = from.owner_item_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      owner_item_id_ = from.owner_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_StrangeGemProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_)
      + sizeof(CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_)>(
          reinterpret_cast<char*>(&kill_eater_type_),
          reinterpret_cast<char*>(&other->kill_eater_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_StrangeGemProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[60]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_VictoryPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_VictoryPrediction>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}
CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}

inline void CDOTAMatchMetadata_Team_VictoryPrediction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
}

CDOTAMatchMetadata_Team_VictoryPrediction::~CDOTAMatchMetadata_Team_VictoryPrediction() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_VictoryPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_VictoryPrediction* _this = reinterpret_cast< CDOTAMatchMetadata_Team_VictoryPrediction* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_VictoryPrediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_VictoryPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_victory_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 starting_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_starting_value(&has_bits);
          starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_victory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_victory(&has_bits);
          is_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional uint32 starting_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starting_value(), target);
  }

  // optional bool is_victory = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_victory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.VictoryPrediction)
  return target;
}

size_t CDOTAMatchMetadata_Team_VictoryPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

    // optional uint32 starting_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_starting_value());
    }

    // optional bool is_victory = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_VictoryPrediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_VictoryPrediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_VictoryPrediction::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_VictoryPrediction *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_VictoryPrediction &>(from));
}


void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_victory_ = from.is_victory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_VictoryPrediction::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_)
      + sizeof(CDOTAMatchMetadata_Team_VictoryPrediction::is_victory_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_VictoryPrediction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[61]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_SubChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_SubChallenge>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}
CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}

inline void CDOTAMatchMetadata_Team_SubChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
}

CDOTAMatchMetadata_Team_SubChallenge::~CDOTAMatchMetadata_Team_SubChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.SubChallenge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_SubChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_SubChallenge::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_SubChallenge* _this = reinterpret_cast< CDOTAMatchMetadata_Team_SubChallenge* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_SubChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_SubChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_SubChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.SubChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_SubChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_start_value(&has_bits);
          start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_value(&has_bits);
          end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_SubChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.SubChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint32 start_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_value(), target);
  }

  // optional uint32 end_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_value(), target);
  }

  // optional bool completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.SubChallenge)
  return target;
}

size_t CDOTAMatchMetadata_Team_SubChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.SubChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

    // optional uint32 start_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_value());
    }

    // optional uint32 end_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_end_value());
    }

    // optional bool completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_SubChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_SubChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_SubChallenge::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_SubChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_SubChallenge *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_SubChallenge &>(from));
}


void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_value_ = from.start_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_value_ = from.end_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_SubChallenge::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_SubChallenge::InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, completed_)
      + sizeof(CDOTAMatchMetadata_Team_SubChallenge::completed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, slot_id_)>(
          reinterpret_cast<char*>(&slot_id_),
          reinterpret_cast<char*>(&other->slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_SubChallenge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[62]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_CavernChallengeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_CavernChallengeResult>()._has_bits_);
  static void set_has_completed_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claimed_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}
CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(const CDOTAMatchMetadata_Team_CavernChallengeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&completed_path_id_, &from.completed_path_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&claimed_room_id_) -
    reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}

inline void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&completed_path_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&claimed_room_id_) -
    reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
}

CDOTAMatchMetadata_Team_CavernChallengeResult::~CDOTAMatchMetadata_Team_CavernChallengeResult() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_CavernChallengeResult* _this = reinterpret_cast< CDOTAMatchMetadata_Team_CavernChallengeResult* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_CavernChallengeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_CavernChallengeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&completed_path_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&claimed_room_id_) -
        reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 completed_path_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_completed_path_id(&has_bits);
          completed_path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 claimed_room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_claimed_room_id(&has_bits);
          claimed_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 completed_path_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_completed_path_id(), target);
  }

  // optional uint32 claimed_room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_claimed_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.CavernChallengeResult)
  return target;
}

size_t CDOTAMatchMetadata_Team_CavernChallengeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 completed_path_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_completed_path_id());
    }

    // optional uint32 claimed_room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_claimed_room_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_CavernChallengeResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_CavernChallengeResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_CavernChallengeResult::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_CavernChallengeResult *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_CavernChallengeResult &>(from));
}


void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      completed_path_id_ = from.completed_path_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      claimed_room_id_ = from.claimed_room_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::CopyFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_CavernChallengeResult::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::InternalSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CavernChallengeResult, claimed_room_id_)
      + sizeof(CDOTAMatchMetadata_Team_CavernChallengeResult::claimed_room_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CavernChallengeResult, completed_path_id_)>(
          reinterpret_cast<char*>(&completed_path_id_),
          reinterpret_cast<char*>(&other->completed_path_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_CavernChallengeResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[63]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_ActionGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ActionGrant>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}
CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(const CDOTAMatchMetadata_Team_ActionGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(audit_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}

inline void CDOTAMatchMetadata_Team_ActionGrant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(audit_));
}

CDOTAMatchMetadata_Team_ActionGrant::~CDOTAMatchMetadata_Team_ActionGrant() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ActionGrant)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_ActionGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_ActionGrant::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_ActionGrant* _this = reinterpret_cast< CDOTAMatchMetadata_Team_ActionGrant* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_ActionGrant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_ActionGrant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ActionGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ActionGrant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(audit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ActionGrant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_audit(&has_bits);
          audit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_ActionGrant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ActionGrant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 audit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_audit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ActionGrant)
  return target;
}

size_t CDOTAMatchMetadata_Team_ActionGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ActionGrant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_action_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 audit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_audit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_ActionGrant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_ActionGrant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_ActionGrant::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_ActionGrant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_ActionGrant *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_ActionGrant &>(from));
}


void CDOTAMatchMetadata_Team_ActionGrant::MergeFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      audit_ = from.audit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_ActionGrant::CopyFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ActionGrant::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ActionGrant::InternalSwap(CDOTAMatchMetadata_Team_ActionGrant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, audit_)
      + sizeof(CDOTAMatchMetadata_Team_ActionGrant::audit_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ActionGrant::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[64]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_EventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_EventData>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_quest_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_challenge_rank_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_rank_previously_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_event_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wager_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cavern_challenge_active(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cavern_challenge_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_amount_wagered(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_team_wager_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_periodic_point_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cavern_challenge_plus_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sub_challenges_with_progress_(arena),
  cavern_challenge_map_results_(arena),
  actions_granted_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.EventData)
}
CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_challenges_with_progress_(from.sub_challenges_with_progress_),
      cavern_challenge_map_results_(from.cavern_challenge_map_results_),
      actions_granted_(from.actions_granted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(cavern_challenge_plus_shard_winnings_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.EventData)
}

inline void CDOTAMatchMetadata_Team_EventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(cavern_challenge_plus_shard_winnings_));
}

CDOTAMatchMetadata_Team_EventData::~CDOTAMatchMetadata_Team_EventData() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.EventData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_EventData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_EventData::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_EventData* _this = reinterpret_cast< CDOTAMatchMetadata_Team_EventData* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_EventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_EventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.EventData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_challenges_with_progress_.Clear();
  cavern_challenge_map_results_.Clear();
  actions_granted_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_completed_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(challenge_completed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&event_owned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
        reinterpret_cast<char*>(&event_owned_)) + sizeof(cavern_challenge_plus_shard_winnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_EventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_points(&has_bits);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_quest_id(&has_bits);
          challenge_quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_challenge_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_quest_challenge_id(&has_bits);
          challenge_quest_challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool challenge_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_challenge_completed(&has_bits);
          challenge_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_rank_completed(&has_bits);
          challenge_rank_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_previously_completed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_challenge_rank_previously_completed(&has_bits);
          challenge_rank_previously_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool event_owned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_event_owned(&has_bits);
          event_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_challenges_with_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager_winnings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_wager_winnings(&has_bits);
          wager_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cavern_challenge_active = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cavern_challenge_active(&has_bits);
          cavern_challenge_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_winnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_cavern_challenge_winnings(&has_bits);
          cavern_challenge_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 amount_wagered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_amount_wagered(&has_bits);
          amount_wagered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_wager_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_team_wager_amount(&has_bits);
          team_wager_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 periodic_point_adjustments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_periodic_point_adjustments(&has_bits);
          periodic_point_adjustments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cavern_challenge_map_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_plus_shard_winnings = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_cavern_challenge_plus_shard_winnings(&has_bits);
          cavern_challenge_plus_shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_actions_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_EventData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.EventData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_points(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_quest_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_quest_id(), target);
  }

  // optional uint32 challenge_quest_challenge_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_quest_challenge_id(), target);
  }

  // optional bool challenge_completed = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_challenge_completed(), target);
  }

  // optional uint32 challenge_rank_completed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_rank_completed(), target);
  }

  // optional uint32 challenge_rank_previously_completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_challenge_rank_previously_completed(), target);
  }

  // optional bool event_owned = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_event_owned(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_challenges_with_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_sub_challenges_with_progress(i), target, stream);
  }

  // optional uint32 wager_winnings = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_wager_winnings(), target);
  }

  // optional bool cavern_challenge_active = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cavern_challenge_active(), target);
  }

  // optional uint32 cavern_challenge_winnings = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cavern_challenge_winnings(), target);
  }

  // optional uint32 amount_wagered = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_amount_wagered(), target);
  }

  // optional uint32 team_wager_amount = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_team_wager_amount(), target);
  }

  // optional uint32 periodic_point_adjustments = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_periodic_point_adjustments(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cavern_challenge_map_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_cavern_challenge_map_results(i), target, stream);
  }

  // optional uint32 cavern_challenge_plus_shard_winnings = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_cavern_challenge_plus_shard_winnings(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_granted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_actions_granted(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.EventData)
  return target;
}

size_t CDOTAMatchMetadata_Team_EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.EventData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  total_size += 1UL * this->_internal_sub_challenges_with_progress_size();
  for (const auto& msg : this->sub_challenges_with_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  total_size += 2UL * this->_internal_cavern_challenge_map_results_size();
  for (const auto& msg : this->cavern_challenge_map_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  total_size += 2UL * this->_internal_actions_granted_size();
  for (const auto& msg : this->actions_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_points());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_quest_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_quest_id());
    }

    // optional uint32 challenge_quest_challenge_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_quest_challenge_id());
    }

    // optional uint32 challenge_rank_completed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_rank_completed());
    }

    // optional uint32 challenge_rank_previously_completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_rank_previously_completed());
    }

    // optional bool challenge_completed = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool event_owned = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_challenge_active = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 wager_winnings = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_wager_winnings());
    }

    // optional uint32 cavern_challenge_winnings = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cavern_challenge_winnings());
    }

    // optional uint32 amount_wagered = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_amount_wagered());
    }

    // optional uint32 team_wager_amount = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_team_wager_amount());
    }

    // optional uint32 periodic_point_adjustments = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_periodic_point_adjustments());
    }

    // optional uint32 cavern_challenge_plus_shard_winnings = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_challenge_plus_shard_winnings());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_EventData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_EventData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_EventData::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_EventData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_EventData *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_EventData &>(from));
}


void CDOTAMatchMetadata_Team_EventData::MergeFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sub_challenges_with_progress_.MergeFrom(from.sub_challenges_with_progress_);
  cavern_challenge_map_results_.MergeFrom(from.cavern_challenge_map_results_);
  actions_granted_.MergeFrom(from.actions_granted_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_quest_id_ = from.challenge_quest_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_quest_challenge_id_ = from.challenge_quest_challenge_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_rank_completed_ = from.challenge_rank_completed_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_rank_previously_completed_ = from.challenge_rank_previously_completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      challenge_completed_ = from.challenge_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      event_owned_ = from.event_owned_;
    }
    if (cached_has_bits & 0x00000200u) {
      cavern_challenge_active_ = from.cavern_challenge_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      wager_winnings_ = from.wager_winnings_;
    }
    if (cached_has_bits & 0x00000800u) {
      cavern_challenge_winnings_ = from.cavern_challenge_winnings_;
    }
    if (cached_has_bits & 0x00001000u) {
      amount_wagered_ = from.amount_wagered_;
    }
    if (cached_has_bits & 0x00002000u) {
      team_wager_amount_ = from.team_wager_amount_;
    }
    if (cached_has_bits & 0x00004000u) {
      periodic_point_adjustments_ = from.periodic_point_adjustments_;
    }
    if (cached_has_bits & 0x00008000u) {
      cavern_challenge_plus_shard_winnings_ = from.cavern_challenge_plus_shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_EventData::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_EventData::InternalSwap(CDOTAMatchMetadata_Team_EventData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_challenges_with_progress_.InternalSwap(&other->sub_challenges_with_progress_);
  cavern_challenge_map_results_.InternalSwap(&other->cavern_challenge_map_results_);
  actions_granted_.InternalSwap(&other->actions_granted_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, cavern_challenge_plus_shard_winnings_)
      + sizeof(CDOTAMatchMetadata_Team_EventData::cavern_challenge_plus_shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_EventData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[65]);
}

// ===================================================================

class CDOTAMatchMetadata_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_deaths_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_best_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_avg_stats_calibrated(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_hero_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_aegis_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_net_worth_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sentry_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_wards_dewarded(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_rank_mmr_boost_type(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ability_upgrades_(arena),
  equipped_econ_items_(arena),
  kills_(arena),
  items_(arena),
  level_up_times_(arena),
  graph_net_worth_(arena),
  inventory_snapshot_(arena),
  auto_style_criteria_(arena),
  event_data_(arena),
  strange_gem_progress_(arena),
  victory_prediction_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.Player)
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      equipped_econ_items_(from.equipped_econ_items_),
      kills_(from.kills_),
      items_(from.items_),
      level_up_times_(from.level_up_times_),
      graph_net_worth_(from.graph_net_worth_),
      inventory_snapshot_(from.inventory_snapshot_),
      auto_style_criteria_(from.auto_style_criteria_),
      event_data_(from.event_data_),
      strange_gem_progress_(from.strange_gem_progress_),
      victory_prediction_(from.victory_prediction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_mmr_boost_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_mmr_boost_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player)
}

inline void CDOTAMatchMetadata_Team_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_mmr_boost_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_mmr_boost_type_));
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team_Player::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_Player* _this = reinterpret_cast< CDOTAMatchMetadata_Team_Player* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_upgrades_.Clear();
  equipped_econ_items_.Clear();
  kills_.Clear();
  items_.Clear();
  level_up_times_.Clear();
  graph_net_worth_.Clear();
  inventory_snapshot_.Clear();
  auto_style_criteria_.Clear();
  event_data_.Clear();
  strange_gem_progress_.Clear();
  victory_prediction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_kills_x16_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(best_kills_x16_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&best_assists_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&support_score_) -
        reinterpret_cast<char*>(&best_assists_x16_)) + sizeof(support_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&push_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aegis_snatched_) -
        reinterpret_cast<char*>(&push_score_)) + sizeof(aegis_snatched_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&rapiers_purchased_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stun_duration_) -
        reinterpret_cast<char*>(&rapiers_purchased_)) + sizeof(stun_duration_));
  }
  rank_mmr_boost_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&_has_bits_);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ability_upgrades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ability_upgrades(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&_has_bits_);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItem equipped_econ_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipped_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_kills_x16 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_avg_kills_x16(&_has_bits_);
          avg_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_deaths_x16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_avg_deaths_x16(&_has_bits_);
          avg_deaths_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_assists_x16 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_avg_assists_x16(&_has_bits_);
          avg_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_gpm_x16 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_avg_gpm_x16(&_has_bits_);
          avg_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_xpm_x16 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_avg_xpm_x16(&_has_bits_);
          avg_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_kills_x16 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_best_kills_x16(&_has_bits_);
          best_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_assists_x16 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_best_assists_x16(&_has_bits_);
          best_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_gpm_x16 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_best_gpm_x16(&_has_bits_);
          best_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_xpm_x16 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_best_xpm_x16(&_has_bits_);
          best_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 win_streak = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_win_streak(&_has_bits_);
          win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_win_streak = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_best_win_streak(&_has_bits_);
          best_win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fight_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_fight_score(&_has_bits_);
          fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float farm_score = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_farm_score(&_has_bits_);
          farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float support_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_support_score(&_has_bits_);
          support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float push_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_push_score(&_has_bits_);
          push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 level_up_times = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_level_up_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_level_up_times(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<189>(ptr));
        } else if (static_cast<uint8_t>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inventory_snapshot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool avg_stats_calibrated = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_avg_stats_calibrated(&_has_bits_);
          avg_stats_calibrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_auto_style_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_strange_gem_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_xp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_hero_xp(&_has_bits_);
          hero_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_camps_stacked(&_has_bits_);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_victory_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane_selection_flags(&_has_bits_);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rampages = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rampages(&_has_bits_);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_triple_kills(&_has_bits_);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 aegis_snatched = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_aegis_snatched(&_has_bits_);
          aegis_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rapiers_purchased(&_has_bits_);
          rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_couriers_killed(&_has_bits_);
          couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth_rank = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_net_worth_rank(&_has_bits_);
          net_worth_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 support_gold_spent = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_support_gold_spent(&_has_bits_);
          support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 observer_wards_placed = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_observer_wards_placed(&_has_bits_);
          observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sentry_wards_placed = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_sentry_wards_placed(&_has_bits_);
          sentry_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wards_dewarded = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_wards_dewarded(&_has_bits_);
          wards_dewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float stun_duration = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_stun_duration(&_has_bits_);
          stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAMMRBoostType_IsValid(val))) {
            _internal_set_rank_mmr_boost_type(static_cast<::EDOTAMMRBoostType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0, n = this->_internal_ability_upgrades_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_upgrades(i), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_econ_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_equipped_econ_items(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_kills(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_farm_score(), target);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_support_score(), target);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0, n = this->_internal_level_up_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_level_up_times(i), target);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_graph_net_worth(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_snapshot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_inventory_snapshot(i), target, stream);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_avg_stats_calibrated(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auto_style_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_auto_style_criteria(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_event_data(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strange_gem_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_strange_gem_progress(i), target, stream);
  }

  // optional uint32 hero_xp = 31;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hero_xp(), target);
  }

  // optional uint32 camps_stacked = 32;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_camps_stacked(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_victory_prediction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_victory_prediction(i), target, stream);
  }

  // optional uint32 lane_selection_flags = 34;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_lane_selection_flags(), target);
  }

  // optional uint32 rampages = 35;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_triple_kills(), target);
  }

  // optional uint32 aegis_snatched = 37;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_aegis_snatched(), target);
  }

  // optional uint32 rapiers_purchased = 38;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_rapiers_purchased(), target);
  }

  // optional uint32 couriers_killed = 39;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_couriers_killed(), target);
  }

  // optional uint32 net_worth_rank = 40;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_net_worth_rank(), target);
  }

  // optional uint32 support_gold_spent = 41;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_support_gold_spent(), target);
  }

  // optional uint32 observer_wards_placed = 42;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_observer_wards_placed(), target);
  }

  // optional uint32 sentry_wards_placed = 43;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_sentry_wards_placed(), target);
  }

  // optional uint32 wards_dewarded = 44;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_wards_dewarded(), target);
  }

  // optional float stun_duration = 45;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_stun_duration(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_rank_mmr_boost_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ability_upgrades = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ability_upgrades_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ability_upgrades_size());
    total_size += data_size;
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  total_size += 1UL * this->_internal_equipped_econ_items_size();
  for (const auto& msg : this->equipped_econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  total_size += 1UL * this->_internal_kills_size();
  for (const auto& msg : this->kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 level_up_times = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->level_up_times_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_level_up_times_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  total_size += 2UL * this->_internal_inventory_snapshot_size();
  for (const auto& msg : this->inventory_snapshot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  total_size += 2UL * this->_internal_auto_style_criteria_size();
  for (const auto& msg : this->auto_style_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  total_size += 2UL * this->_internal_event_data_size();
  for (const auto& msg : this->event_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  total_size += 2UL * this->_internal_strange_gem_progress_size();
  for (const auto& msg : this->strange_gem_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  total_size += 2UL * this->_internal_victory_prediction_size();
  for (const auto& msg : this->victory_prediction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_best_kills_x16());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 best_assists_x16 = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_win_streak());
    }

    // optional uint32 best_win_streak = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_win_streak());
    }

    // optional float fight_score = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float support_score = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float push_score = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional bool avg_stats_calibrated = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_xp = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_xp());
    }

    // optional uint32 camps_stacked = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 lane_selection_flags = 34;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 rampages = 35;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rampages());
    }

    // optional uint32 triple_kills = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_triple_kills());
    }

    // optional uint32 aegis_snatched = 37;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aegis_snatched());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 rapiers_purchased = 38;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

    // optional uint32 couriers_killed = 39;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_couriers_killed());
    }

    // optional uint32 net_worth_rank = 40;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth_rank());
    }

    // optional uint32 support_gold_spent = 41;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold_spent());
    }

    // optional uint32 observer_wards_placed = 42;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_placed());
    }

    // optional uint32 sentry_wards_placed = 43;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sentry_wards_placed());
    }

    // optional uint32 wards_dewarded = 44;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_dewarded());
    }

    // optional float stun_duration = 45;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rank_mmr_boost_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team_Player::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team_Player *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team_Player &>(from));
}


void CDOTAMatchMetadata_Team_Player::MergeFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  kills_.MergeFrom(from.kills_);
  items_.MergeFrom(from.items_);
  level_up_times_.MergeFrom(from.level_up_times_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  inventory_snapshot_.MergeFrom(from.inventory_snapshot_);
  auto_style_criteria_.MergeFrom(from.auto_style_criteria_);
  event_data_.MergeFrom(from.event_data_);
  strange_gem_progress_.MergeFrom(from.strange_gem_progress_);
  victory_prediction_.MergeFrom(from.victory_prediction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000800u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      support_score_ = from.support_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      push_score_ = from.push_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      avg_stats_calibrated_ = from.avg_stats_calibrated_;
    }
    if (cached_has_bits & 0x00040000u) {
      hero_xp_ = from.hero_xp_;
    }
    if (cached_has_bits & 0x00080000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00100000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00400000u) {
      triple_kills_ = from.triple_kills_;
    }
    if (cached_has_bits & 0x00800000u) {
      aegis_snatched_ = from.aegis_snatched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      rapiers_purchased_ = from.rapiers_purchased_;
    }
    if (cached_has_bits & 0x02000000u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x04000000u) {
      net_worth_rank_ = from.net_worth_rank_;
    }
    if (cached_has_bits & 0x08000000u) {
      support_gold_spent_ = from.support_gold_spent_;
    }
    if (cached_has_bits & 0x10000000u) {
      observer_wards_placed_ = from.observer_wards_placed_;
    }
    if (cached_has_bits & 0x20000000u) {
      sentry_wards_placed_ = from.sentry_wards_placed_;
    }
    if (cached_has_bits & 0x40000000u) {
      wards_dewarded_ = from.wards_dewarded_;
    }
    if (cached_has_bits & 0x80000000u) {
      stun_duration_ = from.stun_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_has_rank_mmr_boost_type()) {
    _internal_set_rank_mmr_boost_type(from._internal_rank_mmr_boost_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player::InternalSwap(CDOTAMatchMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  equipped_econ_items_.InternalSwap(&other->equipped_econ_items_);
  kills_.InternalSwap(&other->kills_);
  items_.InternalSwap(&other->items_);
  level_up_times_.InternalSwap(&other->level_up_times_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  inventory_snapshot_.InternalSwap(&other->inventory_snapshot_);
  auto_style_criteria_.InternalSwap(&other->auto_style_criteria_);
  event_data_.InternalSwap(&other->event_data_);
  strange_gem_progress_.InternalSwap(&other->strange_gem_progress_);
  victory_prediction_.InternalSwap(&other->victory_prediction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, rank_mmr_boost_type_)
      + sizeof(CDOTAMatchMetadata_Team_Player::rank_mmr_boost_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[66]);
}

// ===================================================================

class CDOTAMatchMetadata_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team>()._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cm_first_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cm_captain_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cm_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  players_(arena),
  graph_experience_(arena),
  graph_gold_earned_(arena),
  graph_net_worth_(arena),
  cm_bans_(arena),
  cm_picks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team)
}
CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      graph_experience_(from.graph_experience_),
      graph_gold_earned_(from.graph_gold_earned_),
      graph_net_worth_(from.graph_net_worth_),
      cm_bans_(from.cm_bans_),
      cm_picks_(from.cm_picks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team)
}

inline void CDOTAMatchMetadata_Team::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dota_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAMatchMetadata_Team::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team* _this = reinterpret_cast< CDOTAMatchMetadata_Team* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  graph_experience_.Clear();
  graph_gold_earned_.Clear();
  graph_net_worth_.Clear();
  cm_bans_.Clear();
  cm_picks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cm_penalty_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_experience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_experience(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_experience(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_gold_earned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_gold_earned(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_gold_earned(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cm_first_pick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cm_first_pick(&has_bits);
          cm_first_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cm_captain_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cm_captain_player_id(&has_bits);
          cm_captain_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cm_bans = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_bans(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cm_picks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_picks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_picks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cm_penalty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cm_penalty(&has_bits);
          cm_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  // repeated float graph_experience = 3;
  for (int i = 0, n = this->_internal_graph_experience_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_graph_experience(i), target);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0, n = this->_internal_graph_gold_earned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_graph_gold_earned(i), target);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_graph_net_worth(i), target);
  }

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cm_first_pick(), target);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cm_captain_player_id(), target);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0, n = this->_internal_cm_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cm_bans(i), target);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0, n = this->_internal_cm_picks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cm_picks(i), target);
  }

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cm_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team)
  return target;
}

size_t CDOTAMatchMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_experience = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_experience_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_experience_size());
    total_size += data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_gold_earned_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_gold_earned_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated uint32 cm_bans = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_bans_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_bans_size());
    total_size += data_size;
  }

  // repeated uint32 cm_picks = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_picks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_picks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_captain_player_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cm_captain_player_id());
    }

    // optional uint32 cm_penalty = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cm_penalty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata_Team::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata_Team *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata_Team &>(from));
}


void CDOTAMatchMetadata_Team::MergeFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  graph_experience_.MergeFrom(from.graph_experience_);
  graph_gold_earned_.MergeFrom(from.graph_gold_earned_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  cm_bans_.MergeFrom(from.cm_bans_);
  cm_picks_.MergeFrom(from.cm_picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      cm_first_pick_ = from.cm_first_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      cm_captain_player_id_ = from.cm_captain_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cm_penalty_ = from.cm_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team::InternalSwap(CDOTAMatchMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  graph_experience_.InternalSwap(&other->graph_experience_);
  graph_gold_earned_.InternalSwap(&other->graph_gold_earned_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  cm_bans_.InternalSwap(&other->cm_bans_);
  cm_picks_.InternalSwap(&other->cm_picks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_penalty_)
      + sizeof(CDOTAMatchMetadata_Team::cm_penalty_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, dota_team_)>(
          reinterpret_cast<char*>(&dota_team_),
          reinterpret_cast<char*>(&other->dota_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[67]);
}

// ===================================================================

class CDOTAMatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_until_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_game_custom_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primary_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgMatchMatchmakingStats& matchmaking_stats(const CDOTAMatchMetadata* msg);
  static void set_has_matchmaking_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgMatchMatchmakingStats&
CDOTAMatchMetadata::_Internal::matchmaking_stats(const CDOTAMatchMetadata* msg) {
  return *msg->matchmaking_stats_;
}
CDOTAMatchMetadata::CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  teams_(arena),
  item_rewards_(arena),
  match_tips_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata)
}
CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      item_rewards_(from.item_rewards_),
      match_tips_(from.match_tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_game_custom_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    event_game_custom_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_game_custom_table()) {
    event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_game_custom_table(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_matchmaking_stats()) {
    matchmaking_stats_ = new ::CMsgMatchMatchmakingStats(*from.matchmaking_stats_);
  } else {
    matchmaking_stats_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata)
}

inline void CDOTAMatchMetadata::SharedCtor() {
event_game_custom_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  event_game_custom_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matchmaking_stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&matchmaking_stats_)) + sizeof(primary_event_id_));
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CDOTAMatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_game_custom_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete matchmaking_stats_;
}

void CDOTAMatchMetadata::ArenaDtor(void* object) {
  CDOTAMatchMetadata* _this = reinterpret_cast< CDOTAMatchMetadata* >(object);
  (void)_this;
}
void CDOTAMatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  item_rewards_.Clear();
  match_tips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_game_custom_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(matchmaking_stats_ != nullptr);
      matchmaking_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_event_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDOTAMatchMetadata.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails item_rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 report_until_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_report_until_time(&has_bits);
          report_until_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes event_game_custom_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_event_game_custom_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 primary_event_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_primary_event_id(&has_bits);
          primary_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchTips match_tips = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaking_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAMatchMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item_rewards(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_report_until_time(), target);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_event_game_custom_table(), target);
  }

  // optional uint32 primary_event_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_primary_event_id(), target);
  }

  // repeated .CMsgMatchTips match_tips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_match_tips(i), target, stream);
  }

  // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::matchmaking_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata)
  return target;
}

size_t CDOTAMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  total_size += 1UL * this->_internal_item_rewards_size();
  for (const auto& msg : this->item_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchTips match_tips = 7;
  total_size += 1UL * this->_internal_match_tips_size();
  for (const auto& msg : this->match_tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes event_game_custom_table = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_event_game_custom_table());
    }

    // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matchmaking_stats_);
    }

    // optional fixed64 lobby_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 primary_event_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_primary_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAMatchMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CDOTAMatchMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAMatchMetadata::GetClassData() const { return &_class_data_; }

void CDOTAMatchMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CDOTAMatchMetadata *>(to)->MergeFrom(
      static_cast<const CDOTAMatchMetadata &>(from));
}


void CDOTAMatchMetadata::MergeFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  item_rewards_.MergeFrom(from.item_rewards_);
  match_tips_.MergeFrom(from.match_tips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_game_custom_table(from._internal_event_game_custom_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_matchmaking_stats()->::CMsgMatchMatchmakingStats::MergeFrom(from._internal_matchmaking_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      report_until_time_ = from.report_until_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_event_id_ = from.primary_event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata::InternalSwap(CDOTAMatchMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  item_rewards_.InternalSwap(&other->item_rewards_);
  match_tips_.InternalSwap(&other->match_tips_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_game_custom_table_, lhs_arena,
      &other->event_game_custom_table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, primary_event_id_)
      + sizeof(CDOTAMatchMetadata::primary_event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, matchmaking_stats_)>(
          reinterpret_cast<char*>(&matchmaking_stats_),
          reinterpret_cast<char*>(&other->matchmaking_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dotaproto_2eproto_getter, &descriptor_table_dotaproto_2eproto_once,
      file_level_metadata_dotaproto_2eproto[68]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSOIDOwner* Arena::CreateMaybeMessage< ::CMsgSOIDOwner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOIDOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCWrapAndDeliverGift* Arena::CreateMaybeMessage< ::CMsgClientToGCWrapAndDeliverGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCWrapAndDeliverGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOSingleObject* Arena::CreateMaybeMessage< ::CMsgSOSingleObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOSingleObject >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRecentMatchInfo* Arena::CreateMaybeMessage< ::CMsgRecentMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRecentMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestSocialFeedResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRequestSocialFeedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestSocialFeedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleCupVictory* Arena::CreateMaybeMessage< ::CMsgBattleCupVictory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleCupVictory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemStyle* Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Trophy* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Trophy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Trophy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Stat* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Item* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Hero* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Emoticon* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Emoticon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Team* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSuccessfulHero* Arena::CreateMaybeMessage< ::CMsgSuccessfulHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSuccessfulHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetAllHeroProgressResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCGetAllHeroProgressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetAllHeroProgressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProfileResponse_FeaturedHero* Arena::CreateMaybeMessage< ::CMsgProfileResponse_FeaturedHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProfileResponse_FeaturedHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProfileResponse_MatchInfo* Arena::CreateMaybeMessage< ::CMsgProfileResponse_MatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProfileResponse_MatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProfileResponse* Arena::CreateMaybeMessage< ::CMsgProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOMultipleObjects_SingleObject* Arena::CreateMaybeMessage< ::CMsgSOMultipleObjects_SingleObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOMultipleObjects_SingleObject >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOMultipleObjects* Arena::CreateMaybeMessage< ::CMsgSOMultipleObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOMultipleObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscribed_SubscribedType* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscribed_SubscribedType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscribed_SubscribedType >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscribed* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_TipAlert* Arena::CreateMaybeMessage< ::CDOTAClientMsg_TipAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_TipAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetTrophyListResponse_Trophy* Arena::CreateMaybeMessage< ::CMsgClientToGCGetTrophyListResponse_Trophy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetTrophyListResponse_Trophy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetTrophyListResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCGetTrophyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetTrophyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_SplitPlayerConnect* Arena::CreateMaybeMessage< ::CCLCMsg_SplitPlayerConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_SplitPlayerConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EventCNY2015Cmd* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EventCNY2015Cmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EventCNY2015Cmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_RankWager* Arena::CreateMaybeMessage< ::CDOTAClientMsg_RankWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_RankWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_EventPointsTip* Arena::CreateMaybeMessage< ::CDOTAClientMsg_EventPointsTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_EventPointsTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_CoinWager* Arena::CreateMaybeMessage< ::CDOTAClientMsg_CoinWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_CoinWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheHaveVersion* Arena::CreateMaybeMessage< ::CMsgSOCacheHaveVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheHaveVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPlayerStatsResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientPlayerStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPlayerStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdjustItemEquippedState* Arena::CreateMaybeMessage< ::CMsgAdjustItemEquippedState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdjustItemEquippedState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCEquipItems* Arena::CreateMaybeMessage< ::CMsgClientToGCEquipItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCEquipItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientHello* Arena::CreateMaybeMessage< ::CMsgClientHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars_CVar* Arena::CreateMaybeMessage< ::CMsg_CVars_CVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars_CVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars* Arena::CreateMaybeMessage< ::CMsg_CVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SetConVar* Arena::CreateMaybeMessage< ::CNETMsg_SetConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SetConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_StringCmd* Arena::CreateMaybeMessage< ::CNETMsg_StringCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_StringCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMsg_CoachHUDPing* Arena::CreateMaybeMessage< ::CDOTAMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAUserMsg_CoachHUDPing* Arena::CreateMaybeMessage< ::CDOTAUserMsg_CoachHUDPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAUserMsg_CoachHUDPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GuideSelectOption* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GuideSelectOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GuideSelectOption >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_GuideSelected* Arena::CreateMaybeMessage< ::CDOTAClientMsg_GuideSelected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_GuideSelected >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_CmdKeyValues* Arena::CreateMaybeMessage< ::CCLCMsg_CmdKeyValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_CmdKeyValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_FileCRCCheck* Arena::CreateMaybeMessage< ::CCLCMsg_FileCRCCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_FileCRCCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::CCLCMsg_ClientMessage* Arena::CreateMaybeMessage< ::CCLCMsg_ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAClientMsg_MatchMetadata* Arena::CreateMaybeMessage< ::CDOTAClientMsg_MatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAClientMsg_MatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemAttribute* Arena::CreateMaybeMessage< ::CSOEconItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEquipped* Arena::CreateMaybeMessage< ::CSOEconItemEquipped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEquipped >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItem* Arena::CreateMaybeMessage< ::CSOEconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage< ::CLobbyTimedRewardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyTimedRewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage< ::CMsgMatchTips_SingleTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchTips_SingleTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchTips* Arena::CreateMaybeMessage< ::CMsgMatchTips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchTips >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMatchmakingStats* Arena::CreateMaybeMessage< ::CMsgMatchMatchmakingStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMatchmakingStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_PlayerKill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_PlayerKill >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_InventorySnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_InventorySnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_VictoryPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_VictoryPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_SubChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_SubChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_CavernChallengeResult* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ActionGrant* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ActionGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ActionGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_EventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_EventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
