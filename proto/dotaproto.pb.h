// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dotaproto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dotaproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dotaproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dotaproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dotaproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[69]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dotaproto_2eproto;
class CCLCMsg_ClientMessage;
struct CCLCMsg_ClientMessageDefaultTypeInternal;
extern CCLCMsg_ClientMessageDefaultTypeInternal _CCLCMsg_ClientMessage_default_instance_;
class CCLCMsg_CmdKeyValues;
struct CCLCMsg_CmdKeyValuesDefaultTypeInternal;
extern CCLCMsg_CmdKeyValuesDefaultTypeInternal _CCLCMsg_CmdKeyValues_default_instance_;
class CCLCMsg_FileCRCCheck;
struct CCLCMsg_FileCRCCheckDefaultTypeInternal;
extern CCLCMsg_FileCRCCheckDefaultTypeInternal _CCLCMsg_FileCRCCheck_default_instance_;
class CCLCMsg_SplitPlayerConnect;
struct CCLCMsg_SplitPlayerConnectDefaultTypeInternal;
extern CCLCMsg_SplitPlayerConnectDefaultTypeInternal _CCLCMsg_SplitPlayerConnect_default_instance_;
class CDOTAClientMsg_CoinWager;
struct CDOTAClientMsg_CoinWagerDefaultTypeInternal;
extern CDOTAClientMsg_CoinWagerDefaultTypeInternal _CDOTAClientMsg_CoinWager_default_instance_;
class CDOTAClientMsg_EventCNY2015Cmd;
struct CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal;
extern CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
class CDOTAClientMsg_EventPointsTip;
struct CDOTAClientMsg_EventPointsTipDefaultTypeInternal;
extern CDOTAClientMsg_EventPointsTipDefaultTypeInternal _CDOTAClientMsg_EventPointsTip_default_instance_;
class CDOTAClientMsg_GuideSelectOption;
struct CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal;
extern CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal _CDOTAClientMsg_GuideSelectOption_default_instance_;
class CDOTAClientMsg_GuideSelected;
struct CDOTAClientMsg_GuideSelectedDefaultTypeInternal;
extern CDOTAClientMsg_GuideSelectedDefaultTypeInternal _CDOTAClientMsg_GuideSelected_default_instance_;
class CDOTAClientMsg_MatchMetadata;
struct CDOTAClientMsg_MatchMetadataDefaultTypeInternal;
extern CDOTAClientMsg_MatchMetadataDefaultTypeInternal _CDOTAClientMsg_MatchMetadata_default_instance_;
class CDOTAClientMsg_RankWager;
struct CDOTAClientMsg_RankWagerDefaultTypeInternal;
extern CDOTAClientMsg_RankWagerDefaultTypeInternal _CDOTAClientMsg_RankWager_default_instance_;
class CDOTAClientMsg_TipAlert;
struct CDOTAClientMsg_TipAlertDefaultTypeInternal;
extern CDOTAClientMsg_TipAlertDefaultTypeInternal _CDOTAClientMsg_TipAlert_default_instance_;
class CDOTAMatchMetadata;
struct CDOTAMatchMetadataDefaultTypeInternal;
extern CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
class CDOTAMatchMetadata_Team;
struct CDOTAMatchMetadata_TeamDefaultTypeInternal;
extern CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
class CDOTAMatchMetadata_Team_ActionGrant;
struct CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_ActionGrant_default_instance_;
class CDOTAMatchMetadata_Team_AutoStyleCriteria;
struct CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
class CDOTAMatchMetadata_Team_CavernChallengeResult;
struct CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal _CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_;
class CDOTAMatchMetadata_Team_EventData;
struct CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
class CDOTAMatchMetadata_Team_InventorySnapshot;
struct CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
class CDOTAMatchMetadata_Team_ItemPurchase;
struct CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
class CDOTAMatchMetadata_Team_Player;
struct CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
class CDOTAMatchMetadata_Team_PlayerKill;
struct CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
class CDOTAMatchMetadata_Team_StrangeGemProgress;
struct CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
class CDOTAMatchMetadata_Team_SubChallenge;
struct CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
class CDOTAMatchMetadata_Team_VictoryPrediction;
struct CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal;
extern CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
class CDOTAMsg_CoachHUDPing;
struct CDOTAMsg_CoachHUDPingDefaultTypeInternal;
extern CDOTAMsg_CoachHUDPingDefaultTypeInternal _CDOTAMsg_CoachHUDPing_default_instance_;
class CDOTAUserMsg_CoachHUDPing;
struct CDOTAUserMsg_CoachHUDPingDefaultTypeInternal;
extern CDOTAUserMsg_CoachHUDPingDefaultTypeInternal _CDOTAUserMsg_CoachHUDPing_default_instance_;
class CLobbyTimedRewardDetails;
struct CLobbyTimedRewardDetailsDefaultTypeInternal;
extern CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
class CMsgAdjustItemEquippedState;
struct CMsgAdjustItemEquippedStateDefaultTypeInternal;
extern CMsgAdjustItemEquippedStateDefaultTypeInternal _CMsgAdjustItemEquippedState_default_instance_;
class CMsgBattleCupVictory;
struct CMsgBattleCupVictoryDefaultTypeInternal;
extern CMsgBattleCupVictoryDefaultTypeInternal _CMsgBattleCupVictory_default_instance_;
class CMsgClientHello;
struct CMsgClientHelloDefaultTypeInternal;
extern CMsgClientHelloDefaultTypeInternal _CMsgClientHello_default_instance_;
class CMsgClientToGCEquipItems;
struct CMsgClientToGCEquipItemsDefaultTypeInternal;
extern CMsgClientToGCEquipItemsDefaultTypeInternal _CMsgClientToGCEquipItems_default_instance_;
class CMsgClientToGCGetAllHeroProgressResponse;
struct CMsgClientToGCGetAllHeroProgressResponseDefaultTypeInternal;
extern CMsgClientToGCGetAllHeroProgressResponseDefaultTypeInternal _CMsgClientToGCGetAllHeroProgressResponse_default_instance_;
class CMsgClientToGCGetTrophyListResponse;
struct CMsgClientToGCGetTrophyListResponseDefaultTypeInternal;
extern CMsgClientToGCGetTrophyListResponseDefaultTypeInternal _CMsgClientToGCGetTrophyListResponse_default_instance_;
class CMsgClientToGCGetTrophyListResponse_Trophy;
struct CMsgClientToGCGetTrophyListResponse_TrophyDefaultTypeInternal;
extern CMsgClientToGCGetTrophyListResponse_TrophyDefaultTypeInternal _CMsgClientToGCGetTrophyListResponse_Trophy_default_instance_;
class CMsgClientToGCRequestSocialFeedResponse;
struct CMsgClientToGCRequestSocialFeedResponseDefaultTypeInternal;
extern CMsgClientToGCRequestSocialFeedResponseDefaultTypeInternal _CMsgClientToGCRequestSocialFeedResponse_default_instance_;
class CMsgClientToGCSetItemStyle;
struct CMsgClientToGCSetItemStyleDefaultTypeInternal;
extern CMsgClientToGCSetItemStyleDefaultTypeInternal _CMsgClientToGCSetItemStyle_default_instance_;
class CMsgClientToGCWrapAndDeliverGift;
struct CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal;
extern CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal _CMsgClientToGCWrapAndDeliverGift_default_instance_;
class CMsgDOTAProfileCard;
struct CMsgDOTAProfileCardDefaultTypeInternal;
extern CMsgDOTAProfileCardDefaultTypeInternal _CMsgDOTAProfileCard_default_instance_;
class CMsgDOTAProfileCard_Slot;
struct CMsgDOTAProfileCard_SlotDefaultTypeInternal;
extern CMsgDOTAProfileCard_SlotDefaultTypeInternal _CMsgDOTAProfileCard_Slot_default_instance_;
class CMsgDOTAProfileCard_Slot_Emoticon;
struct CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
class CMsgDOTAProfileCard_Slot_Hero;
struct CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
class CMsgDOTAProfileCard_Slot_Item;
struct CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Item_default_instance_;
class CMsgDOTAProfileCard_Slot_Stat;
struct CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
class CMsgDOTAProfileCard_Slot_Team;
struct CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Team_default_instance_;
class CMsgDOTAProfileCard_Slot_Trophy;
struct CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
class CMsgGCToClientPlayerStatsResponse;
struct CMsgGCToClientPlayerStatsResponseDefaultTypeInternal;
extern CMsgGCToClientPlayerStatsResponseDefaultTypeInternal _CMsgGCToClientPlayerStatsResponse_default_instance_;
class CMsgMatchMatchmakingStats;
struct CMsgMatchMatchmakingStatsDefaultTypeInternal;
extern CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
class CMsgMatchTips;
struct CMsgMatchTipsDefaultTypeInternal;
extern CMsgMatchTipsDefaultTypeInternal _CMsgMatchTips_default_instance_;
class CMsgMatchTips_SingleTip;
struct CMsgMatchTips_SingleTipDefaultTypeInternal;
extern CMsgMatchTips_SingleTipDefaultTypeInternal _CMsgMatchTips_SingleTip_default_instance_;
class CMsgProfileResponse;
struct CMsgProfileResponseDefaultTypeInternal;
extern CMsgProfileResponseDefaultTypeInternal _CMsgProfileResponse_default_instance_;
class CMsgProfileResponse_FeaturedHero;
struct CMsgProfileResponse_FeaturedHeroDefaultTypeInternal;
extern CMsgProfileResponse_FeaturedHeroDefaultTypeInternal _CMsgProfileResponse_FeaturedHero_default_instance_;
class CMsgProfileResponse_MatchInfo;
struct CMsgProfileResponse_MatchInfoDefaultTypeInternal;
extern CMsgProfileResponse_MatchInfoDefaultTypeInternal _CMsgProfileResponse_MatchInfo_default_instance_;
class CMsgRecentMatchInfo;
struct CMsgRecentMatchInfoDefaultTypeInternal;
extern CMsgRecentMatchInfoDefaultTypeInternal _CMsgRecentMatchInfo_default_instance_;
class CMsgSOCacheHaveVersion;
struct CMsgSOCacheHaveVersionDefaultTypeInternal;
extern CMsgSOCacheHaveVersionDefaultTypeInternal _CMsgSOCacheHaveVersion_default_instance_;
class CMsgSOCacheSubscribed;
struct CMsgSOCacheSubscribedDefaultTypeInternal;
extern CMsgSOCacheSubscribedDefaultTypeInternal _CMsgSOCacheSubscribed_default_instance_;
class CMsgSOCacheSubscribed_SubscribedType;
struct CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal;
extern CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
class CMsgSOIDOwner;
struct CMsgSOIDOwnerDefaultTypeInternal;
extern CMsgSOIDOwnerDefaultTypeInternal _CMsgSOIDOwner_default_instance_;
class CMsgSOMultipleObjects;
struct CMsgSOMultipleObjectsDefaultTypeInternal;
extern CMsgSOMultipleObjectsDefaultTypeInternal _CMsgSOMultipleObjects_default_instance_;
class CMsgSOMultipleObjects_SingleObject;
struct CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal;
extern CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal _CMsgSOMultipleObjects_SingleObject_default_instance_;
class CMsgSOSingleObject;
struct CMsgSOSingleObjectDefaultTypeInternal;
extern CMsgSOSingleObjectDefaultTypeInternal _CMsgSOSingleObject_default_instance_;
class CMsgSuccessfulHero;
struct CMsgSuccessfulHeroDefaultTypeInternal;
extern CMsgSuccessfulHeroDefaultTypeInternal _CMsgSuccessfulHero_default_instance_;
class CMsg_CVars;
struct CMsg_CVarsDefaultTypeInternal;
extern CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
class CMsg_CVars_CVar;
struct CMsg_CVars_CVarDefaultTypeInternal;
extern CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
class CNETMsg_SetConVar;
struct CNETMsg_SetConVarDefaultTypeInternal;
extern CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
class CNETMsg_StringCmd;
struct CNETMsg_StringCmdDefaultTypeInternal;
extern CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
class CSOEconItem;
struct CSOEconItemDefaultTypeInternal;
extern CSOEconItemDefaultTypeInternal _CSOEconItem_default_instance_;
class CSOEconItemAttribute;
struct CSOEconItemAttributeDefaultTypeInternal;
extern CSOEconItemAttributeDefaultTypeInternal _CSOEconItemAttribute_default_instance_;
class CSOEconItemEquipped;
struct CSOEconItemEquippedDefaultTypeInternal;
extern CSOEconItemEquippedDefaultTypeInternal _CSOEconItemEquipped_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCLCMsg_ClientMessage* Arena::CreateMaybeMessage<::CCLCMsg_ClientMessage>(Arena*);
template<> ::CCLCMsg_CmdKeyValues* Arena::CreateMaybeMessage<::CCLCMsg_CmdKeyValues>(Arena*);
template<> ::CCLCMsg_FileCRCCheck* Arena::CreateMaybeMessage<::CCLCMsg_FileCRCCheck>(Arena*);
template<> ::CCLCMsg_SplitPlayerConnect* Arena::CreateMaybeMessage<::CCLCMsg_SplitPlayerConnect>(Arena*);
template<> ::CDOTAClientMsg_CoinWager* Arena::CreateMaybeMessage<::CDOTAClientMsg_CoinWager>(Arena*);
template<> ::CDOTAClientMsg_EventCNY2015Cmd* Arena::CreateMaybeMessage<::CDOTAClientMsg_EventCNY2015Cmd>(Arena*);
template<> ::CDOTAClientMsg_EventPointsTip* Arena::CreateMaybeMessage<::CDOTAClientMsg_EventPointsTip>(Arena*);
template<> ::CDOTAClientMsg_GuideSelectOption* Arena::CreateMaybeMessage<::CDOTAClientMsg_GuideSelectOption>(Arena*);
template<> ::CDOTAClientMsg_GuideSelected* Arena::CreateMaybeMessage<::CDOTAClientMsg_GuideSelected>(Arena*);
template<> ::CDOTAClientMsg_MatchMetadata* Arena::CreateMaybeMessage<::CDOTAClientMsg_MatchMetadata>(Arena*);
template<> ::CDOTAClientMsg_RankWager* Arena::CreateMaybeMessage<::CDOTAClientMsg_RankWager>(Arena*);
template<> ::CDOTAClientMsg_TipAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_TipAlert>(Arena*);
template<> ::CDOTAMatchMetadata* Arena::CreateMaybeMessage<::CDOTAMatchMetadata>(Arena*);
template<> ::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team>(Arena*);
template<> ::CDOTAMatchMetadata_Team_ActionGrant* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_ActionGrant>(Arena*);
template<> ::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_AutoStyleCriteria>(Arena*);
template<> ::CDOTAMatchMetadata_Team_CavernChallengeResult* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_CavernChallengeResult>(Arena*);
template<> ::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_EventData>(Arena*);
template<> ::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_InventorySnapshot>(Arena*);
template<> ::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_ItemPurchase>(Arena*);
template<> ::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_Player>(Arena*);
template<> ::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_PlayerKill>(Arena*);
template<> ::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_StrangeGemProgress>(Arena*);
template<> ::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_SubChallenge>(Arena*);
template<> ::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage<::CDOTAMatchMetadata_Team_VictoryPrediction>(Arena*);
template<> ::CDOTAMsg_CoachHUDPing* Arena::CreateMaybeMessage<::CDOTAMsg_CoachHUDPing>(Arena*);
template<> ::CDOTAUserMsg_CoachHUDPing* Arena::CreateMaybeMessage<::CDOTAUserMsg_CoachHUDPing>(Arena*);
template<> ::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage<::CLobbyTimedRewardDetails>(Arena*);
template<> ::CMsgAdjustItemEquippedState* Arena::CreateMaybeMessage<::CMsgAdjustItemEquippedState>(Arena*);
template<> ::CMsgBattleCupVictory* Arena::CreateMaybeMessage<::CMsgBattleCupVictory>(Arena*);
template<> ::CMsgClientHello* Arena::CreateMaybeMessage<::CMsgClientHello>(Arena*);
template<> ::CMsgClientToGCEquipItems* Arena::CreateMaybeMessage<::CMsgClientToGCEquipItems>(Arena*);
template<> ::CMsgClientToGCGetAllHeroProgressResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetAllHeroProgressResponse>(Arena*);
template<> ::CMsgClientToGCGetTrophyListResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetTrophyListResponse>(Arena*);
template<> ::CMsgClientToGCGetTrophyListResponse_Trophy* Arena::CreateMaybeMessage<::CMsgClientToGCGetTrophyListResponse_Trophy>(Arena*);
template<> ::CMsgClientToGCRequestSocialFeedResponse* Arena::CreateMaybeMessage<::CMsgClientToGCRequestSocialFeedResponse>(Arena*);
template<> ::CMsgClientToGCSetItemStyle* Arena::CreateMaybeMessage<::CMsgClientToGCSetItemStyle>(Arena*);
template<> ::CMsgClientToGCWrapAndDeliverGift* Arena::CreateMaybeMessage<::CMsgClientToGCWrapAndDeliverGift>(Arena*);
template<> ::CMsgDOTAProfileCard* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Emoticon* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Emoticon>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Hero* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Hero>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Item* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Item>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Stat* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Stat>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Team* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Team>(Arena*);
template<> ::CMsgDOTAProfileCard_Slot_Trophy* Arena::CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Trophy>(Arena*);
template<> ::CMsgGCToClientPlayerStatsResponse* Arena::CreateMaybeMessage<::CMsgGCToClientPlayerStatsResponse>(Arena*);
template<> ::CMsgMatchMatchmakingStats* Arena::CreateMaybeMessage<::CMsgMatchMatchmakingStats>(Arena*);
template<> ::CMsgMatchTips* Arena::CreateMaybeMessage<::CMsgMatchTips>(Arena*);
template<> ::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage<::CMsgMatchTips_SingleTip>(Arena*);
template<> ::CMsgProfileResponse* Arena::CreateMaybeMessage<::CMsgProfileResponse>(Arena*);
template<> ::CMsgProfileResponse_FeaturedHero* Arena::CreateMaybeMessage<::CMsgProfileResponse_FeaturedHero>(Arena*);
template<> ::CMsgProfileResponse_MatchInfo* Arena::CreateMaybeMessage<::CMsgProfileResponse_MatchInfo>(Arena*);
template<> ::CMsgRecentMatchInfo* Arena::CreateMaybeMessage<::CMsgRecentMatchInfo>(Arena*);
template<> ::CMsgSOCacheHaveVersion* Arena::CreateMaybeMessage<::CMsgSOCacheHaveVersion>(Arena*);
template<> ::CMsgSOCacheSubscribed* Arena::CreateMaybeMessage<::CMsgSOCacheSubscribed>(Arena*);
template<> ::CMsgSOCacheSubscribed_SubscribedType* Arena::CreateMaybeMessage<::CMsgSOCacheSubscribed_SubscribedType>(Arena*);
template<> ::CMsgSOIDOwner* Arena::CreateMaybeMessage<::CMsgSOIDOwner>(Arena*);
template<> ::CMsgSOMultipleObjects* Arena::CreateMaybeMessage<::CMsgSOMultipleObjects>(Arena*);
template<> ::CMsgSOMultipleObjects_SingleObject* Arena::CreateMaybeMessage<::CMsgSOMultipleObjects_SingleObject>(Arena*);
template<> ::CMsgSOSingleObject* Arena::CreateMaybeMessage<::CMsgSOSingleObject>(Arena*);
template<> ::CMsgSuccessfulHero* Arena::CreateMaybeMessage<::CMsgSuccessfulHero>(Arena*);
template<> ::CMsg_CVars* Arena::CreateMaybeMessage<::CMsg_CVars>(Arena*);
template<> ::CMsg_CVars_CVar* Arena::CreateMaybeMessage<::CMsg_CVars_CVar>(Arena*);
template<> ::CNETMsg_SetConVar* Arena::CreateMaybeMessage<::CNETMsg_SetConVar>(Arena*);
template<> ::CNETMsg_StringCmd* Arena::CreateMaybeMessage<::CNETMsg_StringCmd>(Arena*);
template<> ::CSOEconItem* Arena::CreateMaybeMessage<::CSOEconItem>(Arena*);
template<> ::CSOEconItemAttribute* Arena::CreateMaybeMessage<::CSOEconItemAttribute>(Arena*);
template<> ::CSOEconItemEquipped* Arena::CreateMaybeMessage<::CSOEconItemEquipped>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgDOTAProfileCard_EStatID : int {
  CMsgDOTAProfileCard_EStatID_k_eStat_Wins = 3,
  CMsgDOTAProfileCard_EStatID_k_eStat_Commends = 4,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed = 5,
  CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate = 6,
  CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank = 7,
  CMsgDOTAProfileCard_EStatID_k_eStat_GamesMVP = 8
};
bool CMsgDOTAProfileCard_EStatID_IsValid(int value);
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MIN = CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_EStatID_EStatID_MAX = CMsgDOTAProfileCard_EStatID_k_eStat_GamesMVP;
constexpr int CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE = CMsgDOTAProfileCard_EStatID_EStatID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor();
template<typename T>
inline const std::string& CMsgDOTAProfileCard_EStatID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAProfileCard_EStatID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAProfileCard_EStatID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAProfileCard_EStatID_descriptor(), enum_t_value);
}
inline bool CMsgDOTAProfileCard_EStatID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAProfileCard_EStatID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAProfileCard_EStatID>(
    CMsgDOTAProfileCard_EStatID_descriptor(), name, value);
}
enum CMsgProfileResponse_EResponse : int {
  CMsgProfileResponse_EResponse_k_eInternalError = 0,
  CMsgProfileResponse_EResponse_k_eSuccess = 1,
  CMsgProfileResponse_EResponse_k_eTooBusy = 2,
  CMsgProfileResponse_EResponse_k_eDisabled = 3
};
bool CMsgProfileResponse_EResponse_IsValid(int value);
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse_EResponse_EResponse_MIN = CMsgProfileResponse_EResponse_k_eInternalError;
constexpr CMsgProfileResponse_EResponse CMsgProfileResponse_EResponse_EResponse_MAX = CMsgProfileResponse_EResponse_k_eDisabled;
constexpr int CMsgProfileResponse_EResponse_EResponse_ARRAYSIZE = CMsgProfileResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgProfileResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgProfileResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgProfileResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgProfileResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgProfileResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgProfileResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgProfileResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgProfileResponse_EResponse>(
    CMsgProfileResponse_EResponse_descriptor(), name, value);
}
enum PartnerAccountType : int {
  PARTNER_NONE = 0,
  PARTNER_PERFECT_WORLD = 1,
  PARTNER_INVALID = 3
};
bool PartnerAccountType_IsValid(int value);
constexpr PartnerAccountType PartnerAccountType_MIN = PARTNER_NONE;
constexpr PartnerAccountType PartnerAccountType_MAX = PARTNER_INVALID;
constexpr int PartnerAccountType_ARRAYSIZE = PartnerAccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerAccountType_descriptor();
template<typename T>
inline const std::string& PartnerAccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PartnerAccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PartnerAccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PartnerAccountType_descriptor(), enum_t_value);
}
inline bool PartnerAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PartnerAccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PartnerAccountType>(
    PartnerAccountType_descriptor(), name, value);
}
enum ESourceEngine : int {
  k_ESE_Source1 = 0,
  k_ESE_Source2 = 1
};
bool ESourceEngine_IsValid(int value);
constexpr ESourceEngine ESourceEngine_MIN = k_ESE_Source1;
constexpr ESourceEngine ESourceEngine_MAX = k_ESE_Source2;
constexpr int ESourceEngine_ARRAYSIZE = ESourceEngine_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESourceEngine_descriptor();
template<typename T>
inline const std::string& ESourceEngine_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESourceEngine>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESourceEngine_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESourceEngine_descriptor(), enum_t_value);
}
inline bool ESourceEngine_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESourceEngine* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESourceEngine>(
    ESourceEngine_descriptor(), name, value);
}
enum DOTA_GameMode : int {
  DOTA_GAMEMODE_NONE = 0,
  DOTA_GAMEMODE_AP = 1,
  DOTA_GAMEMODE_CM = 2,
  DOTA_GAMEMODE_RD = 3,
  DOTA_GAMEMODE_SD = 4,
  DOTA_GAMEMODE_AR = 5,
  DOTA_GAMEMODE_INTRO = 6,
  DOTA_GAMEMODE_HW = 7,
  DOTA_GAMEMODE_REVERSE_CM = 8,
  DOTA_GAMEMODE_XMAS = 9,
  DOTA_GAMEMODE_TUTORIAL = 10,
  DOTA_GAMEMODE_MO = 11,
  DOTA_GAMEMODE_LP = 12,
  DOTA_GAMEMODE_POOL1 = 13,
  DOTA_GAMEMODE_FH = 14,
  DOTA_GAMEMODE_CUSTOM = 15,
  DOTA_GAMEMODE_CD = 16,
  DOTA_GAMEMODE_BD = 17,
  DOTA_GAMEMODE_ABILITY_DRAFT = 18,
  DOTA_GAMEMODE_EVENT = 19,
  DOTA_GAMEMODE_ARDM = 20,
  DOTA_GAMEMODE_1V1MID = 21,
  DOTA_GAMEMODE_ALL_DRAFT = 22,
  DOTA_GAMEMODE_TURBO = 23,
  DOTA_GAMEMODE_MUTATION = 24,
  DOTA_GAMEMODE_COACHES_CHALLENGE = 25
};
bool DOTA_GameMode_IsValid(int value);
constexpr DOTA_GameMode DOTA_GameMode_MIN = DOTA_GAMEMODE_NONE;
constexpr DOTA_GameMode DOTA_GameMode_MAX = DOTA_GAMEMODE_COACHES_CHALLENGE;
constexpr int DOTA_GameMode_ARRAYSIZE = DOTA_GameMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_GameMode_descriptor();
template<typename T>
inline const std::string& DOTA_GameMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DOTA_GameMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DOTA_GameMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DOTA_GameMode_descriptor(), enum_t_value);
}
inline bool DOTA_GameMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DOTA_GameMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DOTA_GameMode>(
    DOTA_GameMode_descriptor(), name, value);
}
enum EMatchOutcome : int {
  k_EMatchOutcome_Unknown = 0,
  k_EMatchOutcome_RadVictory = 2,
  k_EMatchOutcome_DireVictory = 3,
  k_EMatchOutcome_NotScored_PoorNetworkConditions = 64,
  k_EMatchOutcome_NotScored_Leaver = 65,
  k_EMatchOutcome_NotScored_ServerCrash = 66,
  k_EMatchOutcome_NotScored_NeverStarted = 67,
  k_EMatchOutcome_NotScored_Canceled = 68,
  k_EMatchOutcome_NotScored_Suspicious = 69
};
bool EMatchOutcome_IsValid(int value);
constexpr EMatchOutcome EMatchOutcome_MIN = k_EMatchOutcome_Unknown;
constexpr EMatchOutcome EMatchOutcome_MAX = k_EMatchOutcome_NotScored_Suspicious;
constexpr int EMatchOutcome_ARRAYSIZE = EMatchOutcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchOutcome_descriptor();
template<typename T>
inline const std::string& EMatchOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMatchOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMatchOutcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMatchOutcome_descriptor(), enum_t_value);
}
inline bool EMatchOutcome_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMatchOutcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMatchOutcome>(
    EMatchOutcome_descriptor(), name, value);
}
enum EDOTAMMRBoostType : int {
  k_EDOTAMMRBoostType_None = 0,
  k_EDOTAMMRBoostType_Leader = 1,
  k_EDOTAMMRBoostType_Follower = 2
};
bool EDOTAMMRBoostType_IsValid(int value);
constexpr EDOTAMMRBoostType EDOTAMMRBoostType_MIN = k_EDOTAMMRBoostType_None;
constexpr EDOTAMMRBoostType EDOTAMMRBoostType_MAX = k_EDOTAMMRBoostType_Follower;
constexpr int EDOTAMMRBoostType_ARRAYSIZE = EDOTAMMRBoostType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAMMRBoostType_descriptor();
template<typename T>
inline const std::string& EDOTAMMRBoostType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDOTAMMRBoostType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDOTAMMRBoostType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDOTAMMRBoostType_descriptor(), enum_t_value);
}
inline bool EDOTAMMRBoostType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDOTAMMRBoostType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDOTAMMRBoostType>(
    EDOTAMMRBoostType_descriptor(), name, value);
}
enum EEvent : int {
  EVENT_ID_NONE = 0,
  EVENT_ID_DIRETIDE = 1,
  EVENT_ID_SPRING_FESTIVAL = 2,
  EVENT_ID_FROSTIVUS_2013 = 3,
  EVENT_ID_COMPENDIUM_2014 = 4,
  EVENT_ID_NEXON_PC_BANG = 5,
  EVENT_ID_PWRD_DAC_2015 = 6,
  EVENT_ID_NEW_BLOOM_2015 = 7,
  EVENT_ID_INTERNATIONAL_2015 = 8,
  EVENT_ID_FALL_MAJOR_2015 = 9,
  EVENT_ID_ORACLE_PA = 10,
  EVENT_ID_NEW_BLOOM_2015_PREBEAST = 11,
  EVENT_ID_FROSTIVUS = 12,
  EVENT_ID_WINTER_MAJOR_2016 = 13,
  EVENT_ID_INTERNATIONAL_2016 = 14,
  EVENT_ID_FALL_MAJOR_2016 = 15,
  EVENT_ID_WINTER_MAJOR_2017 = 16,
  EVENT_ID_NEW_BLOOM_2017 = 17,
  EVENT_ID_INTERNATIONAL_2017 = 18,
  EVENT_ID_PLUS_SUBSCRIPTION = 19,
  EVENT_ID_SINGLES_DAY_2017 = 20,
  EVENT_ID_FROSTIVUS_2017 = 21,
  EVENT_ID_INTERNATIONAL_2018 = 22,
  EVENT_ID_FROSTIVUS_2018 = 23,
  EVENT_ID_NEW_BLOOM_2019 = 24,
  EVENT_ID_INTERNATIONAL_2019 = 25,
  EVENT_ID_NEW_PLAYER_EXPERIENCE = 26,
  EVENT_ID_FROSTIVUS_2019 = 27,
  EVENT_ID_COUNT = 28
};
bool EEvent_IsValid(int value);
constexpr EEvent EEvent_MIN = EVENT_ID_NONE;
constexpr EEvent EEvent_MAX = EVENT_ID_COUNT;
constexpr int EEvent_ARRAYSIZE = EEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEvent_descriptor();
template<typename T>
inline const std::string& EEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EEvent_descriptor(), enum_t_value);
}
inline bool EEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EEvent>(
    EEvent_descriptor(), name, value);
}
enum EMatchBehaviorScoreVariance : int {
  k_EMatchBehaviorScoreVariance_Invalid = 0,
  k_EMatchBehaviorScoreVariance_Low = 1,
  k_EMatchBehaviorScoreVariance_Medium = 2,
  k_EMatchBehaviorScoreVariance_High = 3
};
bool EMatchBehaviorScoreVariance_IsValid(int value);
constexpr EMatchBehaviorScoreVariance EMatchBehaviorScoreVariance_MIN = k_EMatchBehaviorScoreVariance_Invalid;
constexpr EMatchBehaviorScoreVariance EMatchBehaviorScoreVariance_MAX = k_EMatchBehaviorScoreVariance_High;
constexpr int EMatchBehaviorScoreVariance_ARRAYSIZE = EMatchBehaviorScoreVariance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor();
template<typename T>
inline const std::string& EMatchBehaviorScoreVariance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMatchBehaviorScoreVariance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMatchBehaviorScoreVariance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMatchBehaviorScoreVariance_descriptor(), enum_t_value);
}
inline bool EMatchBehaviorScoreVariance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMatchBehaviorScoreVariance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMatchBehaviorScoreVariance>(
    EMatchBehaviorScoreVariance_descriptor(), name, value);
}
// ===================================================================

class CMsgSOIDOwner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOIDOwner) */ {
 public:
  inline CMsgSOIDOwner() : CMsgSOIDOwner(nullptr) {}
  ~CMsgSOIDOwner() override;
  explicit constexpr CMsgSOIDOwner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOIDOwner(const CMsgSOIDOwner& from);
  CMsgSOIDOwner(CMsgSOIDOwner&& from) noexcept
    : CMsgSOIDOwner() {
    *this = ::std::move(from);
  }

  inline CMsgSOIDOwner& operator=(const CMsgSOIDOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOIDOwner& operator=(CMsgSOIDOwner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOIDOwner& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOIDOwner* internal_default_instance() {
    return reinterpret_cast<const CMsgSOIDOwner*>(
               &_CMsgSOIDOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgSOIDOwner& a, CMsgSOIDOwner& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOIDOwner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOIDOwner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOIDOwner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOIDOwner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOIDOwner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOIDOwner& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOIDOwner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOIDOwner";
  }
  protected:
  explicit CMsgSOIDOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional uint64 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOIDOwner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t id_;
  uint32_t type_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCWrapAndDeliverGift final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCWrapAndDeliverGift) */ {
 public:
  inline CMsgClientToGCWrapAndDeliverGift() : CMsgClientToGCWrapAndDeliverGift(nullptr) {}
  ~CMsgClientToGCWrapAndDeliverGift() override;
  explicit constexpr CMsgClientToGCWrapAndDeliverGift(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCWrapAndDeliverGift(const CMsgClientToGCWrapAndDeliverGift& from);
  CMsgClientToGCWrapAndDeliverGift(CMsgClientToGCWrapAndDeliverGift&& from) noexcept
    : CMsgClientToGCWrapAndDeliverGift() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCWrapAndDeliverGift& operator=(const CMsgClientToGCWrapAndDeliverGift& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCWrapAndDeliverGift& operator=(CMsgClientToGCWrapAndDeliverGift&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCWrapAndDeliverGift& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCWrapAndDeliverGift* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCWrapAndDeliverGift*>(
               &_CMsgClientToGCWrapAndDeliverGift_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientToGCWrapAndDeliverGift& a, CMsgClientToGCWrapAndDeliverGift& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCWrapAndDeliverGift* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCWrapAndDeliverGift* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCWrapAndDeliverGift* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCWrapAndDeliverGift>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCWrapAndDeliverGift& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCWrapAndDeliverGift& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCWrapAndDeliverGift* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCWrapAndDeliverGift";
  }
  protected:
  explicit CMsgClientToGCWrapAndDeliverGift(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGiftMessageFieldNumber = 3,
    kItemIdFieldNumber = 1,
    kGiveToAccountIdFieldNumber = 2,
  };
  // optional string gift_message = 3;
  bool has_gift_message() const;
  private:
  bool _internal_has_gift_message() const;
  public:
  void clear_gift_message();
  const std::string& gift_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gift_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gift_message();
  PROTOBUF_NODISCARD std::string* release_gift_message();
  void set_allocated_gift_message(std::string* gift_message);
  private:
  const std::string& _internal_gift_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gift_message(const std::string& value);
  std::string* _internal_mutable_gift_message();
  public:

  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 give_to_account_id = 2;
  bool has_give_to_account_id() const;
  private:
  bool _internal_has_give_to_account_id() const;
  public:
  void clear_give_to_account_id();
  uint32_t give_to_account_id() const;
  void set_give_to_account_id(uint32_t value);
  private:
  uint32_t _internal_give_to_account_id() const;
  void _internal_set_give_to_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCWrapAndDeliverGift)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gift_message_;
  uint64_t item_id_;
  uint32_t give_to_account_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSOSingleObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOSingleObject) */ {
 public:
  inline CMsgSOSingleObject() : CMsgSOSingleObject(nullptr) {}
  ~CMsgSOSingleObject() override;
  explicit constexpr CMsgSOSingleObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOSingleObject(const CMsgSOSingleObject& from);
  CMsgSOSingleObject(CMsgSOSingleObject&& from) noexcept
    : CMsgSOSingleObject() {
    *this = ::std::move(from);
  }

  inline CMsgSOSingleObject& operator=(const CMsgSOSingleObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOSingleObject& operator=(CMsgSOSingleObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOSingleObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOSingleObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSOSingleObject*>(
               &_CMsgSOSingleObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgSOSingleObject& a, CMsgSOSingleObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOSingleObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOSingleObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOSingleObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOSingleObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOSingleObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOSingleObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOSingleObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOSingleObject";
  }
  protected:
  explicit CMsgSOSingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 3,
    kOwnerSoidFieldNumber = 5,
    kVersionFieldNumber = 4,
    kTypeIdFieldNumber = 2,
    kServiceIdFieldNumber = 6,
  };
  // optional bytes object_data = 3;
  bool has_object_data() const;
  private:
  bool _internal_has_object_data() const;
  public:
  void clear_object_data();
  const std::string& object_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_data();
  PROTOBUF_NODISCARD std::string* release_object_data();
  void set_allocated_object_data(std::string* object_data);
  private:
  const std::string& _internal_object_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_data(const std::string& value);
  std::string* _internal_mutable_object_data();
  public:

  // optional .CMsgSOIDOwner owner_soid = 5;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_NODISCARD ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // optional int32 type_id = 2;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  int32_t type_id() const;
  void set_type_id(int32_t value);
  private:
  int32_t _internal_type_id() const;
  void _internal_set_type_id(int32_t value);
  public:

  // optional uint32 service_id = 6;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  uint32_t service_id() const;
  void set_service_id(uint32_t value);
  private:
  uint32_t _internal_service_id() const;
  void _internal_set_service_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOSingleObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_data_;
  ::CMsgSOIDOwner* owner_soid_;
  uint64_t version_;
  int32_t type_id_;
  uint32_t service_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgRecentMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRecentMatchInfo) */ {
 public:
  inline CMsgRecentMatchInfo() : CMsgRecentMatchInfo(nullptr) {}
  ~CMsgRecentMatchInfo() override;
  explicit constexpr CMsgRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRecentMatchInfo(const CMsgRecentMatchInfo& from);
  CMsgRecentMatchInfo(CMsgRecentMatchInfo&& from) noexcept
    : CMsgRecentMatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgRecentMatchInfo& operator=(const CMsgRecentMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRecentMatchInfo& operator=(CMsgRecentMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgRecentMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRecentMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgRecentMatchInfo*>(
               &_CMsgRecentMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgRecentMatchInfo& a, CMsgRecentMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRecentMatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRecentMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgRecentMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgRecentMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgRecentMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgRecentMatchInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRecentMatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRecentMatchInfo";
  }
  protected:
  explicit CMsgRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kGameModeFieldNumber = 2,
    kKillsFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kAssistsFieldNumber = 5,
    kDurationFieldNumber = 6,
    kPlayerSlotFieldNumber = 7,
    kMatchOutcomeFieldNumber = 8,
    kTimestampFieldNumber = 9,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional uint32 kills = 3;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 5;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 duration = 6;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 player_slot = 7;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  private:
  bool _internal_has_match_outcome() const;
  public:
  void clear_match_outcome();
  ::EMatchOutcome match_outcome() const;
  void set_match_outcome(::EMatchOutcome value);
  private:
  ::EMatchOutcome _internal_match_outcome() const;
  void _internal_set_match_outcome(::EMatchOutcome value);
  public:

  // optional uint32 timestamp = 9;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRecentMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t match_id_;
  int game_mode_;
  uint32_t kills_;
  uint32_t deaths_;
  uint32_t assists_;
  uint32_t duration_;
  uint32_t player_slot_;
  int match_outcome_;
  uint32_t timestamp_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCRequestSocialFeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCRequestSocialFeedResponse) */ {
 public:
  inline CMsgClientToGCRequestSocialFeedResponse() : CMsgClientToGCRequestSocialFeedResponse(nullptr) {}
  ~CMsgClientToGCRequestSocialFeedResponse() override;
  explicit constexpr CMsgClientToGCRequestSocialFeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCRequestSocialFeedResponse(const CMsgClientToGCRequestSocialFeedResponse& from);
  CMsgClientToGCRequestSocialFeedResponse(CMsgClientToGCRequestSocialFeedResponse&& from) noexcept
    : CMsgClientToGCRequestSocialFeedResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCRequestSocialFeedResponse& operator=(const CMsgClientToGCRequestSocialFeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCRequestSocialFeedResponse& operator=(CMsgClientToGCRequestSocialFeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCRequestSocialFeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCRequestSocialFeedResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCRequestSocialFeedResponse*>(
               &_CMsgClientToGCRequestSocialFeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientToGCRequestSocialFeedResponse& a, CMsgClientToGCRequestSocialFeedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCRequestSocialFeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCRequestSocialFeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCRequestSocialFeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCRequestSocialFeedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCRequestSocialFeedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCRequestSocialFeedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCRequestSocialFeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCRequestSocialFeedResponse";
  }
  protected:
  explicit CMsgClientToGCRequestSocialFeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnk1FieldNumber = 1,
    kUnk2FieldNumber = 2,
    kUnk3FieldNumber = 3,
  };
  // optional uint64 unk_1 = 1;
  bool has_unk_1() const;
  private:
  bool _internal_has_unk_1() const;
  public:
  void clear_unk_1();
  uint64_t unk_1() const;
  void set_unk_1(uint64_t value);
  private:
  uint64_t _internal_unk_1() const;
  void _internal_set_unk_1(uint64_t value);
  public:

  // optional uint64 unk_2 = 2;
  bool has_unk_2() const;
  private:
  bool _internal_has_unk_2() const;
  public:
  void clear_unk_2();
  uint64_t unk_2() const;
  void set_unk_2(uint64_t value);
  private:
  uint64_t _internal_unk_2() const;
  void _internal_set_unk_2(uint64_t value);
  public:

  // optional uint64 unk_3 = 3;
  bool has_unk_3() const;
  private:
  bool _internal_has_unk_3() const;
  public:
  void clear_unk_3();
  uint64_t unk_3() const;
  void set_unk_3(uint64_t value);
  private:
  uint64_t _internal_unk_3() const;
  void _internal_set_unk_3(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRequestSocialFeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t unk_1_;
  uint64_t unk_2_;
  uint64_t unk_3_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgBattleCupVictory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBattleCupVictory) */ {
 public:
  inline CMsgBattleCupVictory() : CMsgBattleCupVictory(nullptr) {}
  ~CMsgBattleCupVictory() override;
  explicit constexpr CMsgBattleCupVictory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBattleCupVictory(const CMsgBattleCupVictory& from);
  CMsgBattleCupVictory(CMsgBattleCupVictory&& from) noexcept
    : CMsgBattleCupVictory() {
    *this = ::std::move(from);
  }

  inline CMsgBattleCupVictory& operator=(const CMsgBattleCupVictory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBattleCupVictory& operator=(CMsgBattleCupVictory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBattleCupVictory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBattleCupVictory* internal_default_instance() {
    return reinterpret_cast<const CMsgBattleCupVictory*>(
               &_CMsgBattleCupVictory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgBattleCupVictory& a, CMsgBattleCupVictory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBattleCupVictory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBattleCupVictory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBattleCupVictory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBattleCupVictory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBattleCupVictory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBattleCupVictory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBattleCupVictory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBattleCupVictory";
  }
  protected:
  explicit CMsgBattleCupVictory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kWinDateFieldNumber = 2,
    kValidUntilFieldNumber = 3,
    kSkillLevelFieldNumber = 4,
    kTournamentIdFieldNumber = 5,
    kDivisionIdFieldNumber = 6,
    kTeamIdFieldNumber = 7,
    kStreakFieldNumber = 8,
    kTrophyIdFieldNumber = 9,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 win_date = 2;
  bool has_win_date() const;
  private:
  bool _internal_has_win_date() const;
  public:
  void clear_win_date();
  uint32_t win_date() const;
  void set_win_date(uint32_t value);
  private:
  uint32_t _internal_win_date() const;
  void _internal_set_win_date(uint32_t value);
  public:

  // optional uint32 valid_until = 3;
  bool has_valid_until() const;
  private:
  bool _internal_has_valid_until() const;
  public:
  void clear_valid_until();
  uint32_t valid_until() const;
  void set_valid_until(uint32_t value);
  private:
  uint32_t _internal_valid_until() const;
  void _internal_set_valid_until(uint32_t value);
  public:

  // optional uint32 skill_level = 4;
  bool has_skill_level() const;
  private:
  bool _internal_has_skill_level() const;
  public:
  void clear_skill_level();
  uint32_t skill_level() const;
  void set_skill_level(uint32_t value);
  private:
  uint32_t _internal_skill_level() const;
  void _internal_set_skill_level(uint32_t value);
  public:

  // optional uint32 tournament_id = 5;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 division_id = 6;
  bool has_division_id() const;
  private:
  bool _internal_has_division_id() const;
  public:
  void clear_division_id();
  uint32_t division_id() const;
  void set_division_id(uint32_t value);
  private:
  uint32_t _internal_division_id() const;
  void _internal_set_division_id(uint32_t value);
  public:

  // optional uint32 team_id = 7;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 streak = 8;
  bool has_streak() const;
  private:
  bool _internal_has_streak() const;
  public:
  void clear_streak();
  uint32_t streak() const;
  void set_streak(uint32_t value);
  private:
  uint32_t _internal_streak() const;
  void _internal_set_streak(uint32_t value);
  public:

  // optional uint32 trophy_id = 9;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBattleCupVictory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t account_id_;
  uint32_t win_date_;
  uint32_t valid_until_;
  uint32_t skill_level_;
  uint32_t tournament_id_;
  uint32_t division_id_;
  uint32_t team_id_;
  uint32_t streak_;
  uint32_t trophy_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCSetItemStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCSetItemStyle) */ {
 public:
  inline CMsgClientToGCSetItemStyle() : CMsgClientToGCSetItemStyle(nullptr) {}
  ~CMsgClientToGCSetItemStyle() override;
  explicit constexpr CMsgClientToGCSetItemStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCSetItemStyle(const CMsgClientToGCSetItemStyle& from);
  CMsgClientToGCSetItemStyle(CMsgClientToGCSetItemStyle&& from) noexcept
    : CMsgClientToGCSetItemStyle() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCSetItemStyle& operator=(const CMsgClientToGCSetItemStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCSetItemStyle& operator=(CMsgClientToGCSetItemStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCSetItemStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCSetItemStyle* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCSetItemStyle*>(
               &_CMsgClientToGCSetItemStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientToGCSetItemStyle& a, CMsgClientToGCSetItemStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCSetItemStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCSetItemStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCSetItemStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCSetItemStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCSetItemStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCSetItemStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCSetItemStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCSetItemStyle";
  }
  protected:
  explicit CMsgClientToGCSetItemStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kStyleIndexFieldNumber = 2,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 style_index = 2;
  bool has_style_index() const;
  private:
  bool _internal_has_style_index() const;
  public:
  void clear_style_index();
  uint32_t style_index() const;
  void set_style_index(uint32_t value);
  private:
  uint32_t _internal_style_index() const;
  void _internal_set_style_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCSetItemStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t item_id_;
  uint32_t style_index_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Trophy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Trophy) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Trophy() : CMsgDOTAProfileCard_Slot_Trophy(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Trophy() override;
  explicit constexpr CMsgDOTAProfileCard_Slot_Trophy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from);
  CMsgDOTAProfileCard_Slot_Trophy(CMsgDOTAProfileCard_Slot_Trophy&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Trophy() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(const CMsgDOTAProfileCard_Slot_Trophy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Trophy& operator=(CMsgDOTAProfileCard_Slot_Trophy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Trophy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Trophy* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Trophy*>(
               &_CMsgDOTAProfileCard_Slot_Trophy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgDOTAProfileCard_Slot_Trophy& a, CMsgDOTAProfileCard_Slot_Trophy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Trophy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Trophy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Trophy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Trophy";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyIdFieldNumber = 1,
    kTrophyScoreFieldNumber = 2,
  };
  // optional uint32 trophy_id = 1;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // optional uint32 trophy_score = 2;
  bool has_trophy_score() const;
  private:
  bool _internal_has_trophy_score() const;
  public:
  void clear_trophy_score();
  uint32_t trophy_score() const;
  void set_trophy_score(uint32_t value);
  private:
  uint32_t _internal_trophy_score() const;
  void _internal_set_trophy_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Trophy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t trophy_id_;
  uint32_t trophy_score_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Stat) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Stat() : CMsgDOTAProfileCard_Slot_Stat(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Stat() override;
  explicit constexpr CMsgDOTAProfileCard_Slot_Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from);
  CMsgDOTAProfileCard_Slot_Stat(CMsgDOTAProfileCard_Slot_Stat&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Stat() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Stat& operator=(const CMsgDOTAProfileCard_Slot_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Stat& operator=(CMsgDOTAProfileCard_Slot_Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Stat* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Stat*>(
               &_CMsgDOTAProfileCard_Slot_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDOTAProfileCard_Slot_Stat& a, CMsgDOTAProfileCard_Slot_Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Stat";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatScoreFieldNumber = 2,
    kStatIdFieldNumber = 1,
  };
  // optional uint32 stat_score = 2;
  bool has_stat_score() const;
  private:
  bool _internal_has_stat_score() const;
  public:
  void clear_stat_score();
  uint32_t stat_score() const;
  void set_stat_score(uint32_t value);
  private:
  uint32_t _internal_stat_score() const;
  void _internal_set_stat_score(uint32_t value);
  public:

  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
  bool has_stat_id() const;
  private:
  bool _internal_has_stat_id() const;
  public:
  void clear_stat_id();
  ::CMsgDOTAProfileCard_EStatID stat_id() const;
  void set_stat_id(::CMsgDOTAProfileCard_EStatID value);
  private:
  ::CMsgDOTAProfileCard_EStatID _internal_stat_id() const;
  void _internal_set_stat_id(::CMsgDOTAProfileCard_EStatID value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t stat_score_;
  int stat_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Item) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Item() : CMsgDOTAProfileCard_Slot_Item(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Item() override;
  explicit constexpr CMsgDOTAProfileCard_Slot_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from);
  CMsgDOTAProfileCard_Slot_Item(CMsgDOTAProfileCard_Slot_Item&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Item() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Item& operator=(const CMsgDOTAProfileCard_Slot_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Item& operator=(CMsgDOTAProfileCard_Slot_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Item* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Item*>(
               &_CMsgDOTAProfileCard_Slot_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgDOTAProfileCard_Slot_Item& a, CMsgDOTAProfileCard_Slot_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Item";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedItemFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // optional bytes serialized_item = 1;
  bool has_serialized_item() const;
  private:
  bool _internal_has_serialized_item() const;
  public:
  void clear_serialized_item();
  const std::string& serialized_item() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_item(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_item();
  PROTOBUF_NODISCARD std::string* release_serialized_item();
  void set_allocated_serialized_item(std::string* serialized_item);
  private:
  const std::string& _internal_serialized_item() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_item(const std::string& value);
  std::string* _internal_mutable_serialized_item();
  public:

  // optional uint64 item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_item_;
  uint64_t item_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Hero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Hero) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Hero() : CMsgDOTAProfileCard_Slot_Hero(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Hero() override;
  explicit constexpr CMsgDOTAProfileCard_Slot_Hero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from);
  CMsgDOTAProfileCard_Slot_Hero(CMsgDOTAProfileCard_Slot_Hero&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Hero() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Hero& operator=(const CMsgDOTAProfileCard_Slot_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Hero& operator=(CMsgDOTAProfileCard_Slot_Hero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Hero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Hero* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Hero*>(
               &_CMsgDOTAProfileCard_Slot_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgDOTAProfileCard_Slot_Hero& a, CMsgDOTAProfileCard_Slot_Hero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Hero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Hero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Hero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Hero";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kHeroWinsFieldNumber = 2,
    kHeroLossesFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 hero_wins = 2;
  bool has_hero_wins() const;
  private:
  bool _internal_has_hero_wins() const;
  public:
  void clear_hero_wins();
  uint32_t hero_wins() const;
  void set_hero_wins(uint32_t value);
  private:
  uint32_t _internal_hero_wins() const;
  void _internal_set_hero_wins(uint32_t value);
  public:

  // optional uint32 hero_losses = 3;
  bool has_hero_losses() const;
  private:
  bool _internal_has_hero_losses() const;
  public:
  void clear_hero_losses();
  uint32_t hero_losses() const;
  void set_hero_losses(uint32_t value);
  private:
  uint32_t _internal_hero_losses() const;
  void _internal_set_hero_losses(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Hero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t hero_id_;
  uint32_t hero_wins_;
  uint32_t hero_losses_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Emoticon) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Emoticon() : CMsgDOTAProfileCard_Slot_Emoticon(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Emoticon() override;
  explicit constexpr CMsgDOTAProfileCard_Slot_Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  CMsgDOTAProfileCard_Slot_Emoticon(CMsgDOTAProfileCard_Slot_Emoticon&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Emoticon() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Emoticon& operator=(CMsgDOTAProfileCard_Slot_Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Emoticon*>(
               &_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgDOTAProfileCard_Slot_Emoticon& a, CMsgDOTAProfileCard_Slot_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Emoticon";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmoticonIdFieldNumber = 1,
  };
  // optional uint32 emoticon_id = 1;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t emoticon_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot.Team) */ {
 public:
  inline CMsgDOTAProfileCard_Slot_Team() : CMsgDOTAProfileCard_Slot_Team(nullptr) {}
  ~CMsgDOTAProfileCard_Slot_Team() override;
  explicit constexpr CMsgDOTAProfileCard_Slot_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from);
  CMsgDOTAProfileCard_Slot_Team(CMsgDOTAProfileCard_Slot_Team&& from) noexcept
    : CMsgDOTAProfileCard_Slot_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot_Team& operator=(const CMsgDOTAProfileCard_Slot_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot_Team& operator=(CMsgDOTAProfileCard_Slot_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot_Team*>(
               &_CMsgDOTAProfileCard_Slot_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgDOTAProfileCard_Slot_Team& a, CMsgDOTAProfileCard_Slot_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot_Team& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot.Team";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
  };
  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t team_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard_Slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard.Slot) */ {
 public:
  inline CMsgDOTAProfileCard_Slot() : CMsgDOTAProfileCard_Slot(nullptr) {}
  ~CMsgDOTAProfileCard_Slot() override;
  explicit constexpr CMsgDOTAProfileCard_Slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from);
  CMsgDOTAProfileCard_Slot(CMsgDOTAProfileCard_Slot&& from) noexcept
    : CMsgDOTAProfileCard_Slot() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard_Slot& operator=(const CMsgDOTAProfileCard_Slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard_Slot& operator=(CMsgDOTAProfileCard_Slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard_Slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard_Slot* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard_Slot*>(
               &_CMsgDOTAProfileCard_Slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgDOTAProfileCard_Slot& a, CMsgDOTAProfileCard_Slot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard_Slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard_Slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard_Slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard_Slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard_Slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard_Slot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard_Slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard.Slot";
  }
  protected:
  explicit CMsgDOTAProfileCard_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot_Trophy Trophy;
  typedef CMsgDOTAProfileCard_Slot_Stat Stat;
  typedef CMsgDOTAProfileCard_Slot_Item Item;
  typedef CMsgDOTAProfileCard_Slot_Hero Hero;
  typedef CMsgDOTAProfileCard_Slot_Emoticon Emoticon;
  typedef CMsgDOTAProfileCard_Slot_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyFieldNumber = 2,
    kStatFieldNumber = 3,
    kItemFieldNumber = 4,
    kHeroFieldNumber = 5,
    kEmoticonFieldNumber = 6,
    kTeamFieldNumber = 7,
    kSlotIdFieldNumber = 1,
  };
  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  bool has_trophy() const;
  private:
  bool _internal_has_trophy() const;
  public:
  void clear_trophy();
  const ::CMsgDOTAProfileCard_Slot_Trophy& trophy() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Trophy* release_trophy();
  ::CMsgDOTAProfileCard_Slot_Trophy* mutable_trophy();
  void set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy);
  private:
  const ::CMsgDOTAProfileCard_Slot_Trophy& _internal_trophy() const;
  ::CMsgDOTAProfileCard_Slot_Trophy* _internal_mutable_trophy();
  public:
  void unsafe_arena_set_allocated_trophy(
      ::CMsgDOTAProfileCard_Slot_Trophy* trophy);
  ::CMsgDOTAProfileCard_Slot_Trophy* unsafe_arena_release_trophy();

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::CMsgDOTAProfileCard_Slot_Stat& stat() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Stat* release_stat();
  ::CMsgDOTAProfileCard_Slot_Stat* mutable_stat();
  void set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat);
  private:
  const ::CMsgDOTAProfileCard_Slot_Stat& _internal_stat() const;
  ::CMsgDOTAProfileCard_Slot_Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::CMsgDOTAProfileCard_Slot_Stat* stat);
  ::CMsgDOTAProfileCard_Slot_Stat* unsafe_arena_release_stat();

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::CMsgDOTAProfileCard_Slot_Item& item() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Item* release_item();
  ::CMsgDOTAProfileCard_Slot_Item* mutable_item();
  void set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item);
  private:
  const ::CMsgDOTAProfileCard_Slot_Item& _internal_item() const;
  ::CMsgDOTAProfileCard_Slot_Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::CMsgDOTAProfileCard_Slot_Item* item);
  ::CMsgDOTAProfileCard_Slot_Item* unsafe_arena_release_item();

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  const ::CMsgDOTAProfileCard_Slot_Hero& hero() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Hero* release_hero();
  ::CMsgDOTAProfileCard_Slot_Hero* mutable_hero();
  void set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero);
  private:
  const ::CMsgDOTAProfileCard_Slot_Hero& _internal_hero() const;
  ::CMsgDOTAProfileCard_Slot_Hero* _internal_mutable_hero();
  public:
  void unsafe_arena_set_allocated_hero(
      ::CMsgDOTAProfileCard_Slot_Hero* hero);
  ::CMsgDOTAProfileCard_Slot_Hero* unsafe_arena_release_hero();

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  bool has_emoticon() const;
  private:
  bool _internal_has_emoticon() const;
  public:
  void clear_emoticon();
  const ::CMsgDOTAProfileCard_Slot_Emoticon& emoticon() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Emoticon* release_emoticon();
  ::CMsgDOTAProfileCard_Slot_Emoticon* mutable_emoticon();
  void set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);
  private:
  const ::CMsgDOTAProfileCard_Slot_Emoticon& _internal_emoticon() const;
  ::CMsgDOTAProfileCard_Slot_Emoticon* _internal_mutable_emoticon();
  public:
  void unsafe_arena_set_allocated_emoticon(
      ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon);
  ::CMsgDOTAProfileCard_Slot_Emoticon* unsafe_arena_release_emoticon();

  // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const ::CMsgDOTAProfileCard_Slot_Team& team() const;
  PROTOBUF_NODISCARD ::CMsgDOTAProfileCard_Slot_Team* release_team();
  ::CMsgDOTAProfileCard_Slot_Team* mutable_team();
  void set_allocated_team(::CMsgDOTAProfileCard_Slot_Team* team);
  private:
  const ::CMsgDOTAProfileCard_Slot_Team& _internal_team() const;
  ::CMsgDOTAProfileCard_Slot_Team* _internal_mutable_team();
  public:
  void unsafe_arena_set_allocated_team(
      ::CMsgDOTAProfileCard_Slot_Team* team);
  ::CMsgDOTAProfileCard_Slot_Team* unsafe_arena_release_team();

  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard.Slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgDOTAProfileCard_Slot_Trophy* trophy_;
  ::CMsgDOTAProfileCard_Slot_Stat* stat_;
  ::CMsgDOTAProfileCard_Slot_Item* item_;
  ::CMsgDOTAProfileCard_Slot_Hero* hero_;
  ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon_;
  ::CMsgDOTAProfileCard_Slot_Team* team_;
  uint32_t slot_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAProfileCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAProfileCard) */ {
 public:
  inline CMsgDOTAProfileCard() : CMsgDOTAProfileCard(nullptr) {}
  ~CMsgDOTAProfileCard() override;
  explicit constexpr CMsgDOTAProfileCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from);
  CMsgDOTAProfileCard(CMsgDOTAProfileCard&& from) noexcept
    : CMsgDOTAProfileCard() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAProfileCard& operator=(const CMsgDOTAProfileCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAProfileCard& operator=(CMsgDOTAProfileCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAProfileCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAProfileCard* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAProfileCard*>(
               &_CMsgDOTAProfileCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgDOTAProfileCard& a, CMsgDOTAProfileCard& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAProfileCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAProfileCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAProfileCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAProfileCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAProfileCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgDOTAProfileCard& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAProfileCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAProfileCard";
  }
  protected:
  explicit CMsgDOTAProfileCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAProfileCard_Slot Slot;

  typedef CMsgDOTAProfileCard_EStatID EStatID;
  static constexpr EStatID k_eStat_Wins =
    CMsgDOTAProfileCard_EStatID_k_eStat_Wins;
  static constexpr EStatID k_eStat_Commends =
    CMsgDOTAProfileCard_EStatID_k_eStat_Commends;
  static constexpr EStatID k_eStat_GamesPlayed =
    CMsgDOTAProfileCard_EStatID_k_eStat_GamesPlayed;
  static constexpr EStatID k_eStat_FirstMatchDate =
    CMsgDOTAProfileCard_EStatID_k_eStat_FirstMatchDate;
  static constexpr EStatID k_eStat_PreviousSeasonRank =
    CMsgDOTAProfileCard_EStatID_k_eStat_PreviousSeasonRank;
  static constexpr EStatID k_eStat_GamesMVP =
    CMsgDOTAProfileCard_EStatID_k_eStat_GamesMVP;
  static inline bool EStatID_IsValid(int value) {
    return CMsgDOTAProfileCard_EStatID_IsValid(value);
  }
  static constexpr EStatID EStatID_MIN =
    CMsgDOTAProfileCard_EStatID_EStatID_MIN;
  static constexpr EStatID EStatID_MAX =
    CMsgDOTAProfileCard_EStatID_EStatID_MAX;
  static constexpr int EStatID_ARRAYSIZE =
    CMsgDOTAProfileCard_EStatID_EStatID_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EStatID_descriptor() {
    return CMsgDOTAProfileCard_EStatID_descriptor();
  }
  template<typename T>
  static inline const std::string& EStatID_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EStatID>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EStatID_Name.");
    return CMsgDOTAProfileCard_EStatID_Name(enum_t_value);
  }
  static inline bool EStatID_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EStatID* value) {
    return CMsgDOTAProfileCard_EStatID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 3,
    kRecentBattleCupVictoryFieldNumber = 7,
    kAccountIdFieldNumber = 1,
    kBadgePointsFieldNumber = 4,
    kEventPointsFieldNumber = 5,
    kEventIdFieldNumber = 6,
    kRankTierFieldNumber = 8,
    kLeaderboardRankFieldNumber = 9,
    kIsPlusSubscriberFieldNumber = 10,
    kPlusOriginalStartDateFieldNumber = 11,
    kRankTierScoreFieldNumber = 12,
    kPreviousRankTierFieldNumber = 13,
    kRankTierMmrTypeFieldNumber = 14,
    kLeaderboardRankCoreFieldNumber = 17,
    kRankTierPeakFieldNumber = 21,
    kTitleFieldNumber = 23,
    kFavoriteTeamPackedFieldNumber = 24,
  };
  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::CMsgDOTAProfileCard_Slot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
      mutable_slots();
  private:
  const ::CMsgDOTAProfileCard_Slot& _internal_slots(int index) const;
  ::CMsgDOTAProfileCard_Slot* _internal_add_slots();
  public:
  const ::CMsgDOTAProfileCard_Slot& slots(int index) const;
  ::CMsgDOTAProfileCard_Slot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
      slots() const;

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  bool has_recent_battle_cup_victory() const;
  private:
  bool _internal_has_recent_battle_cup_victory() const;
  public:
  void clear_recent_battle_cup_victory();
  const ::CMsgBattleCupVictory& recent_battle_cup_victory() const;
  PROTOBUF_NODISCARD ::CMsgBattleCupVictory* release_recent_battle_cup_victory();
  ::CMsgBattleCupVictory* mutable_recent_battle_cup_victory();
  void set_allocated_recent_battle_cup_victory(::CMsgBattleCupVictory* recent_battle_cup_victory);
  private:
  const ::CMsgBattleCupVictory& _internal_recent_battle_cup_victory() const;
  ::CMsgBattleCupVictory* _internal_mutable_recent_battle_cup_victory();
  public:
  void unsafe_arena_set_allocated_recent_battle_cup_victory(
      ::CMsgBattleCupVictory* recent_battle_cup_victory);
  ::CMsgBattleCupVictory* unsafe_arena_release_recent_battle_cup_victory();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 badge_points = 4;
  bool has_badge_points() const;
  private:
  bool _internal_has_badge_points() const;
  public:
  void clear_badge_points();
  uint32_t badge_points() const;
  void set_badge_points(uint32_t value);
  private:
  uint32_t _internal_badge_points() const;
  void _internal_set_badge_points(uint32_t value);
  public:

  // optional uint32 event_points = 5;
  bool has_event_points() const;
  private:
  bool _internal_has_event_points() const;
  public:
  void clear_event_points();
  uint32_t event_points() const;
  void set_event_points(uint32_t value);
  private:
  uint32_t _internal_event_points() const;
  void _internal_set_event_points(uint32_t value);
  public:

  // optional uint32 event_id = 6;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 rank_tier = 8;
  bool has_rank_tier() const;
  private:
  bool _internal_has_rank_tier() const;
  public:
  void clear_rank_tier();
  uint32_t rank_tier() const;
  void set_rank_tier(uint32_t value);
  private:
  uint32_t _internal_rank_tier() const;
  void _internal_set_rank_tier(uint32_t value);
  public:

  // optional uint32 leaderboard_rank = 9;
  bool has_leaderboard_rank() const;
  private:
  bool _internal_has_leaderboard_rank() const;
  public:
  void clear_leaderboard_rank();
  uint32_t leaderboard_rank() const;
  void set_leaderboard_rank(uint32_t value);
  private:
  uint32_t _internal_leaderboard_rank() const;
  void _internal_set_leaderboard_rank(uint32_t value);
  public:

  // optional bool is_plus_subscriber = 10;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional uint32 plus_original_start_date = 11;
  bool has_plus_original_start_date() const;
  private:
  bool _internal_has_plus_original_start_date() const;
  public:
  void clear_plus_original_start_date();
  uint32_t plus_original_start_date() const;
  void set_plus_original_start_date(uint32_t value);
  private:
  uint32_t _internal_plus_original_start_date() const;
  void _internal_set_plus_original_start_date(uint32_t value);
  public:

  // optional uint32 rank_tier_score = 12;
  bool has_rank_tier_score() const;
  private:
  bool _internal_has_rank_tier_score() const;
  public:
  void clear_rank_tier_score();
  uint32_t rank_tier_score() const;
  void set_rank_tier_score(uint32_t value);
  private:
  uint32_t _internal_rank_tier_score() const;
  void _internal_set_rank_tier_score(uint32_t value);
  public:

  // optional uint32 previous_rank_tier = 13;
  bool has_previous_rank_tier() const;
  private:
  bool _internal_has_previous_rank_tier() const;
  public:
  void clear_previous_rank_tier();
  uint32_t previous_rank_tier() const;
  void set_previous_rank_tier(uint32_t value);
  private:
  uint32_t _internal_previous_rank_tier() const;
  void _internal_set_previous_rank_tier(uint32_t value);
  public:

  // optional uint32 rank_tier_mmr_type = 14;
  bool has_rank_tier_mmr_type() const;
  private:
  bool _internal_has_rank_tier_mmr_type() const;
  public:
  void clear_rank_tier_mmr_type();
  uint32_t rank_tier_mmr_type() const;
  void set_rank_tier_mmr_type(uint32_t value);
  private:
  uint32_t _internal_rank_tier_mmr_type() const;
  void _internal_set_rank_tier_mmr_type(uint32_t value);
  public:

  // optional uint32 leaderboard_rank_core = 17;
  bool has_leaderboard_rank_core() const;
  private:
  bool _internal_has_leaderboard_rank_core() const;
  public:
  void clear_leaderboard_rank_core();
  uint32_t leaderboard_rank_core() const;
  void set_leaderboard_rank_core(uint32_t value);
  private:
  uint32_t _internal_leaderboard_rank_core() const;
  void _internal_set_leaderboard_rank_core(uint32_t value);
  public:

  // optional uint32 rank_tier_peak = 21;
  bool has_rank_tier_peak() const;
  private:
  bool _internal_has_rank_tier_peak() const;
  public:
  void clear_rank_tier_peak();
  uint32_t rank_tier_peak() const;
  void set_rank_tier_peak(uint32_t value);
  private:
  uint32_t _internal_rank_tier_peak() const;
  void _internal_set_rank_tier_peak(uint32_t value);
  public:

  // optional uint32 title = 23;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  uint32_t title() const;
  void set_title(uint32_t value);
  private:
  uint32_t _internal_title() const;
  void _internal_set_title(uint32_t value);
  public:

  // optional uint64 favorite_team_packed = 24;
  bool has_favorite_team_packed() const;
  private:
  bool _internal_has_favorite_team_packed() const;
  public:
  void clear_favorite_team_packed();
  uint64_t favorite_team_packed() const;
  void set_favorite_team_packed(uint64_t value);
  private:
  uint64_t _internal_favorite_team_packed() const;
  void _internal_set_favorite_team_packed(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAProfileCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot > slots_;
  ::CMsgBattleCupVictory* recent_battle_cup_victory_;
  uint32_t account_id_;
  uint32_t badge_points_;
  uint32_t event_points_;
  uint32_t event_id_;
  uint32_t rank_tier_;
  uint32_t leaderboard_rank_;
  bool is_plus_subscriber_;
  uint32_t plus_original_start_date_;
  uint32_t rank_tier_score_;
  uint32_t previous_rank_tier_;
  uint32_t rank_tier_mmr_type_;
  uint32_t leaderboard_rank_core_;
  uint32_t rank_tier_peak_;
  uint32_t title_;
  uint64_t favorite_team_packed_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSuccessfulHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSuccessfulHero) */ {
 public:
  inline CMsgSuccessfulHero() : CMsgSuccessfulHero(nullptr) {}
  ~CMsgSuccessfulHero() override;
  explicit constexpr CMsgSuccessfulHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSuccessfulHero(const CMsgSuccessfulHero& from);
  CMsgSuccessfulHero(CMsgSuccessfulHero&& from) noexcept
    : CMsgSuccessfulHero() {
    *this = ::std::move(from);
  }

  inline CMsgSuccessfulHero& operator=(const CMsgSuccessfulHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSuccessfulHero& operator=(CMsgSuccessfulHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSuccessfulHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSuccessfulHero* internal_default_instance() {
    return reinterpret_cast<const CMsgSuccessfulHero*>(
               &_CMsgSuccessfulHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgSuccessfulHero& a, CMsgSuccessfulHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSuccessfulHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSuccessfulHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSuccessfulHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSuccessfulHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSuccessfulHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSuccessfulHero& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSuccessfulHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSuccessfulHero";
  }
  protected:
  explicit CMsgSuccessfulHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kWinPercentFieldNumber = 2,
    kLongestStreakFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional float win_percent = 2;
  bool has_win_percent() const;
  private:
  bool _internal_has_win_percent() const;
  public:
  void clear_win_percent();
  float win_percent() const;
  void set_win_percent(float value);
  private:
  float _internal_win_percent() const;
  void _internal_set_win_percent(float value);
  public:

  // optional uint32 longest_streak = 3;
  bool has_longest_streak() const;
  private:
  bool _internal_has_longest_streak() const;
  public:
  void clear_longest_streak();
  uint32_t longest_streak() const;
  void set_longest_streak(uint32_t value);
  private:
  uint32_t _internal_longest_streak() const;
  void _internal_set_longest_streak(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSuccessfulHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t hero_id_;
  float win_percent_;
  uint32_t longest_streak_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetAllHeroProgressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetAllHeroProgressResponse) */ {
 public:
  inline CMsgClientToGCGetAllHeroProgressResponse() : CMsgClientToGCGetAllHeroProgressResponse(nullptr) {}
  ~CMsgClientToGCGetAllHeroProgressResponse() override;
  explicit constexpr CMsgClientToGCGetAllHeroProgressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetAllHeroProgressResponse(const CMsgClientToGCGetAllHeroProgressResponse& from);
  CMsgClientToGCGetAllHeroProgressResponse(CMsgClientToGCGetAllHeroProgressResponse&& from) noexcept
    : CMsgClientToGCGetAllHeroProgressResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetAllHeroProgressResponse& operator=(const CMsgClientToGCGetAllHeroProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetAllHeroProgressResponse& operator=(CMsgClientToGCGetAllHeroProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetAllHeroProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetAllHeroProgressResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetAllHeroProgressResponse*>(
               &_CMsgClientToGCGetAllHeroProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgClientToGCGetAllHeroProgressResponse& a, CMsgClientToGCGetAllHeroProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetAllHeroProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetAllHeroProgressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetAllHeroProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetAllHeroProgressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetAllHeroProgressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCGetAllHeroProgressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetAllHeroProgressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetAllHeroProgressResponse";
  }
  protected:
  explicit CMsgClientToGCGetAllHeroProgressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileNameFieldNumber = 19,
    kAccountIdFieldNumber = 1,
    kCurrHeroIdFieldNumber = 2,
    kLapsCompletedFieldNumber = 3,
    kCurrHeroGamesFieldNumber = 4,
    kCurrLapTimeStartedFieldNumber = 5,
    kCurrLapGamesFieldNumber = 6,
    kBestLapGamesFieldNumber = 7,
    kBestLapTimeFieldNumber = 8,
    kLapHeroesCompletedFieldNumber = 9,
    kLapHeroesRemainingFieldNumber = 10,
    kNextHeroIdFieldNumber = 11,
    kPrevHeroIdFieldNumber = 12,
    kPrevHeroGamesFieldNumber = 13,
    kPrevAvgTriesFieldNumber = 14,
    kCurrAvgTriesFieldNumber = 15,
    kNextAvgTriesFieldNumber = 16,
    kFullLapAvgTriesFieldNumber = 17,
    kCurrLapAvgTriesFieldNumber = 18,
    kStartHeroIdFieldNumber = 20,
  };
  // optional string profile_name = 19;
  bool has_profile_name() const;
  private:
  bool _internal_has_profile_name() const;
  public:
  void clear_profile_name();
  const std::string& profile_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_name();
  PROTOBUF_NODISCARD std::string* release_profile_name();
  void set_allocated_profile_name(std::string* profile_name);
  private:
  const std::string& _internal_profile_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_name(const std::string& value);
  std::string* _internal_mutable_profile_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 curr_hero_id = 2;
  bool has_curr_hero_id() const;
  private:
  bool _internal_has_curr_hero_id() const;
  public:
  void clear_curr_hero_id();
  uint32_t curr_hero_id() const;
  void set_curr_hero_id(uint32_t value);
  private:
  uint32_t _internal_curr_hero_id() const;
  void _internal_set_curr_hero_id(uint32_t value);
  public:

  // optional uint32 laps_completed = 3;
  bool has_laps_completed() const;
  private:
  bool _internal_has_laps_completed() const;
  public:
  void clear_laps_completed();
  uint32_t laps_completed() const;
  void set_laps_completed(uint32_t value);
  private:
  uint32_t _internal_laps_completed() const;
  void _internal_set_laps_completed(uint32_t value);
  public:

  // optional uint32 curr_hero_games = 4;
  bool has_curr_hero_games() const;
  private:
  bool _internal_has_curr_hero_games() const;
  public:
  void clear_curr_hero_games();
  uint32_t curr_hero_games() const;
  void set_curr_hero_games(uint32_t value);
  private:
  uint32_t _internal_curr_hero_games() const;
  void _internal_set_curr_hero_games(uint32_t value);
  public:

  // optional uint32 curr_lap_time_started = 5;
  bool has_curr_lap_time_started() const;
  private:
  bool _internal_has_curr_lap_time_started() const;
  public:
  void clear_curr_lap_time_started();
  uint32_t curr_lap_time_started() const;
  void set_curr_lap_time_started(uint32_t value);
  private:
  uint32_t _internal_curr_lap_time_started() const;
  void _internal_set_curr_lap_time_started(uint32_t value);
  public:

  // optional uint32 curr_lap_games = 6;
  bool has_curr_lap_games() const;
  private:
  bool _internal_has_curr_lap_games() const;
  public:
  void clear_curr_lap_games();
  uint32_t curr_lap_games() const;
  void set_curr_lap_games(uint32_t value);
  private:
  uint32_t _internal_curr_lap_games() const;
  void _internal_set_curr_lap_games(uint32_t value);
  public:

  // optional uint32 best_lap_games = 7;
  bool has_best_lap_games() const;
  private:
  bool _internal_has_best_lap_games() const;
  public:
  void clear_best_lap_games();
  uint32_t best_lap_games() const;
  void set_best_lap_games(uint32_t value);
  private:
  uint32_t _internal_best_lap_games() const;
  void _internal_set_best_lap_games(uint32_t value);
  public:

  // optional uint32 best_lap_time = 8;
  bool has_best_lap_time() const;
  private:
  bool _internal_has_best_lap_time() const;
  public:
  void clear_best_lap_time();
  uint32_t best_lap_time() const;
  void set_best_lap_time(uint32_t value);
  private:
  uint32_t _internal_best_lap_time() const;
  void _internal_set_best_lap_time(uint32_t value);
  public:

  // optional uint32 lap_heroes_completed = 9;
  bool has_lap_heroes_completed() const;
  private:
  bool _internal_has_lap_heroes_completed() const;
  public:
  void clear_lap_heroes_completed();
  uint32_t lap_heroes_completed() const;
  void set_lap_heroes_completed(uint32_t value);
  private:
  uint32_t _internal_lap_heroes_completed() const;
  void _internal_set_lap_heroes_completed(uint32_t value);
  public:

  // optional uint32 lap_heroes_remaining = 10;
  bool has_lap_heroes_remaining() const;
  private:
  bool _internal_has_lap_heroes_remaining() const;
  public:
  void clear_lap_heroes_remaining();
  uint32_t lap_heroes_remaining() const;
  void set_lap_heroes_remaining(uint32_t value);
  private:
  uint32_t _internal_lap_heroes_remaining() const;
  void _internal_set_lap_heroes_remaining(uint32_t value);
  public:

  // optional uint32 next_hero_id = 11;
  bool has_next_hero_id() const;
  private:
  bool _internal_has_next_hero_id() const;
  public:
  void clear_next_hero_id();
  uint32_t next_hero_id() const;
  void set_next_hero_id(uint32_t value);
  private:
  uint32_t _internal_next_hero_id() const;
  void _internal_set_next_hero_id(uint32_t value);
  public:

  // optional uint32 prev_hero_id = 12;
  bool has_prev_hero_id() const;
  private:
  bool _internal_has_prev_hero_id() const;
  public:
  void clear_prev_hero_id();
  uint32_t prev_hero_id() const;
  void set_prev_hero_id(uint32_t value);
  private:
  uint32_t _internal_prev_hero_id() const;
  void _internal_set_prev_hero_id(uint32_t value);
  public:

  // optional uint32 prev_hero_games = 13;
  bool has_prev_hero_games() const;
  private:
  bool _internal_has_prev_hero_games() const;
  public:
  void clear_prev_hero_games();
  uint32_t prev_hero_games() const;
  void set_prev_hero_games(uint32_t value);
  private:
  uint32_t _internal_prev_hero_games() const;
  void _internal_set_prev_hero_games(uint32_t value);
  public:

  // optional float prev_avg_tries = 14;
  bool has_prev_avg_tries() const;
  private:
  bool _internal_has_prev_avg_tries() const;
  public:
  void clear_prev_avg_tries();
  float prev_avg_tries() const;
  void set_prev_avg_tries(float value);
  private:
  float _internal_prev_avg_tries() const;
  void _internal_set_prev_avg_tries(float value);
  public:

  // optional float curr_avg_tries = 15;
  bool has_curr_avg_tries() const;
  private:
  bool _internal_has_curr_avg_tries() const;
  public:
  void clear_curr_avg_tries();
  float curr_avg_tries() const;
  void set_curr_avg_tries(float value);
  private:
  float _internal_curr_avg_tries() const;
  void _internal_set_curr_avg_tries(float value);
  public:

  // optional float next_avg_tries = 16;
  bool has_next_avg_tries() const;
  private:
  bool _internal_has_next_avg_tries() const;
  public:
  void clear_next_avg_tries();
  float next_avg_tries() const;
  void set_next_avg_tries(float value);
  private:
  float _internal_next_avg_tries() const;
  void _internal_set_next_avg_tries(float value);
  public:

  // optional float full_lap_avg_tries = 17;
  bool has_full_lap_avg_tries() const;
  private:
  bool _internal_has_full_lap_avg_tries() const;
  public:
  void clear_full_lap_avg_tries();
  float full_lap_avg_tries() const;
  void set_full_lap_avg_tries(float value);
  private:
  float _internal_full_lap_avg_tries() const;
  void _internal_set_full_lap_avg_tries(float value);
  public:

  // optional float curr_lap_avg_tries = 18;
  bool has_curr_lap_avg_tries() const;
  private:
  bool _internal_has_curr_lap_avg_tries() const;
  public:
  void clear_curr_lap_avg_tries();
  float curr_lap_avg_tries() const;
  void set_curr_lap_avg_tries(float value);
  private:
  float _internal_curr_lap_avg_tries() const;
  void _internal_set_curr_lap_avg_tries(float value);
  public:

  // optional uint32 start_hero_id = 20;
  bool has_start_hero_id() const;
  private:
  bool _internal_has_start_hero_id() const;
  public:
  void clear_start_hero_id();
  uint32_t start_hero_id() const;
  void set_start_hero_id(uint32_t value);
  private:
  uint32_t _internal_start_hero_id() const;
  void _internal_set_start_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetAllHeroProgressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_name_;
  uint32_t account_id_;
  uint32_t curr_hero_id_;
  uint32_t laps_completed_;
  uint32_t curr_hero_games_;
  uint32_t curr_lap_time_started_;
  uint32_t curr_lap_games_;
  uint32_t best_lap_games_;
  uint32_t best_lap_time_;
  uint32_t lap_heroes_completed_;
  uint32_t lap_heroes_remaining_;
  uint32_t next_hero_id_;
  uint32_t prev_hero_id_;
  uint32_t prev_hero_games_;
  float prev_avg_tries_;
  float curr_avg_tries_;
  float next_avg_tries_;
  float full_lap_avg_tries_;
  float curr_lap_avg_tries_;
  uint32_t start_hero_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgProfileResponse_FeaturedHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProfileResponse.FeaturedHero) */ {
 public:
  inline CMsgProfileResponse_FeaturedHero() : CMsgProfileResponse_FeaturedHero(nullptr) {}
  ~CMsgProfileResponse_FeaturedHero() override;
  explicit constexpr CMsgProfileResponse_FeaturedHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProfileResponse_FeaturedHero(const CMsgProfileResponse_FeaturedHero& from);
  CMsgProfileResponse_FeaturedHero(CMsgProfileResponse_FeaturedHero&& from) noexcept
    : CMsgProfileResponse_FeaturedHero() {
    *this = ::std::move(from);
  }

  inline CMsgProfileResponse_FeaturedHero& operator=(const CMsgProfileResponse_FeaturedHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProfileResponse_FeaturedHero& operator=(CMsgProfileResponse_FeaturedHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProfileResponse_FeaturedHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProfileResponse_FeaturedHero* internal_default_instance() {
    return reinterpret_cast<const CMsgProfileResponse_FeaturedHero*>(
               &_CMsgProfileResponse_FeaturedHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgProfileResponse_FeaturedHero& a, CMsgProfileResponse_FeaturedHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProfileResponse_FeaturedHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProfileResponse_FeaturedHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProfileResponse_FeaturedHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgProfileResponse_FeaturedHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProfileResponse_FeaturedHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgProfileResponse_FeaturedHero& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProfileResponse_FeaturedHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProfileResponse.FeaturedHero";
  }
  protected:
  explicit CMsgProfileResponse_FeaturedHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquippedEconItemsFieldNumber = 2,
    kPlusHeroRelicsItemFieldNumber = 5,
    kHeroIdFieldNumber = 1,
    kManuallySetFieldNumber = 3,
    kPlusHeroXpFieldNumber = 4,
  };
  // repeated .CSOEconItem equipped_econ_items = 2;
  int equipped_econ_items_size() const;
  private:
  int _internal_equipped_econ_items_size() const;
  public:
  void clear_equipped_econ_items();
  ::CSOEconItem* mutable_equipped_econ_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
      mutable_equipped_econ_items();
  private:
  const ::CSOEconItem& _internal_equipped_econ_items(int index) const;
  ::CSOEconItem* _internal_add_equipped_econ_items();
  public:
  const ::CSOEconItem& equipped_econ_items(int index) const;
  ::CSOEconItem* add_equipped_econ_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
      equipped_econ_items() const;

  // optional .CSOEconItem plus_hero_relics_item = 5;
  bool has_plus_hero_relics_item() const;
  private:
  bool _internal_has_plus_hero_relics_item() const;
  public:
  void clear_plus_hero_relics_item();
  const ::CSOEconItem& plus_hero_relics_item() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_plus_hero_relics_item();
  ::CSOEconItem* mutable_plus_hero_relics_item();
  void set_allocated_plus_hero_relics_item(::CSOEconItem* plus_hero_relics_item);
  private:
  const ::CSOEconItem& _internal_plus_hero_relics_item() const;
  ::CSOEconItem* _internal_mutable_plus_hero_relics_item();
  public:
  void unsafe_arena_set_allocated_plus_hero_relics_item(
      ::CSOEconItem* plus_hero_relics_item);
  ::CSOEconItem* unsafe_arena_release_plus_hero_relics_item();

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional bool manually_set = 3;
  bool has_manually_set() const;
  private:
  bool _internal_has_manually_set() const;
  public:
  void clear_manually_set();
  bool manually_set() const;
  void set_manually_set(bool value);
  private:
  bool _internal_manually_set() const;
  void _internal_set_manually_set(bool value);
  public:

  // optional uint32 plus_hero_xp = 4;
  bool has_plus_hero_xp() const;
  private:
  bool _internal_has_plus_hero_xp() const;
  public:
  void clear_plus_hero_xp();
  uint32_t plus_hero_xp() const;
  void set_plus_hero_xp(uint32_t value);
  private:
  uint32_t _internal_plus_hero_xp() const;
  void _internal_set_plus_hero_xp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProfileResponse.FeaturedHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem > equipped_econ_items_;
  ::CSOEconItem* plus_hero_relics_item_;
  uint32_t hero_id_;
  bool manually_set_;
  uint32_t plus_hero_xp_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgProfileResponse_MatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProfileResponse.MatchInfo) */ {
 public:
  inline CMsgProfileResponse_MatchInfo() : CMsgProfileResponse_MatchInfo(nullptr) {}
  ~CMsgProfileResponse_MatchInfo() override;
  explicit constexpr CMsgProfileResponse_MatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProfileResponse_MatchInfo(const CMsgProfileResponse_MatchInfo& from);
  CMsgProfileResponse_MatchInfo(CMsgProfileResponse_MatchInfo&& from) noexcept
    : CMsgProfileResponse_MatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgProfileResponse_MatchInfo& operator=(const CMsgProfileResponse_MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProfileResponse_MatchInfo& operator=(CMsgProfileResponse_MatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProfileResponse_MatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProfileResponse_MatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgProfileResponse_MatchInfo*>(
               &_CMsgProfileResponse_MatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgProfileResponse_MatchInfo& a, CMsgProfileResponse_MatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProfileResponse_MatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProfileResponse_MatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProfileResponse_MatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgProfileResponse_MatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProfileResponse_MatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgProfileResponse_MatchInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProfileResponse_MatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProfileResponse.MatchInfo";
  }
  protected:
  explicit CMsgProfileResponse_MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kMatchTimestampFieldNumber = 2,
    kPerformanceRatingFieldNumber = 3,
    kHeroIdFieldNumber = 4,
    kWonMatchFieldNumber = 5,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 match_timestamp = 2;
  bool has_match_timestamp() const;
  private:
  bool _internal_has_match_timestamp() const;
  public:
  void clear_match_timestamp();
  uint32_t match_timestamp() const;
  void set_match_timestamp(uint32_t value);
  private:
  uint32_t _internal_match_timestamp() const;
  void _internal_set_match_timestamp(uint32_t value);
  public:

  // optional sint32 performance_rating = 3;
  bool has_performance_rating() const;
  private:
  bool _internal_has_performance_rating() const;
  public:
  void clear_performance_rating();
  int32_t performance_rating() const;
  void set_performance_rating(int32_t value);
  private:
  int32_t _internal_performance_rating() const;
  void _internal_set_performance_rating(int32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional bool won_match = 5;
  bool has_won_match() const;
  private:
  bool _internal_has_won_match() const;
  public:
  void clear_won_match();
  bool won_match() const;
  void set_won_match(bool value);
  private:
  bool _internal_won_match() const;
  void _internal_set_won_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProfileResponse.MatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t match_id_;
  uint32_t match_timestamp_;
  int32_t performance_rating_;
  uint32_t hero_id_;
  bool won_match_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgProfileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProfileResponse) */ {
 public:
  inline CMsgProfileResponse() : CMsgProfileResponse(nullptr) {}
  ~CMsgProfileResponse() override;
  explicit constexpr CMsgProfileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProfileResponse(const CMsgProfileResponse& from);
  CMsgProfileResponse(CMsgProfileResponse&& from) noexcept
    : CMsgProfileResponse() {
    *this = ::std::move(from);
  }

  inline CMsgProfileResponse& operator=(const CMsgProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProfileResponse& operator=(CMsgProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProfileResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgProfileResponse*>(
               &_CMsgProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgProfileResponse& a, CMsgProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProfileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProfileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProfileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgProfileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProfileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgProfileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProfileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProfileResponse";
  }
  protected:
  explicit CMsgProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgProfileResponse_FeaturedHero FeaturedHero;
  typedef CMsgProfileResponse_MatchInfo MatchInfo;

  typedef CMsgProfileResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgProfileResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgProfileResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgProfileResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgProfileResponse_EResponse_k_eDisabled;
  static inline bool EResponse_IsValid(int value) {
    return CMsgProfileResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgProfileResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgProfileResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgProfileResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgProfileResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgProfileResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgProfileResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturedHeroesFieldNumber = 2,
    kRecentMatchesFieldNumber = 3,
    kSuccessfulHeroesFieldNumber = 4,
    kBackgroundItemFieldNumber = 1,
    kRecentMatchDetailsFieldNumber = 5,
    kResultFieldNumber = 6,
  };
  // repeated .CMsgProfileResponse.FeaturedHero featured_heroes = 2;
  int featured_heroes_size() const;
  private:
  int _internal_featured_heroes_size() const;
  public:
  void clear_featured_heroes();
  ::CMsgProfileResponse_FeaturedHero* mutable_featured_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_FeaturedHero >*
      mutable_featured_heroes();
  private:
  const ::CMsgProfileResponse_FeaturedHero& _internal_featured_heroes(int index) const;
  ::CMsgProfileResponse_FeaturedHero* _internal_add_featured_heroes();
  public:
  const ::CMsgProfileResponse_FeaturedHero& featured_heroes(int index) const;
  ::CMsgProfileResponse_FeaturedHero* add_featured_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_FeaturedHero >&
      featured_heroes() const;

  // repeated .CMsgProfileResponse.MatchInfo recent_matches = 3;
  int recent_matches_size() const;
  private:
  int _internal_recent_matches_size() const;
  public:
  void clear_recent_matches();
  ::CMsgProfileResponse_MatchInfo* mutable_recent_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_MatchInfo >*
      mutable_recent_matches();
  private:
  const ::CMsgProfileResponse_MatchInfo& _internal_recent_matches(int index) const;
  ::CMsgProfileResponse_MatchInfo* _internal_add_recent_matches();
  public:
  const ::CMsgProfileResponse_MatchInfo& recent_matches(int index) const;
  ::CMsgProfileResponse_MatchInfo* add_recent_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_MatchInfo >&
      recent_matches() const;

  // repeated .CMsgSuccessfulHero successful_heroes = 4;
  int successful_heroes_size() const;
  private:
  int _internal_successful_heroes_size() const;
  public:
  void clear_successful_heroes();
  ::CMsgSuccessfulHero* mutable_successful_heroes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSuccessfulHero >*
      mutable_successful_heroes();
  private:
  const ::CMsgSuccessfulHero& _internal_successful_heroes(int index) const;
  ::CMsgSuccessfulHero* _internal_add_successful_heroes();
  public:
  const ::CMsgSuccessfulHero& successful_heroes(int index) const;
  ::CMsgSuccessfulHero* add_successful_heroes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSuccessfulHero >&
      successful_heroes() const;

  // optional .CSOEconItem background_item = 1;
  bool has_background_item() const;
  private:
  bool _internal_has_background_item() const;
  public:
  void clear_background_item();
  const ::CSOEconItem& background_item() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_background_item();
  ::CSOEconItem* mutable_background_item();
  void set_allocated_background_item(::CSOEconItem* background_item);
  private:
  const ::CSOEconItem& _internal_background_item() const;
  ::CSOEconItem* _internal_mutable_background_item();
  public:
  void unsafe_arena_set_allocated_background_item(
      ::CSOEconItem* background_item);
  ::CSOEconItem* unsafe_arena_release_background_item();

  // optional .CMsgRecentMatchInfo recent_match_details = 5;
  bool has_recent_match_details() const;
  private:
  bool _internal_has_recent_match_details() const;
  public:
  void clear_recent_match_details();
  const ::CMsgRecentMatchInfo& recent_match_details() const;
  PROTOBUF_NODISCARD ::CMsgRecentMatchInfo* release_recent_match_details();
  ::CMsgRecentMatchInfo* mutable_recent_match_details();
  void set_allocated_recent_match_details(::CMsgRecentMatchInfo* recent_match_details);
  private:
  const ::CMsgRecentMatchInfo& _internal_recent_match_details() const;
  ::CMsgRecentMatchInfo* _internal_mutable_recent_match_details();
  public:
  void unsafe_arena_set_allocated_recent_match_details(
      ::CMsgRecentMatchInfo* recent_match_details);
  ::CMsgRecentMatchInfo* unsafe_arena_release_recent_match_details();

  // optional .CMsgProfileResponse.EResponse result = 6 [default = k_eInternalError];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgProfileResponse_EResponse result() const;
  void set_result(::CMsgProfileResponse_EResponse value);
  private:
  ::CMsgProfileResponse_EResponse _internal_result() const;
  void _internal_set_result(::CMsgProfileResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProfileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_FeaturedHero > featured_heroes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_MatchInfo > recent_matches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSuccessfulHero > successful_heroes_;
  ::CSOEconItem* background_item_;
  ::CMsgRecentMatchInfo* recent_match_details_;
  int result_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSOMultipleObjects_SingleObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOMultipleObjects.SingleObject) */ {
 public:
  inline CMsgSOMultipleObjects_SingleObject() : CMsgSOMultipleObjects_SingleObject(nullptr) {}
  ~CMsgSOMultipleObjects_SingleObject() override;
  explicit constexpr CMsgSOMultipleObjects_SingleObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from);
  CMsgSOMultipleObjects_SingleObject(CMsgSOMultipleObjects_SingleObject&& from) noexcept
    : CMsgSOMultipleObjects_SingleObject() {
    *this = ::std::move(from);
  }

  inline CMsgSOMultipleObjects_SingleObject& operator=(const CMsgSOMultipleObjects_SingleObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOMultipleObjects_SingleObject& operator=(CMsgSOMultipleObjects_SingleObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOMultipleObjects_SingleObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOMultipleObjects_SingleObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSOMultipleObjects_SingleObject*>(
               &_CMsgSOMultipleObjects_SingleObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgSOMultipleObjects_SingleObject& a, CMsgSOMultipleObjects_SingleObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOMultipleObjects_SingleObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOMultipleObjects_SingleObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOMultipleObjects_SingleObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOMultipleObjects_SingleObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOMultipleObjects_SingleObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOMultipleObjects_SingleObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOMultipleObjects_SingleObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOMultipleObjects.SingleObject";
  }
  protected:
  explicit CMsgSOMultipleObjects_SingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 2,
    kTypeIdFieldNumber = 1,
  };
  // optional bytes object_data = 2;
  bool has_object_data() const;
  private:
  bool _internal_has_object_data() const;
  public:
  void clear_object_data();
  const std::string& object_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_data();
  PROTOBUF_NODISCARD std::string* release_object_data();
  void set_allocated_object_data(std::string* object_data);
  private:
  const std::string& _internal_object_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_data(const std::string& value);
  std::string* _internal_mutable_object_data();
  public:

  // optional int32 type_id = 1;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  int32_t type_id() const;
  void set_type_id(int32_t value);
  private:
  int32_t _internal_type_id() const;
  void _internal_set_type_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOMultipleObjects.SingleObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_data_;
  int32_t type_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSOMultipleObjects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOMultipleObjects) */ {
 public:
  inline CMsgSOMultipleObjects() : CMsgSOMultipleObjects(nullptr) {}
  ~CMsgSOMultipleObjects() override;
  explicit constexpr CMsgSOMultipleObjects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from);
  CMsgSOMultipleObjects(CMsgSOMultipleObjects&& from) noexcept
    : CMsgSOMultipleObjects() {
    *this = ::std::move(from);
  }

  inline CMsgSOMultipleObjects& operator=(const CMsgSOMultipleObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOMultipleObjects& operator=(CMsgSOMultipleObjects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOMultipleObjects& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOMultipleObjects* internal_default_instance() {
    return reinterpret_cast<const CMsgSOMultipleObjects*>(
               &_CMsgSOMultipleObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgSOMultipleObjects& a, CMsgSOMultipleObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOMultipleObjects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOMultipleObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOMultipleObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOMultipleObjects>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOMultipleObjects& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOMultipleObjects& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOMultipleObjects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOMultipleObjects";
  }
  protected:
  explicit CMsgSOMultipleObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSOMultipleObjects_SingleObject SingleObject;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsModifiedFieldNumber = 2,
    kObjectsAddedFieldNumber = 4,
    kObjectsRemovedFieldNumber = 5,
    kOwnerSoidFieldNumber = 6,
    kVersionFieldNumber = 3,
    kServiceIdFieldNumber = 7,
  };
  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  int objects_modified_size() const;
  private:
  int _internal_objects_modified_size() const;
  public:
  void clear_objects_modified();
  ::CMsgSOMultipleObjects_SingleObject* mutable_objects_modified(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
      mutable_objects_modified();
  private:
  const ::CMsgSOMultipleObjects_SingleObject& _internal_objects_modified(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* _internal_add_objects_modified();
  public:
  const ::CMsgSOMultipleObjects_SingleObject& objects_modified(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* add_objects_modified();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
      objects_modified() const;

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  int objects_added_size() const;
  private:
  int _internal_objects_added_size() const;
  public:
  void clear_objects_added();
  ::CMsgSOMultipleObjects_SingleObject* mutable_objects_added(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
      mutable_objects_added();
  private:
  const ::CMsgSOMultipleObjects_SingleObject& _internal_objects_added(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* _internal_add_objects_added();
  public:
  const ::CMsgSOMultipleObjects_SingleObject& objects_added(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* add_objects_added();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
      objects_added() const;

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  int objects_removed_size() const;
  private:
  int _internal_objects_removed_size() const;
  public:
  void clear_objects_removed();
  ::CMsgSOMultipleObjects_SingleObject* mutable_objects_removed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
      mutable_objects_removed();
  private:
  const ::CMsgSOMultipleObjects_SingleObject& _internal_objects_removed(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* _internal_add_objects_removed();
  public:
  const ::CMsgSOMultipleObjects_SingleObject& objects_removed(int index) const;
  ::CMsgSOMultipleObjects_SingleObject* add_objects_removed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
      objects_removed() const;

  // optional .CMsgSOIDOwner owner_soid = 6;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_NODISCARD ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // optional uint32 service_id = 7;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  uint32_t service_id() const;
  void set_service_id(uint32_t value);
  private:
  uint32_t _internal_service_id() const;
  void _internal_set_service_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOMultipleObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject > objects_modified_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject > objects_added_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject > objects_removed_;
  ::CMsgSOIDOwner* owner_soid_;
  uint64_t version_;
  uint32_t service_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSOCacheSubscribed_SubscribedType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscribed.SubscribedType) */ {
 public:
  inline CMsgSOCacheSubscribed_SubscribedType() : CMsgSOCacheSubscribed_SubscribedType(nullptr) {}
  ~CMsgSOCacheSubscribed_SubscribedType() override;
  explicit constexpr CMsgSOCacheSubscribed_SubscribedType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from);
  CMsgSOCacheSubscribed_SubscribedType(CMsgSOCacheSubscribed_SubscribedType&& from) noexcept
    : CMsgSOCacheSubscribed_SubscribedType() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscribed_SubscribedType& operator=(const CMsgSOCacheSubscribed_SubscribedType& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscribed_SubscribedType& operator=(CMsgSOCacheSubscribed_SubscribedType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscribed_SubscribedType& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscribed_SubscribedType* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscribed_SubscribedType*>(
               &_CMsgSOCacheSubscribed_SubscribedType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgSOCacheSubscribed_SubscribedType& a, CMsgSOCacheSubscribed_SubscribedType& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscribed_SubscribedType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOCacheSubscribed_SubscribedType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscribed_SubscribedType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscribed.SubscribedType";
  }
  protected:
  explicit CMsgSOCacheSubscribed_SubscribedType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDataFieldNumber = 2,
    kTypeIdFieldNumber = 1,
  };
  // repeated bytes object_data = 2;
  int object_data_size() const;
  private:
  int _internal_object_data_size() const;
  public:
  void clear_object_data();
  const std::string& object_data(int index) const;
  std::string* mutable_object_data(int index);
  void set_object_data(int index, const std::string& value);
  void set_object_data(int index, std::string&& value);
  void set_object_data(int index, const char* value);
  void set_object_data(int index, const void* value, size_t size);
  std::string* add_object_data();
  void add_object_data(const std::string& value);
  void add_object_data(std::string&& value);
  void add_object_data(const char* value);
  void add_object_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& object_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_object_data();
  private:
  const std::string& _internal_object_data(int index) const;
  std::string* _internal_add_object_data();
  public:

  // optional int32 type_id = 1;
  bool has_type_id() const;
  private:
  bool _internal_has_type_id() const;
  public:
  void clear_type_id();
  int32_t type_id() const;
  void set_type_id(int32_t value);
  private:
  int32_t _internal_type_id() const;
  void _internal_set_type_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscribed.SubscribedType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> object_data_;
  int32_t type_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSOCacheSubscribed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheSubscribed) */ {
 public:
  inline CMsgSOCacheSubscribed() : CMsgSOCacheSubscribed(nullptr) {}
  ~CMsgSOCacheSubscribed() override;
  explicit constexpr CMsgSOCacheSubscribed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from);
  CMsgSOCacheSubscribed(CMsgSOCacheSubscribed&& from) noexcept
    : CMsgSOCacheSubscribed() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheSubscribed& operator=(const CMsgSOCacheSubscribed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheSubscribed& operator=(CMsgSOCacheSubscribed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheSubscribed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheSubscribed* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheSubscribed*>(
               &_CMsgSOCacheSubscribed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgSOCacheSubscribed& a, CMsgSOCacheSubscribed& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheSubscribed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheSubscribed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOCacheSubscribed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOCacheSubscribed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOCacheSubscribed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOCacheSubscribed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheSubscribed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheSubscribed";
  }
  protected:
  explicit CMsgSOCacheSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSOCacheSubscribed_SubscribedType SubscribedType;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kServiceListFieldNumber = 6,
    kOwnerSoidFieldNumber = 4,
    kVersionFieldNumber = 3,
    kSyncVersionFieldNumber = 7,
    kServiceIdFieldNumber = 5,
  };
  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::CMsgSOCacheSubscribed_SubscribedType* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >*
      mutable_objects();
  private:
  const ::CMsgSOCacheSubscribed_SubscribedType& _internal_objects(int index) const;
  ::CMsgSOCacheSubscribed_SubscribedType* _internal_add_objects();
  public:
  const ::CMsgSOCacheSubscribed_SubscribedType& objects(int index) const;
  ::CMsgSOCacheSubscribed_SubscribedType* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >&
      objects() const;

  // repeated uint32 service_list = 6;
  int service_list_size() const;
  private:
  int _internal_service_list_size() const;
  public:
  void clear_service_list();
  private:
  uint32_t _internal_service_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_service_list() const;
  void _internal_add_service_list(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_service_list();
  public:
  uint32_t service_list(int index) const;
  void set_service_list(int index, uint32_t value);
  void add_service_list(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      service_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_service_list();

  // optional .CMsgSOIDOwner owner_soid = 4;
  bool has_owner_soid() const;
  private:
  bool _internal_has_owner_soid() const;
  public:
  void clear_owner_soid();
  const ::CMsgSOIDOwner& owner_soid() const;
  PROTOBUF_NODISCARD ::CMsgSOIDOwner* release_owner_soid();
  ::CMsgSOIDOwner* mutable_owner_soid();
  void set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid);
  private:
  const ::CMsgSOIDOwner& _internal_owner_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_owner_soid();
  public:
  void unsafe_arena_set_allocated_owner_soid(
      ::CMsgSOIDOwner* owner_soid);
  ::CMsgSOIDOwner* unsafe_arena_release_owner_soid();

  // optional fixed64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // optional fixed64 sync_version = 7;
  bool has_sync_version() const;
  private:
  bool _internal_has_sync_version() const;
  public:
  void clear_sync_version();
  uint64_t sync_version() const;
  void set_sync_version(uint64_t value);
  private:
  uint64_t _internal_sync_version() const;
  void _internal_set_sync_version(uint64_t value);
  public:

  // optional uint32 service_id = 5;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  uint32_t service_id() const;
  void set_service_id(uint32_t value);
  private:
  uint32_t _internal_service_id() const;
  void _internal_set_service_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheSubscribed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > service_list_;
  ::CMsgSOIDOwner* owner_soid_;
  uint64_t version_;
  uint64_t sync_version_;
  uint32_t service_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_TipAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_TipAlert) */ {
 public:
  inline CDOTAClientMsg_TipAlert() : CDOTAClientMsg_TipAlert(nullptr) {}
  ~CDOTAClientMsg_TipAlert() override;
  explicit constexpr CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_TipAlert(const CDOTAClientMsg_TipAlert& from);
  CDOTAClientMsg_TipAlert(CDOTAClientMsg_TipAlert&& from) noexcept
    : CDOTAClientMsg_TipAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_TipAlert& operator=(const CDOTAClientMsg_TipAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_TipAlert& operator=(CDOTAClientMsg_TipAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_TipAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_TipAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_TipAlert*>(
               &_CDOTAClientMsg_TipAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CDOTAClientMsg_TipAlert& a, CDOTAClientMsg_TipAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_TipAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_TipAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_TipAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_TipAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_TipAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_TipAlert& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_TipAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_TipAlert";
  }
  protected:
  explicit CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipTextFieldNumber = 1,
  };
  // optional string tip_text = 1;
  bool has_tip_text() const;
  private:
  bool _internal_has_tip_text() const;
  public:
  void clear_tip_text();
  const std::string& tip_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tip_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tip_text();
  PROTOBUF_NODISCARD std::string* release_tip_text();
  void set_allocated_tip_text(std::string* tip_text);
  private:
  const std::string& _internal_tip_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tip_text(const std::string& value);
  std::string* _internal_mutable_tip_text();
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_TipAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_text_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetTrophyListResponse_Trophy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetTrophyListResponse.Trophy) */ {
 public:
  inline CMsgClientToGCGetTrophyListResponse_Trophy() : CMsgClientToGCGetTrophyListResponse_Trophy(nullptr) {}
  ~CMsgClientToGCGetTrophyListResponse_Trophy() override;
  explicit constexpr CMsgClientToGCGetTrophyListResponse_Trophy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetTrophyListResponse_Trophy(const CMsgClientToGCGetTrophyListResponse_Trophy& from);
  CMsgClientToGCGetTrophyListResponse_Trophy(CMsgClientToGCGetTrophyListResponse_Trophy&& from) noexcept
    : CMsgClientToGCGetTrophyListResponse_Trophy() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetTrophyListResponse_Trophy& operator=(const CMsgClientToGCGetTrophyListResponse_Trophy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetTrophyListResponse_Trophy& operator=(CMsgClientToGCGetTrophyListResponse_Trophy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetTrophyListResponse_Trophy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetTrophyListResponse_Trophy* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetTrophyListResponse_Trophy*>(
               &_CMsgClientToGCGetTrophyListResponse_Trophy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgClientToGCGetTrophyListResponse_Trophy& a, CMsgClientToGCGetTrophyListResponse_Trophy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetTrophyListResponse_Trophy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetTrophyListResponse_Trophy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetTrophyListResponse_Trophy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetTrophyListResponse_Trophy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetTrophyListResponse_Trophy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCGetTrophyListResponse_Trophy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetTrophyListResponse_Trophy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetTrophyListResponse.Trophy";
  }
  protected:
  explicit CMsgClientToGCGetTrophyListResponse_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrophyIdFieldNumber = 1,
    kTrophyScoreFieldNumber = 2,
    kLastUpdatedFieldNumber = 3,
  };
  // optional uint32 trophy_id = 1;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // optional uint32 trophy_score = 2;
  bool has_trophy_score() const;
  private:
  bool _internal_has_trophy_score() const;
  public:
  void clear_trophy_score();
  uint32_t trophy_score() const;
  void set_trophy_score(uint32_t value);
  private:
  uint32_t _internal_trophy_score() const;
  void _internal_set_trophy_score(uint32_t value);
  public:

  // optional uint32 last_updated = 3;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  uint32_t last_updated() const;
  void set_last_updated(uint32_t value);
  private:
  uint32_t _internal_last_updated() const;
  void _internal_set_last_updated(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetTrophyListResponse.Trophy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t trophy_id_;
  uint32_t trophy_score_;
  uint32_t last_updated_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetTrophyListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetTrophyListResponse) */ {
 public:
  inline CMsgClientToGCGetTrophyListResponse() : CMsgClientToGCGetTrophyListResponse(nullptr) {}
  ~CMsgClientToGCGetTrophyListResponse() override;
  explicit constexpr CMsgClientToGCGetTrophyListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetTrophyListResponse(const CMsgClientToGCGetTrophyListResponse& from);
  CMsgClientToGCGetTrophyListResponse(CMsgClientToGCGetTrophyListResponse&& from) noexcept
    : CMsgClientToGCGetTrophyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetTrophyListResponse& operator=(const CMsgClientToGCGetTrophyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetTrophyListResponse& operator=(CMsgClientToGCGetTrophyListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetTrophyListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetTrophyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetTrophyListResponse*>(
               &_CMsgClientToGCGetTrophyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgClientToGCGetTrophyListResponse& a, CMsgClientToGCGetTrophyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetTrophyListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetTrophyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetTrophyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetTrophyListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetTrophyListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCGetTrophyListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetTrophyListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetTrophyListResponse";
  }
  protected:
  explicit CMsgClientToGCGetTrophyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetTrophyListResponse_Trophy Trophy;

  // accessors -------------------------------------------------------

  enum : int {
    kTrophiesFieldNumber = 2,
    kProfileNameFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgClientToGCGetTrophyListResponse.Trophy trophies = 2;
  int trophies_size() const;
  private:
  int _internal_trophies_size() const;
  public:
  void clear_trophies();
  ::CMsgClientToGCGetTrophyListResponse_Trophy* mutable_trophies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetTrophyListResponse_Trophy >*
      mutable_trophies();
  private:
  const ::CMsgClientToGCGetTrophyListResponse_Trophy& _internal_trophies(int index) const;
  ::CMsgClientToGCGetTrophyListResponse_Trophy* _internal_add_trophies();
  public:
  const ::CMsgClientToGCGetTrophyListResponse_Trophy& trophies(int index) const;
  ::CMsgClientToGCGetTrophyListResponse_Trophy* add_trophies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetTrophyListResponse_Trophy >&
      trophies() const;

  // optional string profile_name = 3;
  bool has_profile_name() const;
  private:
  bool _internal_has_profile_name() const;
  public:
  void clear_profile_name();
  const std::string& profile_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_name();
  PROTOBUF_NODISCARD std::string* release_profile_name();
  void set_allocated_profile_name(std::string* profile_name);
  private:
  const std::string& _internal_profile_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_name(const std::string& value);
  std::string* _internal_mutable_profile_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetTrophyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetTrophyListResponse_Trophy > trophies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_name_;
  uint32_t account_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_SplitPlayerConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_SplitPlayerConnect) */ {
 public:
  inline CCLCMsg_SplitPlayerConnect() : CCLCMsg_SplitPlayerConnect(nullptr) {}
  ~CCLCMsg_SplitPlayerConnect() override;
  explicit constexpr CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from);
  CCLCMsg_SplitPlayerConnect(CCLCMsg_SplitPlayerConnect&& from) noexcept
    : CCLCMsg_SplitPlayerConnect() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_SplitPlayerConnect& operator=(const CCLCMsg_SplitPlayerConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_SplitPlayerConnect& operator=(CCLCMsg_SplitPlayerConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_SplitPlayerConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_SplitPlayerConnect* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_SplitPlayerConnect*>(
               &_CCLCMsg_SplitPlayerConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CCLCMsg_SplitPlayerConnect& a, CCLCMsg_SplitPlayerConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_SplitPlayerConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_SplitPlayerConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCLCMsg_SplitPlayerConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCLCMsg_SplitPlayerConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_SplitPlayerConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_SplitPlayerConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_SplitPlayerConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_SplitPlayerConnect";
  }
  protected:
  explicit CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayernameFieldNumber = 1,
  };
  // optional string playername = 1;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_SplitPlayerConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EventCNY2015Cmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EventCNY2015Cmd) */ {
 public:
  inline CDOTAClientMsg_EventCNY2015Cmd() : CDOTAClientMsg_EventCNY2015Cmd(nullptr) {}
  ~CDOTAClientMsg_EventCNY2015Cmd() override;
  explicit constexpr CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from);
  CDOTAClientMsg_EventCNY2015Cmd(CDOTAClientMsg_EventCNY2015Cmd&& from) noexcept
    : CDOTAClientMsg_EventCNY2015Cmd() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EventCNY2015Cmd& operator=(const CDOTAClientMsg_EventCNY2015Cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EventCNY2015Cmd& operator=(CDOTAClientMsg_EventCNY2015Cmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EventCNY2015Cmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EventCNY2015Cmd* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EventCNY2015Cmd*>(
               &_CDOTAClientMsg_EventCNY2015Cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CDOTAClientMsg_EventCNY2015Cmd& a, CDOTAClientMsg_EventCNY2015Cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EventCNY2015Cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EventCNY2015Cmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EventCNY2015Cmd";
  }
  protected:
  explicit CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EventCNY2015Cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RankWager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RankWager) */ {
 public:
  inline CDOTAClientMsg_RankWager() : CDOTAClientMsg_RankWager(nullptr) {}
  ~CDOTAClientMsg_RankWager() override;
  explicit constexpr CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from);
  CDOTAClientMsg_RankWager(CDOTAClientMsg_RankWager&& from) noexcept
    : CDOTAClientMsg_RankWager() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RankWager& operator=(const CDOTAClientMsg_RankWager& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RankWager& operator=(CDOTAClientMsg_RankWager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RankWager& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RankWager* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RankWager*>(
               &_CDOTAClientMsg_RankWager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CDOTAClientMsg_RankWager& a, CDOTAClientMsg_RankWager& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RankWager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RankWager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RankWager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RankWager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_RankWager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_RankWager& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_RankWager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RankWager";
  }
  protected:
  explicit CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnounceWagerFieldNumber = 1,
  };
  // optional bool announce_wager = 1;
  bool has_announce_wager() const;
  private:
  bool _internal_has_announce_wager() const;
  public:
  void clear_announce_wager();
  bool announce_wager() const;
  void set_announce_wager(bool value);
  private:
  bool _internal_announce_wager() const;
  void _internal_set_announce_wager(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RankWager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool announce_wager_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EventPointsTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EventPointsTip) */ {
 public:
  inline CDOTAClientMsg_EventPointsTip() : CDOTAClientMsg_EventPointsTip(nullptr) {}
  ~CDOTAClientMsg_EventPointsTip() override;
  explicit constexpr CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from);
  CDOTAClientMsg_EventPointsTip(CDOTAClientMsg_EventPointsTip&& from) noexcept
    : CDOTAClientMsg_EventPointsTip() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EventPointsTip& operator=(const CDOTAClientMsg_EventPointsTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EventPointsTip& operator=(CDOTAClientMsg_EventPointsTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EventPointsTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EventPointsTip* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EventPointsTip*>(
               &_CDOTAClientMsg_EventPointsTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CDOTAClientMsg_EventPointsTip& a, CDOTAClientMsg_EventPointsTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EventPointsTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EventPointsTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EventPointsTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EventPointsTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EventPointsTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_EventPointsTip& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EventPointsTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EventPointsTip";
  }
  protected:
  explicit CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientPlayerIdFieldNumber = 1,
  };
  // optional uint32 recipient_player_id = 1;
  bool has_recipient_player_id() const;
  private:
  bool _internal_has_recipient_player_id() const;
  public:
  void clear_recipient_player_id();
  uint32_t recipient_player_id() const;
  void set_recipient_player_id(uint32_t value);
  private:
  uint32_t _internal_recipient_player_id() const;
  void _internal_set_recipient_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EventPointsTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t recipient_player_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_CoinWager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_CoinWager) */ {
 public:
  inline CDOTAClientMsg_CoinWager() : CDOTAClientMsg_CoinWager(nullptr) {}
  ~CDOTAClientMsg_CoinWager() override;
  explicit constexpr CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from);
  CDOTAClientMsg_CoinWager(CDOTAClientMsg_CoinWager&& from) noexcept
    : CDOTAClientMsg_CoinWager() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_CoinWager& operator=(const CDOTAClientMsg_CoinWager& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_CoinWager& operator=(CDOTAClientMsg_CoinWager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_CoinWager& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_CoinWager* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_CoinWager*>(
               &_CDOTAClientMsg_CoinWager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CDOTAClientMsg_CoinWager& a, CDOTAClientMsg_CoinWager& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_CoinWager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_CoinWager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_CoinWager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_CoinWager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_CoinWager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_CoinWager& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_CoinWager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_CoinWager";
  }
  protected:
  explicit CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWagerAmountFieldNumber = 1,
  };
  // optional uint32 wager_amount = 1;
  bool has_wager_amount() const;
  private:
  bool _internal_has_wager_amount() const;
  public:
  void clear_wager_amount();
  uint32_t wager_amount() const;
  void set_wager_amount(uint32_t value);
  private:
  uint32_t _internal_wager_amount() const;
  void _internal_set_wager_amount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_CoinWager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t wager_amount_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgSOCacheHaveVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSOCacheHaveVersion) */ {
 public:
  inline CMsgSOCacheHaveVersion() : CMsgSOCacheHaveVersion(nullptr) {}
  ~CMsgSOCacheHaveVersion() override;
  explicit constexpr CMsgSOCacheHaveVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from);
  CMsgSOCacheHaveVersion(CMsgSOCacheHaveVersion&& from) noexcept
    : CMsgSOCacheHaveVersion() {
    *this = ::std::move(from);
  }

  inline CMsgSOCacheHaveVersion& operator=(const CMsgSOCacheHaveVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSOCacheHaveVersion& operator=(CMsgSOCacheHaveVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSOCacheHaveVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSOCacheHaveVersion* internal_default_instance() {
    return reinterpret_cast<const CMsgSOCacheHaveVersion*>(
               &_CMsgSOCacheHaveVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgSOCacheHaveVersion& a, CMsgSOCacheHaveVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSOCacheHaveVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSOCacheHaveVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSOCacheHaveVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSOCacheHaveVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSOCacheHaveVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSOCacheHaveVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSOCacheHaveVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSOCacheHaveVersion";
  }
  protected:
  explicit CMsgSOCacheHaveVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoidFieldNumber = 1,
    kVersionFieldNumber = 2,
    kServiceIdFieldNumber = 3,
    kCachedFileVersionFieldNumber = 4,
  };
  // optional .CMsgSOIDOwner soid = 1;
  bool has_soid() const;
  private:
  bool _internal_has_soid() const;
  public:
  void clear_soid();
  const ::CMsgSOIDOwner& soid() const;
  PROTOBUF_NODISCARD ::CMsgSOIDOwner* release_soid();
  ::CMsgSOIDOwner* mutable_soid();
  void set_allocated_soid(::CMsgSOIDOwner* soid);
  private:
  const ::CMsgSOIDOwner& _internal_soid() const;
  ::CMsgSOIDOwner* _internal_mutable_soid();
  public:
  void unsafe_arena_set_allocated_soid(
      ::CMsgSOIDOwner* soid);
  ::CMsgSOIDOwner* unsafe_arena_release_soid();

  // optional fixed64 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // optional uint32 service_id = 3;
  bool has_service_id() const;
  private:
  bool _internal_has_service_id() const;
  public:
  void clear_service_id();
  uint32_t service_id() const;
  void set_service_id(uint32_t value);
  private:
  uint32_t _internal_service_id() const;
  void _internal_set_service_id(uint32_t value);
  public:

  // optional uint32 cached_file_version = 4;
  bool has_cached_file_version() const;
  private:
  bool _internal_has_cached_file_version() const;
  public:
  void clear_cached_file_version();
  uint32_t cached_file_version() const;
  void set_cached_file_version(uint32_t value);
  private:
  uint32_t _internal_cached_file_version() const;
  void _internal_set_cached_file_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSOCacheHaveVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSOIDOwner* soid_;
  uint64_t version_;
  uint32_t service_id_;
  uint32_t cached_file_version_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientPlayerStatsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientPlayerStatsResponse) */ {
 public:
  inline CMsgGCToClientPlayerStatsResponse() : CMsgGCToClientPlayerStatsResponse(nullptr) {}
  ~CMsgGCToClientPlayerStatsResponse() override;
  explicit constexpr CMsgGCToClientPlayerStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientPlayerStatsResponse(const CMsgGCToClientPlayerStatsResponse& from);
  CMsgGCToClientPlayerStatsResponse(CMsgGCToClientPlayerStatsResponse&& from) noexcept
    : CMsgGCToClientPlayerStatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientPlayerStatsResponse& operator=(const CMsgGCToClientPlayerStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientPlayerStatsResponse& operator=(CMsgGCToClientPlayerStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientPlayerStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientPlayerStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientPlayerStatsResponse*>(
               &_CMsgGCToClientPlayerStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgGCToClientPlayerStatsResponse& a, CMsgGCToClientPlayerStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientPlayerStatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientPlayerStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientPlayerStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientPlayerStatsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientPlayerStatsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCToClientPlayerStatsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientPlayerStatsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientPlayerStatsResponse";
  }
  protected:
  explicit CMsgGCToClientPlayerStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStatsFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kMatchCountFieldNumber = 3,
    kMeanGpmFieldNumber = 4,
    kMeanXppmFieldNumber = 5,
    kMeanLasthitsFieldNumber = 6,
    kRampagesFieldNumber = 7,
    kTripleKillsFieldNumber = 8,
    kFirstBloodClaimedFieldNumber = 9,
    kFirstBloodGivenFieldNumber = 10,
    kCouriersKilledFieldNumber = 11,
    kAegisesSnatchedFieldNumber = 12,
    kCheesesEatenFieldNumber = 13,
    kCreepsStackedFieldNumber = 14,
    kFightScoreFieldNumber = 15,
    kFarmScoreFieldNumber = 16,
    kSupportScoreFieldNumber = 17,
    kPushScoreFieldNumber = 18,
    kVersatilityScoreFieldNumber = 19,
    kMeanNetworthFieldNumber = 20,
    kMeanDamageFieldNumber = 21,
    kMeanHealsFieldNumber = 22,
    kRapiersPurchasedFieldNumber = 23,
  };
  // repeated float player_stats = 2;
  int player_stats_size() const;
  private:
  int _internal_player_stats_size() const;
  public:
  void clear_player_stats();
  private:
  float _internal_player_stats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_player_stats() const;
  void _internal_add_player_stats(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_player_stats();
  public:
  float player_stats(int index) const;
  void set_player_stats(int index, float value);
  void add_player_stats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      player_stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_player_stats();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 match_count = 3;
  bool has_match_count() const;
  private:
  bool _internal_has_match_count() const;
  public:
  void clear_match_count();
  uint32_t match_count() const;
  void set_match_count(uint32_t value);
  private:
  uint32_t _internal_match_count() const;
  void _internal_set_match_count(uint32_t value);
  public:

  // optional float mean_gpm = 4;
  bool has_mean_gpm() const;
  private:
  bool _internal_has_mean_gpm() const;
  public:
  void clear_mean_gpm();
  float mean_gpm() const;
  void set_mean_gpm(float value);
  private:
  float _internal_mean_gpm() const;
  void _internal_set_mean_gpm(float value);
  public:

  // optional float mean_xppm = 5;
  bool has_mean_xppm() const;
  private:
  bool _internal_has_mean_xppm() const;
  public:
  void clear_mean_xppm();
  float mean_xppm() const;
  void set_mean_xppm(float value);
  private:
  float _internal_mean_xppm() const;
  void _internal_set_mean_xppm(float value);
  public:

  // optional float mean_lasthits = 6;
  bool has_mean_lasthits() const;
  private:
  bool _internal_has_mean_lasthits() const;
  public:
  void clear_mean_lasthits();
  float mean_lasthits() const;
  void set_mean_lasthits(float value);
  private:
  float _internal_mean_lasthits() const;
  void _internal_set_mean_lasthits(float value);
  public:

  // optional uint32 rampages = 7;
  bool has_rampages() const;
  private:
  bool _internal_has_rampages() const;
  public:
  void clear_rampages();
  uint32_t rampages() const;
  void set_rampages(uint32_t value);
  private:
  uint32_t _internal_rampages() const;
  void _internal_set_rampages(uint32_t value);
  public:

  // optional uint32 triple_kills = 8;
  bool has_triple_kills() const;
  private:
  bool _internal_has_triple_kills() const;
  public:
  void clear_triple_kills();
  uint32_t triple_kills() const;
  void set_triple_kills(uint32_t value);
  private:
  uint32_t _internal_triple_kills() const;
  void _internal_set_triple_kills(uint32_t value);
  public:

  // optional uint32 first_blood_claimed = 9;
  bool has_first_blood_claimed() const;
  private:
  bool _internal_has_first_blood_claimed() const;
  public:
  void clear_first_blood_claimed();
  uint32_t first_blood_claimed() const;
  void set_first_blood_claimed(uint32_t value);
  private:
  uint32_t _internal_first_blood_claimed() const;
  void _internal_set_first_blood_claimed(uint32_t value);
  public:

  // optional uint32 first_blood_given = 10;
  bool has_first_blood_given() const;
  private:
  bool _internal_has_first_blood_given() const;
  public:
  void clear_first_blood_given();
  uint32_t first_blood_given() const;
  void set_first_blood_given(uint32_t value);
  private:
  uint32_t _internal_first_blood_given() const;
  void _internal_set_first_blood_given(uint32_t value);
  public:

  // optional uint32 couriers_killed = 11;
  bool has_couriers_killed() const;
  private:
  bool _internal_has_couriers_killed() const;
  public:
  void clear_couriers_killed();
  uint32_t couriers_killed() const;
  void set_couriers_killed(uint32_t value);
  private:
  uint32_t _internal_couriers_killed() const;
  void _internal_set_couriers_killed(uint32_t value);
  public:

  // optional uint32 aegises_snatched = 12;
  bool has_aegises_snatched() const;
  private:
  bool _internal_has_aegises_snatched() const;
  public:
  void clear_aegises_snatched();
  uint32_t aegises_snatched() const;
  void set_aegises_snatched(uint32_t value);
  private:
  uint32_t _internal_aegises_snatched() const;
  void _internal_set_aegises_snatched(uint32_t value);
  public:

  // optional uint32 cheeses_eaten = 13;
  bool has_cheeses_eaten() const;
  private:
  bool _internal_has_cheeses_eaten() const;
  public:
  void clear_cheeses_eaten();
  uint32_t cheeses_eaten() const;
  void set_cheeses_eaten(uint32_t value);
  private:
  uint32_t _internal_cheeses_eaten() const;
  void _internal_set_cheeses_eaten(uint32_t value);
  public:

  // optional uint32 creeps_stacked = 14;
  bool has_creeps_stacked() const;
  private:
  bool _internal_has_creeps_stacked() const;
  public:
  void clear_creeps_stacked();
  uint32_t creeps_stacked() const;
  void set_creeps_stacked(uint32_t value);
  private:
  uint32_t _internal_creeps_stacked() const;
  void _internal_set_creeps_stacked(uint32_t value);
  public:

  // optional float fight_score = 15;
  bool has_fight_score() const;
  private:
  bool _internal_has_fight_score() const;
  public:
  void clear_fight_score();
  float fight_score() const;
  void set_fight_score(float value);
  private:
  float _internal_fight_score() const;
  void _internal_set_fight_score(float value);
  public:

  // optional float farm_score = 16;
  bool has_farm_score() const;
  private:
  bool _internal_has_farm_score() const;
  public:
  void clear_farm_score();
  float farm_score() const;
  void set_farm_score(float value);
  private:
  float _internal_farm_score() const;
  void _internal_set_farm_score(float value);
  public:

  // optional float support_score = 17;
  bool has_support_score() const;
  private:
  bool _internal_has_support_score() const;
  public:
  void clear_support_score();
  float support_score() const;
  void set_support_score(float value);
  private:
  float _internal_support_score() const;
  void _internal_set_support_score(float value);
  public:

  // optional float push_score = 18;
  bool has_push_score() const;
  private:
  bool _internal_has_push_score() const;
  public:
  void clear_push_score();
  float push_score() const;
  void set_push_score(float value);
  private:
  float _internal_push_score() const;
  void _internal_set_push_score(float value);
  public:

  // optional float versatility_score = 19;
  bool has_versatility_score() const;
  private:
  bool _internal_has_versatility_score() const;
  public:
  void clear_versatility_score();
  float versatility_score() const;
  void set_versatility_score(float value);
  private:
  float _internal_versatility_score() const;
  void _internal_set_versatility_score(float value);
  public:

  // optional float mean_networth = 20;
  bool has_mean_networth() const;
  private:
  bool _internal_has_mean_networth() const;
  public:
  void clear_mean_networth();
  float mean_networth() const;
  void set_mean_networth(float value);
  private:
  float _internal_mean_networth() const;
  void _internal_set_mean_networth(float value);
  public:

  // optional float mean_damage = 21;
  bool has_mean_damage() const;
  private:
  bool _internal_has_mean_damage() const;
  public:
  void clear_mean_damage();
  float mean_damage() const;
  void set_mean_damage(float value);
  private:
  float _internal_mean_damage() const;
  void _internal_set_mean_damage(float value);
  public:

  // optional float mean_heals = 22;
  bool has_mean_heals() const;
  private:
  bool _internal_has_mean_heals() const;
  public:
  void clear_mean_heals();
  float mean_heals() const;
  void set_mean_heals(float value);
  private:
  float _internal_mean_heals() const;
  void _internal_set_mean_heals(float value);
  public:

  // optional uint32 rapiers_purchased = 23;
  bool has_rapiers_purchased() const;
  private:
  bool _internal_has_rapiers_purchased() const;
  public:
  void clear_rapiers_purchased();
  uint32_t rapiers_purchased() const;
  void set_rapiers_purchased(uint32_t value);
  private:
  uint32_t _internal_rapiers_purchased() const;
  void _internal_set_rapiers_purchased(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientPlayerStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > player_stats_;
  uint32_t account_id_;
  uint32_t match_count_;
  float mean_gpm_;
  float mean_xppm_;
  float mean_lasthits_;
  uint32_t rampages_;
  uint32_t triple_kills_;
  uint32_t first_blood_claimed_;
  uint32_t first_blood_given_;
  uint32_t couriers_killed_;
  uint32_t aegises_snatched_;
  uint32_t cheeses_eaten_;
  uint32_t creeps_stacked_;
  float fight_score_;
  float farm_score_;
  float support_score_;
  float push_score_;
  float versatility_score_;
  float mean_networth_;
  float mean_damage_;
  float mean_heals_;
  uint32_t rapiers_purchased_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgAdjustItemEquippedState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAdjustItemEquippedState) */ {
 public:
  inline CMsgAdjustItemEquippedState() : CMsgAdjustItemEquippedState(nullptr) {}
  ~CMsgAdjustItemEquippedState() override;
  explicit constexpr CMsgAdjustItemEquippedState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from);
  CMsgAdjustItemEquippedState(CMsgAdjustItemEquippedState&& from) noexcept
    : CMsgAdjustItemEquippedState() {
    *this = ::std::move(from);
  }

  inline CMsgAdjustItemEquippedState& operator=(const CMsgAdjustItemEquippedState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAdjustItemEquippedState& operator=(CMsgAdjustItemEquippedState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAdjustItemEquippedState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAdjustItemEquippedState* internal_default_instance() {
    return reinterpret_cast<const CMsgAdjustItemEquippedState*>(
               &_CMsgAdjustItemEquippedState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgAdjustItemEquippedState& a, CMsgAdjustItemEquippedState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAdjustItemEquippedState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAdjustItemEquippedState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAdjustItemEquippedState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAdjustItemEquippedState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAdjustItemEquippedState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAdjustItemEquippedState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAdjustItemEquippedState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAdjustItemEquippedState";
  }
  protected:
  explicit CMsgAdjustItemEquippedState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kNewClassFieldNumber = 2,
    kNewSlotFieldNumber = 3,
    kStyleIndexFieldNumber = 4,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 new_class = 2;
  bool has_new_class() const;
  private:
  bool _internal_has_new_class() const;
  public:
  void clear_new_class();
  uint32_t new_class() const;
  void set_new_class(uint32_t value);
  private:
  uint32_t _internal_new_class() const;
  void _internal_set_new_class(uint32_t value);
  public:

  // optional uint32 new_slot = 3;
  bool has_new_slot() const;
  private:
  bool _internal_has_new_slot() const;
  public:
  void clear_new_slot();
  uint32_t new_slot() const;
  void set_new_slot(uint32_t value);
  private:
  uint32_t _internal_new_slot() const;
  void _internal_set_new_slot(uint32_t value);
  public:

  // optional uint32 style_index = 4;
  bool has_style_index() const;
  private:
  bool _internal_has_style_index() const;
  public:
  void clear_style_index();
  uint32_t style_index() const;
  void set_style_index(uint32_t value);
  private:
  uint32_t _internal_style_index() const;
  void _internal_set_style_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAdjustItemEquippedState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t item_id_;
  uint32_t new_class_;
  uint32_t new_slot_;
  uint32_t style_index_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCEquipItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCEquipItems) */ {
 public:
  inline CMsgClientToGCEquipItems() : CMsgClientToGCEquipItems(nullptr) {}
  ~CMsgClientToGCEquipItems() override;
  explicit constexpr CMsgClientToGCEquipItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCEquipItems(const CMsgClientToGCEquipItems& from);
  CMsgClientToGCEquipItems(CMsgClientToGCEquipItems&& from) noexcept
    : CMsgClientToGCEquipItems() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCEquipItems& operator=(const CMsgClientToGCEquipItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCEquipItems& operator=(CMsgClientToGCEquipItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCEquipItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCEquipItems* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCEquipItems*>(
               &_CMsgClientToGCEquipItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgClientToGCEquipItems& a, CMsgClientToGCEquipItems& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCEquipItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCEquipItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCEquipItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCEquipItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCEquipItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientToGCEquipItems& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCEquipItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCEquipItems";
  }
  protected:
  explicit CMsgClientToGCEquipItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipsFieldNumber = 1,
  };
  // repeated .CMsgAdjustItemEquippedState equips = 1;
  int equips_size() const;
  private:
  int _internal_equips_size() const;
  public:
  void clear_equips();
  ::CMsgAdjustItemEquippedState* mutable_equips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdjustItemEquippedState >*
      mutable_equips();
  private:
  const ::CMsgAdjustItemEquippedState& _internal_equips(int index) const;
  ::CMsgAdjustItemEquippedState* _internal_add_equips();
  public:
  const ::CMsgAdjustItemEquippedState& equips(int index) const;
  ::CMsgAdjustItemEquippedState* add_equips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdjustItemEquippedState >&
      equips() const;

  // @@protoc_insertion_point(class_scope:CMsgClientToGCEquipItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdjustItemEquippedState > equips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientHello final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientHello) */ {
 public:
  inline CMsgClientHello() : CMsgClientHello(nullptr) {}
  ~CMsgClientHello() override;
  explicit constexpr CMsgClientHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientHello(const CMsgClientHello& from);
  CMsgClientHello(CMsgClientHello&& from) noexcept
    : CMsgClientHello() {
    *this = ::std::move(from);
  }

  inline CMsgClientHello& operator=(const CMsgClientHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientHello& operator=(CMsgClientHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientHello* internal_default_instance() {
    return reinterpret_cast<const CMsgClientHello*>(
               &_CMsgClientHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgClientHello& a, CMsgClientHello& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientHello* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientHello>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientHello& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientHello& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientHello* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientHello";
  }
  protected:
  explicit CMsgClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSocacheHaveVersionsFieldNumber = 2,
    kSecretKeyFieldNumber = 5,
    kSteamdatagramLoginFieldNumber = 8,
    kGameMsgFieldNumber = 10,
    kPlatformNameFieldNumber = 23,
    kVersionFieldNumber = 1,
    kClientSessionNeedFieldNumber = 3,
    kClientLauncherFieldNumber = 4,
    kClientLanguageFieldNumber = 6,
    kEngineFieldNumber = 7,
    kPlatformIdFieldNumber = 9,
    kOsTypeFieldNumber = 11,
    kRenderSystemFieldNumber = 12,
    kRenderSystemReqFieldNumber = 13,
    kScreenWidthFieldNumber = 14,
    kScreenHeightFieldNumber = 15,
    kScreenRefreshFieldNumber = 16,
    kRenderWidthFieldNumber = 17,
    kRenderHeightFieldNumber = 18,
    kSwapWidthFieldNumber = 19,
    kSwapHeightFieldNumber = 20,
    kIsSteamChinaFieldNumber = 22,
  };
  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  int socache_have_versions_size() const;
  private:
  int _internal_socache_have_versions_size() const;
  public:
  void clear_socache_have_versions();
  ::CMsgSOCacheHaveVersion* mutable_socache_have_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheHaveVersion >*
      mutable_socache_have_versions();
  private:
  const ::CMsgSOCacheHaveVersion& _internal_socache_have_versions(int index) const;
  ::CMsgSOCacheHaveVersion* _internal_add_socache_have_versions();
  public:
  const ::CMsgSOCacheHaveVersion& socache_have_versions(int index) const;
  ::CMsgSOCacheHaveVersion* add_socache_have_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheHaveVersion >&
      socache_have_versions() const;

  // optional string secret_key = 5;
  bool has_secret_key() const;
  private:
  bool _internal_has_secret_key() const;
  public:
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_NODISCARD std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // optional bytes steamdatagram_login = 8;
  bool has_steamdatagram_login() const;
  private:
  bool _internal_has_steamdatagram_login() const;
  public:
  void clear_steamdatagram_login();
  const std::string& steamdatagram_login() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_steamdatagram_login(ArgT0&& arg0, ArgT... args);
  std::string* mutable_steamdatagram_login();
  PROTOBUF_NODISCARD std::string* release_steamdatagram_login();
  void set_allocated_steamdatagram_login(std::string* steamdatagram_login);
  private:
  const std::string& _internal_steamdatagram_login() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_steamdatagram_login(const std::string& value);
  std::string* _internal_mutable_steamdatagram_login();
  public:

  // optional bytes game_msg = 10;
  bool has_game_msg() const;
  private:
  bool _internal_has_game_msg() const;
  public:
  void clear_game_msg();
  const std::string& game_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_msg();
  PROTOBUF_NODISCARD std::string* release_game_msg();
  void set_allocated_game_msg(std::string* game_msg);
  private:
  const std::string& _internal_game_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_msg(const std::string& value);
  std::string* _internal_mutable_game_msg();
  public:

  // optional string platform_name = 23;
  bool has_platform_name() const;
  private:
  bool _internal_has_platform_name() const;
  public:
  void clear_platform_name();
  const std::string& platform_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform_name();
  PROTOBUF_NODISCARD std::string* release_platform_name();
  void set_allocated_platform_name(std::string* platform_name);
  private:
  const std::string& _internal_platform_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform_name(const std::string& value);
  std::string* _internal_mutable_platform_name();
  public:

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // optional uint32 client_session_need = 3;
  bool has_client_session_need() const;
  private:
  bool _internal_has_client_session_need() const;
  public:
  void clear_client_session_need();
  uint32_t client_session_need() const;
  void set_client_session_need(uint32_t value);
  private:
  uint32_t _internal_client_session_need() const;
  void _internal_set_client_session_need(uint32_t value);
  public:

  // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  bool has_client_launcher() const;
  private:
  bool _internal_has_client_launcher() const;
  public:
  void clear_client_launcher();
  ::PartnerAccountType client_launcher() const;
  void set_client_launcher(::PartnerAccountType value);
  private:
  ::PartnerAccountType _internal_client_launcher() const;
  void _internal_set_client_launcher(::PartnerAccountType value);
  public:

  // optional uint32 client_language = 6;
  bool has_client_language() const;
  private:
  bool _internal_has_client_language() const;
  public:
  void clear_client_language();
  uint32_t client_language() const;
  void set_client_language(uint32_t value);
  private:
  uint32_t _internal_client_language() const;
  void _internal_set_client_language(uint32_t value);
  public:

  // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  ::ESourceEngine engine() const;
  void set_engine(::ESourceEngine value);
  private:
  ::ESourceEngine _internal_engine() const;
  void _internal_set_engine(::ESourceEngine value);
  public:

  // optional uint32 platform_id = 9;
  bool has_platform_id() const;
  private:
  bool _internal_has_platform_id() const;
  public:
  void clear_platform_id();
  uint32_t platform_id() const;
  void set_platform_id(uint32_t value);
  private:
  uint32_t _internal_platform_id() const;
  void _internal_set_platform_id(uint32_t value);
  public:

  // optional int32 os_type = 11;
  bool has_os_type() const;
  private:
  bool _internal_has_os_type() const;
  public:
  void clear_os_type();
  int32_t os_type() const;
  void set_os_type(int32_t value);
  private:
  int32_t _internal_os_type() const;
  void _internal_set_os_type(int32_t value);
  public:

  // optional uint32 render_system = 12;
  bool has_render_system() const;
  private:
  bool _internal_has_render_system() const;
  public:
  void clear_render_system();
  uint32_t render_system() const;
  void set_render_system(uint32_t value);
  private:
  uint32_t _internal_render_system() const;
  void _internal_set_render_system(uint32_t value);
  public:

  // optional uint32 render_system_req = 13;
  bool has_render_system_req() const;
  private:
  bool _internal_has_render_system_req() const;
  public:
  void clear_render_system_req();
  uint32_t render_system_req() const;
  void set_render_system_req(uint32_t value);
  private:
  uint32_t _internal_render_system_req() const;
  void _internal_set_render_system_req(uint32_t value);
  public:

  // optional uint32 screen_width = 14;
  bool has_screen_width() const;
  private:
  bool _internal_has_screen_width() const;
  public:
  void clear_screen_width();
  uint32_t screen_width() const;
  void set_screen_width(uint32_t value);
  private:
  uint32_t _internal_screen_width() const;
  void _internal_set_screen_width(uint32_t value);
  public:

  // optional uint32 screen_height = 15;
  bool has_screen_height() const;
  private:
  bool _internal_has_screen_height() const;
  public:
  void clear_screen_height();
  uint32_t screen_height() const;
  void set_screen_height(uint32_t value);
  private:
  uint32_t _internal_screen_height() const;
  void _internal_set_screen_height(uint32_t value);
  public:

  // optional uint32 screen_refresh = 16;
  bool has_screen_refresh() const;
  private:
  bool _internal_has_screen_refresh() const;
  public:
  void clear_screen_refresh();
  uint32_t screen_refresh() const;
  void set_screen_refresh(uint32_t value);
  private:
  uint32_t _internal_screen_refresh() const;
  void _internal_set_screen_refresh(uint32_t value);
  public:

  // optional uint32 render_width = 17;
  bool has_render_width() const;
  private:
  bool _internal_has_render_width() const;
  public:
  void clear_render_width();
  uint32_t render_width() const;
  void set_render_width(uint32_t value);
  private:
  uint32_t _internal_render_width() const;
  void _internal_set_render_width(uint32_t value);
  public:

  // optional uint32 render_height = 18;
  bool has_render_height() const;
  private:
  bool _internal_has_render_height() const;
  public:
  void clear_render_height();
  uint32_t render_height() const;
  void set_render_height(uint32_t value);
  private:
  uint32_t _internal_render_height() const;
  void _internal_set_render_height(uint32_t value);
  public:

  // optional uint32 swap_width = 19;
  bool has_swap_width() const;
  private:
  bool _internal_has_swap_width() const;
  public:
  void clear_swap_width();
  uint32_t swap_width() const;
  void set_swap_width(uint32_t value);
  private:
  uint32_t _internal_swap_width() const;
  void _internal_set_swap_width(uint32_t value);
  public:

  // optional uint32 swap_height = 20;
  bool has_swap_height() const;
  private:
  bool _internal_has_swap_height() const;
  public:
  void clear_swap_height();
  uint32_t swap_height() const;
  void set_swap_height(uint32_t value);
  private:
  uint32_t _internal_swap_height() const;
  void _internal_set_swap_height(uint32_t value);
  public:

  // optional bool is_steam_china = 22;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheHaveVersion > socache_have_versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steamdatagram_login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_name_;
  uint32_t version_;
  uint32_t client_session_need_;
  int client_launcher_;
  uint32_t client_language_;
  int engine_;
  uint32_t platform_id_;
  int32_t os_type_;
  uint32_t render_system_;
  uint32_t render_system_req_;
  uint32_t screen_width_;
  uint32_t screen_height_;
  uint32_t screen_refresh_;
  uint32_t render_width_;
  uint32_t render_height_;
  uint32_t swap_width_;
  uint32_t swap_height_;
  bool is_steam_china_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CVars_CVar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsg_CVars.CVar) */ {
 public:
  inline CMsg_CVars_CVar() : CMsg_CVars_CVar(nullptr) {}
  ~CMsg_CVars_CVar() override;
  explicit constexpr CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsg_CVars_CVar(const CMsg_CVars_CVar& from);
  CMsg_CVars_CVar(CMsg_CVars_CVar&& from) noexcept
    : CMsg_CVars_CVar() {
    *this = ::std::move(from);
  }

  inline CMsg_CVars_CVar& operator=(const CMsg_CVars_CVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CVars_CVar& operator=(CMsg_CVars_CVar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsg_CVars_CVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CVars_CVar* internal_default_instance() {
    return reinterpret_cast<const CMsg_CVars_CVar*>(
               &_CMsg_CVars_CVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsg_CVars_CVar& a, CMsg_CVars_CVar& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsg_CVars_CVar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CVars_CVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsg_CVars_CVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsg_CVars_CVar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsg_CVars_CVar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsg_CVars_CVar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsg_CVars_CVar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsg_CVars.CVar";
  }
  protected:
  explicit CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsg_CVars.CVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CVars final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsg_CVars) */ {
 public:
  inline CMsg_CVars() : CMsg_CVars(nullptr) {}
  ~CMsg_CVars() override;
  explicit constexpr CMsg_CVars(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsg_CVars(const CMsg_CVars& from);
  CMsg_CVars(CMsg_CVars&& from) noexcept
    : CMsg_CVars() {
    *this = ::std::move(from);
  }

  inline CMsg_CVars& operator=(const CMsg_CVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CVars& operator=(CMsg_CVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsg_CVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CVars* internal_default_instance() {
    return reinterpret_cast<const CMsg_CVars*>(
               &_CMsg_CVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsg_CVars& a, CMsg_CVars& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsg_CVars* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CVars* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsg_CVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsg_CVars>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsg_CVars& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsg_CVars& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsg_CVars* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsg_CVars";
  }
  protected:
  explicit CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsg_CVars_CVar CVar;

  // accessors -------------------------------------------------------

  enum : int {
    kCvarsFieldNumber = 1,
  };
  // repeated .CMsg_CVars.CVar cvars = 1;
  int cvars_size() const;
  private:
  int _internal_cvars_size() const;
  public:
  void clear_cvars();
  ::CMsg_CVars_CVar* mutable_cvars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >*
      mutable_cvars();
  private:
  const ::CMsg_CVars_CVar& _internal_cvars(int index) const;
  ::CMsg_CVars_CVar* _internal_add_cvars();
  public:
  const ::CMsg_CVars_CVar& cvars(int index) const;
  ::CMsg_CVars_CVar* add_cvars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >&
      cvars() const;

  // @@protoc_insertion_point(class_scope:CMsg_CVars)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar > cvars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SetConVar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SetConVar) */ {
 public:
  inline CNETMsg_SetConVar() : CNETMsg_SetConVar(nullptr) {}
  ~CNETMsg_SetConVar() override;
  explicit constexpr CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SetConVar(const CNETMsg_SetConVar& from);
  CNETMsg_SetConVar(CNETMsg_SetConVar&& from) noexcept
    : CNETMsg_SetConVar() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SetConVar& operator=(const CNETMsg_SetConVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SetConVar& operator=(CNETMsg_SetConVar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_SetConVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SetConVar* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SetConVar*>(
               &_CNETMsg_SetConVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CNETMsg_SetConVar& a, CNETMsg_SetConVar& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SetConVar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SetConVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CNETMsg_SetConVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CNETMsg_SetConVar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_SetConVar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_SetConVar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SetConVar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SetConVar";
  }
  protected:
  explicit CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvarsFieldNumber = 1,
  };
  // optional .CMsg_CVars convars = 1;
  bool has_convars() const;
  private:
  bool _internal_has_convars() const;
  public:
  void clear_convars();
  const ::CMsg_CVars& convars() const;
  PROTOBUF_NODISCARD ::CMsg_CVars* release_convars();
  ::CMsg_CVars* mutable_convars();
  void set_allocated_convars(::CMsg_CVars* convars);
  private:
  const ::CMsg_CVars& _internal_convars() const;
  ::CMsg_CVars* _internal_mutable_convars();
  public:
  void unsafe_arena_set_allocated_convars(
      ::CMsg_CVars* convars);
  ::CMsg_CVars* unsafe_arena_release_convars();

  // @@protoc_insertion_point(class_scope:CNETMsg_SetConVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsg_CVars* convars_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_StringCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_StringCmd) */ {
 public:
  inline CNETMsg_StringCmd() : CNETMsg_StringCmd(nullptr) {}
  ~CNETMsg_StringCmd() override;
  explicit constexpr CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_StringCmd(const CNETMsg_StringCmd& from);
  CNETMsg_StringCmd(CNETMsg_StringCmd&& from) noexcept
    : CNETMsg_StringCmd() {
    *this = ::std::move(from);
  }

  inline CNETMsg_StringCmd& operator=(const CNETMsg_StringCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_StringCmd& operator=(CNETMsg_StringCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_StringCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_StringCmd* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_StringCmd*>(
               &_CNETMsg_StringCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CNETMsg_StringCmd& a, CNETMsg_StringCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_StringCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_StringCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CNETMsg_StringCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CNETMsg_StringCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_StringCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_StringCmd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_StringCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_StringCmd";
  }
  protected:
  explicit CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // optional string command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_StringCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMsg_CoachHUDPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMsg_CoachHUDPing) */ {
 public:
  inline CDOTAMsg_CoachHUDPing() : CDOTAMsg_CoachHUDPing(nullptr) {}
  ~CDOTAMsg_CoachHUDPing() override;
  explicit constexpr CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from);
  CDOTAMsg_CoachHUDPing(CDOTAMsg_CoachHUDPing&& from) noexcept
    : CDOTAMsg_CoachHUDPing() {
    *this = ::std::move(from);
  }

  inline CDOTAMsg_CoachHUDPing& operator=(const CDOTAMsg_CoachHUDPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMsg_CoachHUDPing& operator=(CDOTAMsg_CoachHUDPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMsg_CoachHUDPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMsg_CoachHUDPing* internal_default_instance() {
    return reinterpret_cast<const CDOTAMsg_CoachHUDPing*>(
               &_CDOTAMsg_CoachHUDPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CDOTAMsg_CoachHUDPing& a, CDOTAMsg_CoachHUDPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMsg_CoachHUDPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMsg_CoachHUDPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMsg_CoachHUDPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMsg_CoachHUDPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMsg_CoachHUDPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMsg_CoachHUDPing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMsg_CoachHUDPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMsg_CoachHUDPing";
  }
  protected:
  explicit CDOTAMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTgtpathFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional string tgtpath = 3;
  bool has_tgtpath() const;
  private:
  bool _internal_has_tgtpath() const;
  public:
  void clear_tgtpath();
  const std::string& tgtpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tgtpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tgtpath();
  PROTOBUF_NODISCARD std::string* release_tgtpath();
  void set_allocated_tgtpath(std::string* tgtpath);
  private:
  const std::string& _internal_tgtpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tgtpath(const std::string& value);
  std::string* _internal_mutable_tgtpath();
  public:

  // optional uint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMsg_CoachHUDPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tgtpath_;
  uint32_t x_;
  uint32_t y_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAUserMsg_CoachHUDPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAUserMsg_CoachHUDPing) */ {
 public:
  inline CDOTAUserMsg_CoachHUDPing() : CDOTAUserMsg_CoachHUDPing(nullptr) {}
  ~CDOTAUserMsg_CoachHUDPing() override;
  explicit constexpr CDOTAUserMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from);
  CDOTAUserMsg_CoachHUDPing(CDOTAUserMsg_CoachHUDPing&& from) noexcept
    : CDOTAUserMsg_CoachHUDPing() {
    *this = ::std::move(from);
  }

  inline CDOTAUserMsg_CoachHUDPing& operator=(const CDOTAUserMsg_CoachHUDPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAUserMsg_CoachHUDPing& operator=(CDOTAUserMsg_CoachHUDPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAUserMsg_CoachHUDPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAUserMsg_CoachHUDPing* internal_default_instance() {
    return reinterpret_cast<const CDOTAUserMsg_CoachHUDPing*>(
               &_CDOTAUserMsg_CoachHUDPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CDOTAUserMsg_CoachHUDPing& a, CDOTAUserMsg_CoachHUDPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAUserMsg_CoachHUDPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAUserMsg_CoachHUDPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAUserMsg_CoachHUDPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAUserMsg_CoachHUDPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAUserMsg_CoachHUDPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAUserMsg_CoachHUDPing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAUserMsg_CoachHUDPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAUserMsg_CoachHUDPing";
  }
  protected:
  explicit CDOTAUserMsg_CoachHUDPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHudPingFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
  bool has_hud_ping() const;
  private:
  bool _internal_has_hud_ping() const;
  public:
  void clear_hud_ping();
  const ::CDOTAMsg_CoachHUDPing& hud_ping() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_CoachHUDPing* release_hud_ping();
  ::CDOTAMsg_CoachHUDPing* mutable_hud_ping();
  void set_allocated_hud_ping(::CDOTAMsg_CoachHUDPing* hud_ping);
  private:
  const ::CDOTAMsg_CoachHUDPing& _internal_hud_ping() const;
  ::CDOTAMsg_CoachHUDPing* _internal_mutable_hud_ping();
  public:
  void unsafe_arena_set_allocated_hud_ping(
      ::CDOTAMsg_CoachHUDPing* hud_ping);
  ::CDOTAMsg_CoachHUDPing* unsafe_arena_release_hud_ping();

  // optional uint32 player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAUserMsg_CoachHUDPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CDOTAMsg_CoachHUDPing* hud_ping_;
  uint32_t player_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_GuideSelectOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_GuideSelectOption) */ {
 public:
  inline CDOTAClientMsg_GuideSelectOption() : CDOTAClientMsg_GuideSelectOption(nullptr) {}
  ~CDOTAClientMsg_GuideSelectOption() override;
  explicit constexpr CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_GuideSelectOption(const CDOTAClientMsg_GuideSelectOption& from);
  CDOTAClientMsg_GuideSelectOption(CDOTAClientMsg_GuideSelectOption&& from) noexcept
    : CDOTAClientMsg_GuideSelectOption() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_GuideSelectOption& operator=(const CDOTAClientMsg_GuideSelectOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_GuideSelectOption& operator=(CDOTAClientMsg_GuideSelectOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_GuideSelectOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_GuideSelectOption* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_GuideSelectOption*>(
               &_CDOTAClientMsg_GuideSelectOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CDOTAClientMsg_GuideSelectOption& a, CDOTAClientMsg_GuideSelectOption& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_GuideSelectOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_GuideSelectOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_GuideSelectOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_GuideSelectOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_GuideSelectOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_GuideSelectOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_GuideSelectOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_GuideSelectOption";
  }
  protected:
  explicit CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 1,
    kForceRecalculateFieldNumber = 2,
  };
  // optional uint32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  uint32_t option() const;
  void set_option(uint32_t value);
  private:
  uint32_t _internal_option() const;
  void _internal_set_option(uint32_t value);
  public:

  // optional bool force_recalculate = 2;
  bool has_force_recalculate() const;
  private:
  bool _internal_has_force_recalculate() const;
  public:
  void clear_force_recalculate();
  bool force_recalculate() const;
  void set_force_recalculate(bool value);
  private:
  bool _internal_force_recalculate() const;
  void _internal_set_force_recalculate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_GuideSelectOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t option_;
  bool force_recalculate_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_GuideSelected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_GuideSelected) */ {
 public:
  inline CDOTAClientMsg_GuideSelected() : CDOTAClientMsg_GuideSelected(nullptr) {}
  ~CDOTAClientMsg_GuideSelected() override;
  explicit constexpr CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_GuideSelected(const CDOTAClientMsg_GuideSelected& from);
  CDOTAClientMsg_GuideSelected(CDOTAClientMsg_GuideSelected&& from) noexcept
    : CDOTAClientMsg_GuideSelected() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_GuideSelected& operator=(const CDOTAClientMsg_GuideSelected& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_GuideSelected& operator=(CDOTAClientMsg_GuideSelected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_GuideSelected& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_GuideSelected* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_GuideSelected*>(
               &_CDOTAClientMsg_GuideSelected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CDOTAClientMsg_GuideSelected& a, CDOTAClientMsg_GuideSelected& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_GuideSelected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_GuideSelected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_GuideSelected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_GuideSelected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_GuideSelected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_GuideSelected& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_GuideSelected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_GuideSelected";
  }
  protected:
  explicit CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideWorkshopIdFieldNumber = 1,
    kIsPlusGuideFieldNumber = 2,
  };
  // optional uint64 guide_workshop_id = 1;
  bool has_guide_workshop_id() const;
  private:
  bool _internal_has_guide_workshop_id() const;
  public:
  void clear_guide_workshop_id();
  uint64_t guide_workshop_id() const;
  void set_guide_workshop_id(uint64_t value);
  private:
  uint64_t _internal_guide_workshop_id() const;
  void _internal_set_guide_workshop_id(uint64_t value);
  public:

  // optional bool is_plus_guide = 2;
  bool has_is_plus_guide() const;
  private:
  bool _internal_has_is_plus_guide() const;
  public:
  void clear_is_plus_guide();
  bool is_plus_guide() const;
  void set_is_plus_guide(bool value);
  private:
  bool _internal_is_plus_guide() const;
  void _internal_set_is_plus_guide(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_GuideSelected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t guide_workshop_id_;
  bool is_plus_guide_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_CmdKeyValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_CmdKeyValues) */ {
 public:
  inline CCLCMsg_CmdKeyValues() : CCLCMsg_CmdKeyValues(nullptr) {}
  ~CCLCMsg_CmdKeyValues() override;
  explicit constexpr CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from);
  CCLCMsg_CmdKeyValues(CCLCMsg_CmdKeyValues&& from) noexcept
    : CCLCMsg_CmdKeyValues() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_CmdKeyValues& operator=(const CCLCMsg_CmdKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_CmdKeyValues& operator=(CCLCMsg_CmdKeyValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_CmdKeyValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_CmdKeyValues* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_CmdKeyValues*>(
               &_CCLCMsg_CmdKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CCLCMsg_CmdKeyValues& a, CCLCMsg_CmdKeyValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_CmdKeyValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_CmdKeyValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCLCMsg_CmdKeyValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCLCMsg_CmdKeyValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_CmdKeyValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_CmdKeyValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_CmdKeyValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_CmdKeyValues";
  }
  protected:
  explicit CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_CmdKeyValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_FileCRCCheck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_FileCRCCheck) */ {
 public:
  inline CCLCMsg_FileCRCCheck() : CCLCMsg_FileCRCCheck(nullptr) {}
  ~CCLCMsg_FileCRCCheck() override;
  explicit constexpr CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from);
  CCLCMsg_FileCRCCheck(CCLCMsg_FileCRCCheck&& from) noexcept
    : CCLCMsg_FileCRCCheck() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_FileCRCCheck& operator=(const CCLCMsg_FileCRCCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_FileCRCCheck& operator=(CCLCMsg_FileCRCCheck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_FileCRCCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_FileCRCCheck* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_FileCRCCheck*>(
               &_CCLCMsg_FileCRCCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CCLCMsg_FileCRCCheck& a, CCLCMsg_FileCRCCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_FileCRCCheck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_FileCRCCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCLCMsg_FileCRCCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCLCMsg_FileCRCCheck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_FileCRCCheck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_FileCRCCheck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_FileCRCCheck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_FileCRCCheck";
  }
  protected:
  explicit CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kFilenameFieldNumber = 4,
    kCodePathFieldNumber = 1,
    kCodeFilenameFieldNumber = 3,
    kCrcFieldNumber = 5,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string filename = 4;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional int32 code_path = 1;
  bool has_code_path() const;
  private:
  bool _internal_has_code_path() const;
  public:
  void clear_code_path();
  int32_t code_path() const;
  void set_code_path(int32_t value);
  private:
  int32_t _internal_code_path() const;
  void _internal_set_code_path(int32_t value);
  public:

  // optional int32 code_filename = 3;
  bool has_code_filename() const;
  private:
  bool _internal_has_code_filename() const;
  public:
  void clear_code_filename();
  int32_t code_filename() const;
  void set_code_filename(int32_t value);
  private:
  int32_t _internal_code_filename() const;
  void _internal_set_code_filename(int32_t value);
  public:

  // optional fixed32 crc = 5;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  uint32_t crc() const;
  void set_crc(uint32_t value);
  private:
  uint32_t _internal_crc() const;
  void _internal_set_crc(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_FileCRCCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  int32_t code_path_;
  int32_t code_filename_;
  uint32_t crc_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ClientMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ClientMessage) */ {
 public:
  inline CCLCMsg_ClientMessage() : CCLCMsg_ClientMessage(nullptr) {}
  ~CCLCMsg_ClientMessage() override;
  explicit constexpr CCLCMsg_ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ClientMessage(const CCLCMsg_ClientMessage& from);
  CCLCMsg_ClientMessage(CCLCMsg_ClientMessage&& from) noexcept
    : CCLCMsg_ClientMessage() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ClientMessage& operator=(const CCLCMsg_ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ClientMessage& operator=(CCLCMsg_ClientMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ClientMessage* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ClientMessage*>(
               &_CCLCMsg_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CCLCMsg_ClientMessage& a, CCLCMsg_ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ClientMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCLCMsg_ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCLCMsg_ClientMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_ClientMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_ClientMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ClientMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ClientMessage";
  }
  protected:
  explicit CCLCMsg_ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  int32_t msg_type() const;
  void set_msg_type(int32_t value);
  private:
  int32_t _internal_msg_type() const;
  void _internal_set_msg_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_ClientMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t msg_type_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_MatchMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_MatchMetadata) */ {
 public:
  inline CDOTAClientMsg_MatchMetadata() : CDOTAClientMsg_MatchMetadata(nullptr) {}
  ~CDOTAClientMsg_MatchMetadata() override;
  explicit constexpr CDOTAClientMsg_MatchMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from);
  CDOTAClientMsg_MatchMetadata(CDOTAClientMsg_MatchMetadata&& from) noexcept
    : CDOTAClientMsg_MatchMetadata() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_MatchMetadata& operator=(const CDOTAClientMsg_MatchMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_MatchMetadata& operator=(CDOTAClientMsg_MatchMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_MatchMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_MatchMetadata* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_MatchMetadata*>(
               &_CDOTAClientMsg_MatchMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CDOTAClientMsg_MatchMetadata& a, CDOTAClientMsg_MatchMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_MatchMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_MatchMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_MatchMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_MatchMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_MatchMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_MatchMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_MatchMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_MatchMetadata";
  }
  protected:
  explicit CDOTAClientMsg_MatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kMatchIdFieldNumber = 1,
  };
  // optional bytes metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_MatchMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint64_t match_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CSOEconItemAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOEconItemAttribute) */ {
 public:
  inline CSOEconItemAttribute() : CSOEconItemAttribute(nullptr) {}
  ~CSOEconItemAttribute() override;
  explicit constexpr CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOEconItemAttribute(const CSOEconItemAttribute& from);
  CSOEconItemAttribute(CSOEconItemAttribute&& from) noexcept
    : CSOEconItemAttribute() {
    *this = ::std::move(from);
  }

  inline CSOEconItemAttribute& operator=(const CSOEconItemAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOEconItemAttribute& operator=(CSOEconItemAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOEconItemAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOEconItemAttribute* internal_default_instance() {
    return reinterpret_cast<const CSOEconItemAttribute*>(
               &_CSOEconItemAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CSOEconItemAttribute& a, CSOEconItemAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOEconItemAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOEconItemAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSOEconItemAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSOEconItemAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOEconItemAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSOEconItemAttribute& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOEconItemAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOEconItemAttribute";
  }
  protected:
  explicit CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueBytesFieldNumber = 3,
    kDefIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional bytes value_bytes = 3;
  bool has_value_bytes() const;
  private:
  bool _internal_has_value_bytes() const;
  public:
  void clear_value_bytes();
  const std::string& value_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_bytes();
  PROTOBUF_NODISCARD std::string* release_value_bytes();
  void set_allocated_value_bytes(std::string* value_bytes);
  private:
  const std::string& _internal_value_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_bytes(const std::string& value);
  std::string* _internal_mutable_value_bytes();
  public:

  // optional uint32 def_index = 1;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  uint32_t def_index() const;
  void set_def_index(uint32_t value);
  private:
  uint32_t _internal_def_index() const;
  void _internal_set_def_index(uint32_t value);
  public:

  // optional uint32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSOEconItemAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_bytes_;
  uint32_t def_index_;
  uint32_t value_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CSOEconItemEquipped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOEconItemEquipped) */ {
 public:
  inline CSOEconItemEquipped() : CSOEconItemEquipped(nullptr) {}
  ~CSOEconItemEquipped() override;
  explicit constexpr CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOEconItemEquipped(const CSOEconItemEquipped& from);
  CSOEconItemEquipped(CSOEconItemEquipped&& from) noexcept
    : CSOEconItemEquipped() {
    *this = ::std::move(from);
  }

  inline CSOEconItemEquipped& operator=(const CSOEconItemEquipped& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOEconItemEquipped& operator=(CSOEconItemEquipped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOEconItemEquipped& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOEconItemEquipped* internal_default_instance() {
    return reinterpret_cast<const CSOEconItemEquipped*>(
               &_CSOEconItemEquipped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CSOEconItemEquipped& a, CSOEconItemEquipped& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOEconItemEquipped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOEconItemEquipped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSOEconItemEquipped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSOEconItemEquipped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOEconItemEquipped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSOEconItemEquipped& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOEconItemEquipped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOEconItemEquipped";
  }
  protected:
  explicit CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewClassFieldNumber = 1,
    kNewSlotFieldNumber = 2,
  };
  // optional uint32 new_class = 1;
  bool has_new_class() const;
  private:
  bool _internal_has_new_class() const;
  public:
  void clear_new_class();
  uint32_t new_class() const;
  void set_new_class(uint32_t value);
  private:
  uint32_t _internal_new_class() const;
  void _internal_set_new_class(uint32_t value);
  public:

  // optional uint32 new_slot = 2;
  bool has_new_slot() const;
  private:
  bool _internal_has_new_slot() const;
  public:
  void clear_new_slot();
  uint32_t new_slot() const;
  void set_new_slot(uint32_t value);
  private:
  uint32_t _internal_new_slot() const;
  void _internal_set_new_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSOEconItemEquipped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t new_class_;
  uint32_t new_slot_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CSOEconItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOEconItem) */ {
 public:
  inline CSOEconItem() : CSOEconItem(nullptr) {}
  ~CSOEconItem() override;
  explicit constexpr CSOEconItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOEconItem(const CSOEconItem& from);
  CSOEconItem(CSOEconItem&& from) noexcept
    : CSOEconItem() {
    *this = ::std::move(from);
  }

  inline CSOEconItem& operator=(const CSOEconItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOEconItem& operator=(CSOEconItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOEconItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOEconItem* internal_default_instance() {
    return reinterpret_cast<const CSOEconItem*>(
               &_CSOEconItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CSOEconItem& a, CSOEconItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOEconItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOEconItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSOEconItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSOEconItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOEconItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSOEconItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOEconItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOEconItem";
  }
  protected:
  explicit CSOEconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 12,
    kEquippedStateFieldNumber = 18,
    kInteriorItemFieldNumber = 13,
    kIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kInventoryFieldNumber = 3,
    kDefIndexFieldNumber = 4,
    kFlagsFieldNumber = 8,
    kOriginFieldNumber = 9,
    kStyleFieldNumber = 15,
    kOriginalIdFieldNumber = 16,
    kQualityFieldNumber = 7,
    kQuantityFieldNumber = 5,
    kLevelFieldNumber = 6,
  };
  // repeated .CSOEconItemAttribute attribute = 12;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::CSOEconItemAttribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemAttribute >*
      mutable_attribute();
  private:
  const ::CSOEconItemAttribute& _internal_attribute(int index) const;
  ::CSOEconItemAttribute* _internal_add_attribute();
  public:
  const ::CSOEconItemAttribute& attribute(int index) const;
  ::CSOEconItemAttribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemAttribute >&
      attribute() const;

  // repeated .CSOEconItemEquipped equipped_state = 18;
  int equipped_state_size() const;
  private:
  int _internal_equipped_state_size() const;
  public:
  void clear_equipped_state();
  ::CSOEconItemEquipped* mutable_equipped_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemEquipped >*
      mutable_equipped_state();
  private:
  const ::CSOEconItemEquipped& _internal_equipped_state(int index) const;
  ::CSOEconItemEquipped* _internal_add_equipped_state();
  public:
  const ::CSOEconItemEquipped& equipped_state(int index) const;
  ::CSOEconItemEquipped* add_equipped_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemEquipped >&
      equipped_state() const;

  // optional .CSOEconItem interior_item = 13;
  bool has_interior_item() const;
  private:
  bool _internal_has_interior_item() const;
  public:
  void clear_interior_item();
  const ::CSOEconItem& interior_item() const;
  PROTOBUF_NODISCARD ::CSOEconItem* release_interior_item();
  ::CSOEconItem* mutable_interior_item();
  void set_allocated_interior_item(::CSOEconItem* interior_item);
  private:
  const ::CSOEconItem& _internal_interior_item() const;
  ::CSOEconItem* _internal_mutable_interior_item();
  public:
  void unsafe_arena_set_allocated_interior_item(
      ::CSOEconItem* interior_item);
  ::CSOEconItem* unsafe_arena_release_interior_item();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 inventory = 3;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  uint32_t inventory() const;
  void set_inventory(uint32_t value);
  private:
  uint32_t _internal_inventory() const;
  void _internal_set_inventory(uint32_t value);
  public:

  // optional uint32 def_index = 4;
  bool has_def_index() const;
  private:
  bool _internal_has_def_index() const;
  public:
  void clear_def_index();
  uint32_t def_index() const;
  void set_def_index(uint32_t value);
  private:
  uint32_t _internal_def_index() const;
  void _internal_set_def_index(uint32_t value);
  public:

  // optional uint32 flags = 8 [default = 0];
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // optional uint32 origin = 9 [default = 0];
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  uint32_t origin() const;
  void set_origin(uint32_t value);
  private:
  uint32_t _internal_origin() const;
  void _internal_set_origin(uint32_t value);
  public:

  // optional uint32 style = 15 [default = 0];
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  uint32_t style() const;
  void set_style(uint32_t value);
  private:
  uint32_t _internal_style() const;
  void _internal_set_style(uint32_t value);
  public:

  // optional uint64 original_id = 16 [default = 0];
  bool has_original_id() const;
  private:
  bool _internal_has_original_id() const;
  public:
  void clear_original_id();
  uint64_t original_id() const;
  void set_original_id(uint64_t value);
  private:
  uint64_t _internal_original_id() const;
  void _internal_set_original_id(uint64_t value);
  public:

  // optional uint32 quality = 7 [default = 4];
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  uint32_t quality() const;
  void set_quality(uint32_t value);
  private:
  uint32_t _internal_quality() const;
  void _internal_set_quality(uint32_t value);
  public:

  // optional uint32 quantity = 5 [default = 1];
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // optional uint32 level = 6 [default = 1];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSOEconItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemAttribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemEquipped > equipped_state_;
  ::CSOEconItem* interior_item_;
  uint64_t id_;
  uint32_t account_id_;
  uint32_t inventory_;
  uint32_t def_index_;
  uint32_t flags_;
  uint32_t origin_;
  uint32_t style_;
  uint64_t original_id_;
  uint32_t quality_;
  uint32_t quantity_;
  uint32_t level_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyTimedRewardDetails) */ {
 public:
  inline CLobbyTimedRewardDetails() : CLobbyTimedRewardDetails(nullptr) {}
  ~CLobbyTimedRewardDetails() override;
  explicit constexpr CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);
  CLobbyTimedRewardDetails(CLobbyTimedRewardDetails&& from) noexcept
    : CLobbyTimedRewardDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyTimedRewardDetails& operator=(CLobbyTimedRewardDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLobbyTimedRewardDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyTimedRewardDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTimedRewardDetails*>(
               &_CLobbyTimedRewardDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CLobbyTimedRewardDetails& a, CLobbyTimedRewardDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyTimedRewardDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyTimedRewardDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLobbyTimedRewardDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLobbyTimedRewardDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTimedRewardDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyTimedRewardDetails";
  }
  protected:
  explicit CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefIndexFieldNumber = 2,
    kIsSupplyCrateFieldNumber = 3,
    kIsTimedDropFieldNumber = 4,
    kAccountIdFieldNumber = 5,
    kOriginFieldNumber = 6,
  };
  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  uint32_t item_def_index() const;
  void set_item_def_index(uint32_t value);
  private:
  uint32_t _internal_item_def_index() const;
  void _internal_set_item_def_index(uint32_t value);
  public:

  // optional bool is_supply_crate = 3;
  bool has_is_supply_crate() const;
  private:
  bool _internal_has_is_supply_crate() const;
  public:
  void clear_is_supply_crate();
  bool is_supply_crate() const;
  void set_is_supply_crate(bool value);
  private:
  bool _internal_is_supply_crate() const;
  void _internal_set_is_supply_crate(bool value);
  public:

  // optional bool is_timed_drop = 4;
  bool has_is_timed_drop() const;
  private:
  bool _internal_has_is_timed_drop() const;
  public:
  void clear_is_timed_drop();
  bool is_timed_drop() const;
  void set_is_timed_drop(bool value);
  private:
  bool _internal_is_timed_drop() const;
  void _internal_set_is_timed_drop(bool value);
  public:

  // optional uint32 account_id = 5;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 origin = 6;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  uint32_t origin() const;
  void set_origin(uint32_t value);
  private:
  uint32_t _internal_origin() const;
  void _internal_set_origin(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  uint32_t account_id_;
  uint32_t origin_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchTips_SingleTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchTips.SingleTip) */ {
 public:
  inline CMsgMatchTips_SingleTip() : CMsgMatchTips_SingleTip(nullptr) {}
  ~CMsgMatchTips_SingleTip() override;
  explicit constexpr CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from);
  CMsgMatchTips_SingleTip(CMsgMatchTips_SingleTip&& from) noexcept
    : CMsgMatchTips_SingleTip() {
    *this = ::std::move(from);
  }

  inline CMsgMatchTips_SingleTip& operator=(const CMsgMatchTips_SingleTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchTips_SingleTip& operator=(CMsgMatchTips_SingleTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchTips_SingleTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchTips_SingleTip* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchTips_SingleTip*>(
               &_CMsgMatchTips_SingleTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgMatchTips_SingleTip& a, CMsgMatchTips_SingleTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchTips_SingleTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchTips_SingleTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchTips_SingleTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchTips_SingleTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchTips_SingleTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMatchTips_SingleTip& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchTips_SingleTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchTips.SingleTip";
  }
  protected:
  explicit CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceAccountIdFieldNumber = 1,
    kTargetAccountIdFieldNumber = 2,
    kTipAmountFieldNumber = 3,
    kEventIdFieldNumber = 4,
  };
  // optional uint32 source_account_id = 1;
  bool has_source_account_id() const;
  private:
  bool _internal_has_source_account_id() const;
  public:
  void clear_source_account_id();
  uint32_t source_account_id() const;
  void set_source_account_id(uint32_t value);
  private:
  uint32_t _internal_source_account_id() const;
  void _internal_set_source_account_id(uint32_t value);
  public:

  // optional uint32 target_account_id = 2;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // optional uint32 tip_amount = 3;
  bool has_tip_amount() const;
  private:
  bool _internal_has_tip_amount() const;
  public:
  void clear_tip_amount();
  uint32_t tip_amount() const;
  void set_tip_amount(uint32_t value);
  private:
  uint32_t _internal_tip_amount() const;
  void _internal_set_tip_amount(uint32_t value);
  public:

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchTips.SingleTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t source_account_id_;
  uint32_t target_account_id_;
  uint32_t tip_amount_;
  int event_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchTips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchTips) */ {
 public:
  inline CMsgMatchTips() : CMsgMatchTips(nullptr) {}
  ~CMsgMatchTips() override;
  explicit constexpr CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchTips(const CMsgMatchTips& from);
  CMsgMatchTips(CMsgMatchTips&& from) noexcept
    : CMsgMatchTips() {
    *this = ::std::move(from);
  }

  inline CMsgMatchTips& operator=(const CMsgMatchTips& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchTips& operator=(CMsgMatchTips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchTips& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchTips* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchTips*>(
               &_CMsgMatchTips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgMatchTips& a, CMsgMatchTips& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchTips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchTips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchTips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchTips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchTips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMatchTips& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchTips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchTips";
  }
  protected:
  explicit CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchTips_SingleTip SingleTip;

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 2,
  };
  // repeated .CMsgMatchTips.SingleTip tips = 2;
  int tips_size() const;
  private:
  int _internal_tips_size() const;
  public:
  void clear_tips();
  ::CMsgMatchTips_SingleTip* mutable_tips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >*
      mutable_tips();
  private:
  const ::CMsgMatchTips_SingleTip& _internal_tips(int index) const;
  ::CMsgMatchTips_SingleTip* _internal_add_tips();
  public:
  const ::CMsgMatchTips_SingleTip& tips(int index) const;
  ::CMsgMatchTips_SingleTip* add_tips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >&
      tips() const;

  // @@protoc_insertion_point(class_scope:CMsgMatchTips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip > tips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchMatchmakingStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchMatchmakingStats) */ {
 public:
  inline CMsgMatchMatchmakingStats() : CMsgMatchMatchmakingStats(nullptr) {}
  ~CMsgMatchMatchmakingStats() override;
  explicit constexpr CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from);
  CMsgMatchMatchmakingStats(CMsgMatchMatchmakingStats&& from) noexcept
    : CMsgMatchMatchmakingStats() {
    *this = ::std::move(from);
  }

  inline CMsgMatchMatchmakingStats& operator=(const CMsgMatchMatchmakingStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchMatchmakingStats& operator=(CMsgMatchMatchmakingStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchMatchmakingStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchMatchmakingStats* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchMatchmakingStats*>(
               &_CMsgMatchMatchmakingStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgMatchMatchmakingStats& a, CMsgMatchMatchmakingStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchMatchmakingStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchMatchmakingStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchMatchmakingStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchMatchmakingStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchMatchmakingStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMatchMatchmakingStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchMatchmakingStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchMatchmakingStats";
  }
  protected:
  explicit CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageQueueTimeFieldNumber = 1,
    kMaximumQueueTimeFieldNumber = 2,
    kBehaviorScoreVarianceFieldNumber = 3,
  };
  // optional uint32 average_queue_time = 1;
  bool has_average_queue_time() const;
  private:
  bool _internal_has_average_queue_time() const;
  public:
  void clear_average_queue_time();
  uint32_t average_queue_time() const;
  void set_average_queue_time(uint32_t value);
  private:
  uint32_t _internal_average_queue_time() const;
  void _internal_set_average_queue_time(uint32_t value);
  public:

  // optional uint32 maximum_queue_time = 2;
  bool has_maximum_queue_time() const;
  private:
  bool _internal_has_maximum_queue_time() const;
  public:
  void clear_maximum_queue_time();
  uint32_t maximum_queue_time() const;
  void set_maximum_queue_time(uint32_t value);
  private:
  uint32_t _internal_maximum_queue_time() const;
  void _internal_set_maximum_queue_time(uint32_t value);
  public:

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  bool has_behavior_score_variance() const;
  private:
  bool _internal_has_behavior_score_variance() const;
  public:
  void clear_behavior_score_variance();
  ::EMatchBehaviorScoreVariance behavior_score_variance() const;
  void set_behavior_score_variance(::EMatchBehaviorScoreVariance value);
  private:
  ::EMatchBehaviorScoreVariance _internal_behavior_score_variance() const;
  void _internal_set_behavior_score_variance(::EMatchBehaviorScoreVariance value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchMatchmakingStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t average_queue_time_;
  uint32_t maximum_queue_time_;
  int behavior_score_variance_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_PlayerKill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.PlayerKill) */ {
 public:
  inline CDOTAMatchMetadata_Team_PlayerKill() : CDOTAMatchMetadata_Team_PlayerKill(nullptr) {}
  ~CDOTAMatchMetadata_Team_PlayerKill() override;
  explicit constexpr CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from);
  CDOTAMatchMetadata_Team_PlayerKill(CDOTAMatchMetadata_Team_PlayerKill&& from) noexcept
    : CDOTAMatchMetadata_Team_PlayerKill() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(const CDOTAMatchMetadata_Team_PlayerKill& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_PlayerKill& operator=(CDOTAMatchMetadata_Team_PlayerKill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_PlayerKill& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_PlayerKill* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_PlayerKill*>(
               &_CDOTAMatchMetadata_Team_PlayerKill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CDOTAMatchMetadata_Team_PlayerKill& a, CDOTAMatchMetadata_Team_PlayerKill& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_PlayerKill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_PlayerKill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_PlayerKill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.PlayerKill";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimSlotFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional uint32 victim_slot = 1;
  bool has_victim_slot() const;
  private:
  bool _internal_has_victim_slot() const;
  public:
  void clear_victim_slot();
  uint32_t victim_slot() const;
  void set_victim_slot(uint32_t value);
  private:
  uint32_t _internal_victim_slot() const;
  void _internal_set_victim_slot(uint32_t value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.PlayerKill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t victim_slot_;
  uint32_t count_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_ItemPurchase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.ItemPurchase) */ {
 public:
  inline CDOTAMatchMetadata_Team_ItemPurchase() : CDOTAMatchMetadata_Team_ItemPurchase(nullptr) {}
  ~CDOTAMatchMetadata_Team_ItemPurchase() override;
  explicit constexpr CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  CDOTAMatchMetadata_Team_ItemPurchase(CDOTAMatchMetadata_Team_ItemPurchase&& from) noexcept
    : CDOTAMatchMetadata_Team_ItemPurchase() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_ItemPurchase& operator=(CDOTAMatchMetadata_Team_ItemPurchase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_ItemPurchase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_ItemPurchase* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_ItemPurchase*>(
               &_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CDOTAMatchMetadata_Team_ItemPurchase& a, CDOTAMatchMetadata_Team_ItemPurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_ItemPurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ItemPurchase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.ItemPurchase";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kPurchaseTimeFieldNumber = 2,
  };
  // optional uint32 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // optional int32 purchase_time = 2;
  bool has_purchase_time() const;
  private:
  bool _internal_has_purchase_time() const;
  public:
  void clear_purchase_time();
  int32_t purchase_time() const;
  void set_purchase_time(int32_t value);
  private:
  int32_t _internal_purchase_time() const;
  void _internal_set_purchase_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.ItemPurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t item_id_;
  int32_t purchase_time_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_InventorySnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.InventorySnapshot) */ {
 public:
  inline CDOTAMatchMetadata_Team_InventorySnapshot() : CDOTAMatchMetadata_Team_InventorySnapshot(nullptr) {}
  ~CDOTAMatchMetadata_Team_InventorySnapshot() override;
  explicit constexpr CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  CDOTAMatchMetadata_Team_InventorySnapshot(CDOTAMatchMetadata_Team_InventorySnapshot&& from) noexcept
    : CDOTAMatchMetadata_Team_InventorySnapshot() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_InventorySnapshot& operator=(CDOTAMatchMetadata_Team_InventorySnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_InventorySnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_InventorySnapshot* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_InventorySnapshot*>(
               &_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CDOTAMatchMetadata_Team_InventorySnapshot& a, CDOTAMatchMetadata_Team_InventorySnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_InventorySnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_InventorySnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.InventorySnapshot";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kGameTimeFieldNumber = 2,
    kKillsFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kAssistsFieldNumber = 5,
    kLevelFieldNumber = 6,
  };
  // repeated uint32 item_id = 1;
  int item_id_size() const;
  private:
  int _internal_item_id_size() const;
  public:
  void clear_item_id();
  private:
  uint32_t _internal_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_item_id() const;
  void _internal_add_item_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_item_id();
  public:
  uint32_t item_id(int index) const;
  void set_item_id(int index, uint32_t value);
  void add_item_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_item_id();

  // optional int32 game_time = 2;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  int32_t game_time() const;
  void set_game_time(int32_t value);
  private:
  int32_t _internal_game_time() const;
  void _internal_set_game_time(int32_t value);
  public:

  // optional uint32 kills = 3;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 5;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 level = 6;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.InventorySnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > item_id_;
  int32_t game_time_;
  uint32_t kills_;
  uint32_t deaths_;
  uint32_t assists_;
  uint32_t level_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_AutoStyleCriteria final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.AutoStyleCriteria) */ {
 public:
  inline CDOTAMatchMetadata_Team_AutoStyleCriteria() : CDOTAMatchMetadata_Team_AutoStyleCriteria(nullptr) {}
  ~CDOTAMatchMetadata_Team_AutoStyleCriteria() override;
  explicit constexpr CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  CDOTAMatchMetadata_Team_AutoStyleCriteria(CDOTAMatchMetadata_Team_AutoStyleCriteria&& from) noexcept
    : CDOTAMatchMetadata_Team_AutoStyleCriteria() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_AutoStyleCriteria& operator=(CDOTAMatchMetadata_Team_AutoStyleCriteria&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_AutoStyleCriteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_AutoStyleCriteria* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_AutoStyleCriteria*>(
               &_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CDOTAMatchMetadata_Team_AutoStyleCriteria& a, CDOTAMatchMetadata_Team_AutoStyleCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_AutoStyleCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_AutoStyleCriteria>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.AutoStyleCriteria";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameTokenFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional uint32 name_token = 1;
  bool has_name_token() const;
  private:
  bool _internal_has_name_token() const;
  public:
  void clear_name_token();
  uint32_t name_token() const;
  void set_name_token(uint32_t value);
  private:
  uint32_t _internal_name_token() const;
  void _internal_set_name_token(uint32_t value);
  public:

  // optional float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.AutoStyleCriteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t name_token_;
  float value_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_StrangeGemProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.StrangeGemProgress) */ {
 public:
  inline CDOTAMatchMetadata_Team_StrangeGemProgress() : CDOTAMatchMetadata_Team_StrangeGemProgress(nullptr) {}
  ~CDOTAMatchMetadata_Team_StrangeGemProgress() override;
  explicit constexpr CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  CDOTAMatchMetadata_Team_StrangeGemProgress(CDOTAMatchMetadata_Team_StrangeGemProgress&& from) noexcept
    : CDOTAMatchMetadata_Team_StrangeGemProgress() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_StrangeGemProgress& operator=(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_StrangeGemProgress& operator=(CDOTAMatchMetadata_Team_StrangeGemProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_StrangeGemProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_StrangeGemProgress* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_StrangeGemProgress*>(
               &_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CDOTAMatchMetadata_Team_StrangeGemProgress& a, CDOTAMatchMetadata_Team_StrangeGemProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_StrangeGemProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_StrangeGemProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.StrangeGemProgress";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillEaterTypeFieldNumber = 1,
    kGemItemDefIndexFieldNumber = 2,
    kRequiredHeroIdFieldNumber = 3,
    kStartingValueFieldNumber = 4,
    kEndingValueFieldNumber = 5,
    kOwnerItemDefIndexFieldNumber = 6,
    kOwnerItemIdFieldNumber = 7,
  };
  // optional uint32 kill_eater_type = 1;
  bool has_kill_eater_type() const;
  private:
  bool _internal_has_kill_eater_type() const;
  public:
  void clear_kill_eater_type();
  uint32_t kill_eater_type() const;
  void set_kill_eater_type(uint32_t value);
  private:
  uint32_t _internal_kill_eater_type() const;
  void _internal_set_kill_eater_type(uint32_t value);
  public:

  // optional uint32 gem_item_def_index = 2;
  bool has_gem_item_def_index() const;
  private:
  bool _internal_has_gem_item_def_index() const;
  public:
  void clear_gem_item_def_index();
  uint32_t gem_item_def_index() const;
  void set_gem_item_def_index(uint32_t value);
  private:
  uint32_t _internal_gem_item_def_index() const;
  void _internal_set_gem_item_def_index(uint32_t value);
  public:

  // optional uint32 required_hero_id = 3;
  bool has_required_hero_id() const;
  private:
  bool _internal_has_required_hero_id() const;
  public:
  void clear_required_hero_id();
  uint32_t required_hero_id() const;
  void set_required_hero_id(uint32_t value);
  private:
  uint32_t _internal_required_hero_id() const;
  void _internal_set_required_hero_id(uint32_t value);
  public:

  // optional uint32 starting_value = 4;
  bool has_starting_value() const;
  private:
  bool _internal_has_starting_value() const;
  public:
  void clear_starting_value();
  uint32_t starting_value() const;
  void set_starting_value(uint32_t value);
  private:
  uint32_t _internal_starting_value() const;
  void _internal_set_starting_value(uint32_t value);
  public:

  // optional uint32 ending_value = 5;
  bool has_ending_value() const;
  private:
  bool _internal_has_ending_value() const;
  public:
  void clear_ending_value();
  uint32_t ending_value() const;
  void set_ending_value(uint32_t value);
  private:
  uint32_t _internal_ending_value() const;
  void _internal_set_ending_value(uint32_t value);
  public:

  // optional uint32 owner_item_def_index = 6;
  bool has_owner_item_def_index() const;
  private:
  bool _internal_has_owner_item_def_index() const;
  public:
  void clear_owner_item_def_index();
  uint32_t owner_item_def_index() const;
  void set_owner_item_def_index(uint32_t value);
  private:
  uint32_t _internal_owner_item_def_index() const;
  void _internal_set_owner_item_def_index(uint32_t value);
  public:

  // optional uint64 owner_item_id = 7;
  bool has_owner_item_id() const;
  private:
  bool _internal_has_owner_item_id() const;
  public:
  void clear_owner_item_id();
  uint64_t owner_item_id() const;
  void set_owner_item_id(uint64_t value);
  private:
  uint64_t _internal_owner_item_id() const;
  void _internal_set_owner_item_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.StrangeGemProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t kill_eater_type_;
  uint32_t gem_item_def_index_;
  uint32_t required_hero_id_;
  uint32_t starting_value_;
  uint32_t ending_value_;
  uint32_t owner_item_def_index_;
  uint64_t owner_item_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_VictoryPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.VictoryPrediction) */ {
 public:
  inline CDOTAMatchMetadata_Team_VictoryPrediction() : CDOTAMatchMetadata_Team_VictoryPrediction(nullptr) {}
  ~CDOTAMatchMetadata_Team_VictoryPrediction() override;
  explicit constexpr CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  CDOTAMatchMetadata_Team_VictoryPrediction(CDOTAMatchMetadata_Team_VictoryPrediction&& from) noexcept
    : CDOTAMatchMetadata_Team_VictoryPrediction() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_VictoryPrediction& operator=(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_VictoryPrediction& operator=(CDOTAMatchMetadata_Team_VictoryPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_VictoryPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_VictoryPrediction* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_VictoryPrediction*>(
               &_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CDOTAMatchMetadata_Team_VictoryPrediction& a, CDOTAMatchMetadata_Team_VictoryPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_VictoryPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_VictoryPrediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.VictoryPrediction";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemDefIndexFieldNumber = 2,
    kStartingValueFieldNumber = 3,
    kIsVictoryFieldNumber = 4,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  uint32_t item_def_index() const;
  void set_item_def_index(uint32_t value);
  private:
  uint32_t _internal_item_def_index() const;
  void _internal_set_item_def_index(uint32_t value);
  public:

  // optional uint32 starting_value = 3;
  bool has_starting_value() const;
  private:
  bool _internal_has_starting_value() const;
  public:
  void clear_starting_value();
  uint32_t starting_value() const;
  void set_starting_value(uint32_t value);
  private:
  uint32_t _internal_starting_value() const;
  void _internal_set_starting_value(uint32_t value);
  public:

  // optional bool is_victory = 4;
  bool has_is_victory() const;
  private:
  bool _internal_has_is_victory() const;
  public:
  void clear_is_victory();
  bool is_victory() const;
  void set_is_victory(bool value);
  private:
  bool _internal_is_victory() const;
  void _internal_set_is_victory(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.VictoryPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t item_id_;
  uint32_t item_def_index_;
  uint32_t starting_value_;
  bool is_victory_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_SubChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.SubChallenge) */ {
 public:
  inline CDOTAMatchMetadata_Team_SubChallenge() : CDOTAMatchMetadata_Team_SubChallenge(nullptr) {}
  ~CDOTAMatchMetadata_Team_SubChallenge() override;
  explicit constexpr CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from);
  CDOTAMatchMetadata_Team_SubChallenge(CDOTAMatchMetadata_Team_SubChallenge&& from) noexcept
    : CDOTAMatchMetadata_Team_SubChallenge() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_SubChallenge& operator=(const CDOTAMatchMetadata_Team_SubChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_SubChallenge& operator=(CDOTAMatchMetadata_Team_SubChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_SubChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_SubChallenge* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_SubChallenge*>(
               &_CDOTAMatchMetadata_Team_SubChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CDOTAMatchMetadata_Team_SubChallenge& a, CDOTAMatchMetadata_Team_SubChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_SubChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_SubChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_SubChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.SubChallenge";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotIdFieldNumber = 1,
    kStartValueFieldNumber = 2,
    kEndValueFieldNumber = 3,
    kCompletedFieldNumber = 4,
  };
  // optional uint32 slot_id = 1;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 start_value = 2;
  bool has_start_value() const;
  private:
  bool _internal_has_start_value() const;
  public:
  void clear_start_value();
  uint32_t start_value() const;
  void set_start_value(uint32_t value);
  private:
  uint32_t _internal_start_value() const;
  void _internal_set_start_value(uint32_t value);
  public:

  // optional uint32 end_value = 3;
  bool has_end_value() const;
  private:
  bool _internal_has_end_value() const;
  public:
  void clear_end_value();
  uint32_t end_value() const;
  void set_end_value(uint32_t value);
  private:
  uint32_t _internal_end_value() const;
  void _internal_set_end_value(uint32_t value);
  public:

  // optional bool completed = 4;
  bool has_completed() const;
  private:
  bool _internal_has_completed() const;
  public:
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.SubChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t slot_id_;
  uint32_t start_value_;
  uint32_t end_value_;
  bool completed_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_CavernChallengeResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.CavernChallengeResult) */ {
 public:
  inline CDOTAMatchMetadata_Team_CavernChallengeResult() : CDOTAMatchMetadata_Team_CavernChallengeResult(nullptr) {}
  ~CDOTAMatchMetadata_Team_CavernChallengeResult() override;
  explicit constexpr CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_CavernChallengeResult(const CDOTAMatchMetadata_Team_CavernChallengeResult& from);
  CDOTAMatchMetadata_Team_CavernChallengeResult(CDOTAMatchMetadata_Team_CavernChallengeResult&& from) noexcept
    : CDOTAMatchMetadata_Team_CavernChallengeResult() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_CavernChallengeResult& operator=(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_CavernChallengeResult& operator=(CDOTAMatchMetadata_Team_CavernChallengeResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_CavernChallengeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_CavernChallengeResult* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_CavernChallengeResult*>(
               &_CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CDOTAMatchMetadata_Team_CavernChallengeResult& a, CDOTAMatchMetadata_Team_CavernChallengeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_CavernChallengeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_CavernChallengeResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.CavernChallengeResult";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedPathIdFieldNumber = 1,
    kClaimedRoomIdFieldNumber = 2,
  };
  // optional uint32 completed_path_id = 1;
  bool has_completed_path_id() const;
  private:
  bool _internal_has_completed_path_id() const;
  public:
  void clear_completed_path_id();
  uint32_t completed_path_id() const;
  void set_completed_path_id(uint32_t value);
  private:
  uint32_t _internal_completed_path_id() const;
  void _internal_set_completed_path_id(uint32_t value);
  public:

  // optional uint32 claimed_room_id = 2;
  bool has_claimed_room_id() const;
  private:
  bool _internal_has_claimed_room_id() const;
  public:
  void clear_claimed_room_id();
  uint32_t claimed_room_id() const;
  void set_claimed_room_id(uint32_t value);
  private:
  uint32_t _internal_claimed_room_id() const;
  void _internal_set_claimed_room_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.CavernChallengeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t completed_path_id_;
  uint32_t claimed_room_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_ActionGrant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.ActionGrant) */ {
 public:
  inline CDOTAMatchMetadata_Team_ActionGrant() : CDOTAMatchMetadata_Team_ActionGrant(nullptr) {}
  ~CDOTAMatchMetadata_Team_ActionGrant() override;
  explicit constexpr CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_ActionGrant(const CDOTAMatchMetadata_Team_ActionGrant& from);
  CDOTAMatchMetadata_Team_ActionGrant(CDOTAMatchMetadata_Team_ActionGrant&& from) noexcept
    : CDOTAMatchMetadata_Team_ActionGrant() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_ActionGrant& operator=(const CDOTAMatchMetadata_Team_ActionGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_ActionGrant& operator=(CDOTAMatchMetadata_Team_ActionGrant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_ActionGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_ActionGrant* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_ActionGrant*>(
               &_CDOTAMatchMetadata_Team_ActionGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CDOTAMatchMetadata_Team_ActionGrant& a, CDOTAMatchMetadata_Team_ActionGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_ActionGrant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_ActionGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_ActionGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_ActionGrant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_ActionGrant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_ActionGrant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_ActionGrant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.ActionGrant";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kAuditFieldNumber = 3,
  };
  // optional uint32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  uint32_t action_id() const;
  void set_action_id(uint32_t value);
  private:
  uint32_t _internal_action_id() const;
  void _internal_set_action_id(uint32_t value);
  public:

  // optional uint32 quantity = 2;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // optional uint32 audit = 3;
  bool has_audit() const;
  private:
  bool _internal_has_audit() const;
  public:
  void clear_audit();
  uint32_t audit() const;
  void set_audit(uint32_t value);
  private:
  uint32_t _internal_audit() const;
  void _internal_set_audit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.ActionGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t action_id_;
  uint32_t quantity_;
  uint32_t audit_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_EventData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.EventData) */ {
 public:
  inline CDOTAMatchMetadata_Team_EventData() : CDOTAMatchMetadata_Team_EventData(nullptr) {}
  ~CDOTAMatchMetadata_Team_EventData() override;
  explicit constexpr CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from);
  CDOTAMatchMetadata_Team_EventData(CDOTAMatchMetadata_Team_EventData&& from) noexcept
    : CDOTAMatchMetadata_Team_EventData() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_EventData& operator=(const CDOTAMatchMetadata_Team_EventData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_EventData& operator=(CDOTAMatchMetadata_Team_EventData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_EventData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_EventData* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_EventData*>(
               &_CDOTAMatchMetadata_Team_EventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CDOTAMatchMetadata_Team_EventData& a, CDOTAMatchMetadata_Team_EventData& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_EventData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_EventData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_EventData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_EventData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_EventData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_EventData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_EventData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.EventData";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubChallengesWithProgressFieldNumber = 10,
    kCavernChallengeMapResultsFieldNumber = 17,
    kActionsGrantedFieldNumber = 19,
    kEventIdFieldNumber = 1,
    kEventPointsFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeQuestIdFieldNumber = 4,
    kChallengeQuestChallengeIdFieldNumber = 5,
    kChallengeRankCompletedFieldNumber = 7,
    kChallengeRankPreviouslyCompletedFieldNumber = 8,
    kChallengeCompletedFieldNumber = 6,
    kEventOwnedFieldNumber = 9,
    kCavernChallengeActiveFieldNumber = 12,
    kWagerWinningsFieldNumber = 11,
    kCavernChallengeWinningsFieldNumber = 13,
    kAmountWageredFieldNumber = 14,
    kTeamWagerAmountFieldNumber = 15,
    kPeriodicPointAdjustmentsFieldNumber = 16,
    kCavernChallengePlusShardWinningsFieldNumber = 18,
  };
  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  int sub_challenges_with_progress_size() const;
  private:
  int _internal_sub_challenges_with_progress_size() const;
  public:
  void clear_sub_challenges_with_progress();
  ::CDOTAMatchMetadata_Team_SubChallenge* mutable_sub_challenges_with_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >*
      mutable_sub_challenges_with_progress();
  private:
  const ::CDOTAMatchMetadata_Team_SubChallenge& _internal_sub_challenges_with_progress(int index) const;
  ::CDOTAMatchMetadata_Team_SubChallenge* _internal_add_sub_challenges_with_progress();
  public:
  const ::CDOTAMatchMetadata_Team_SubChallenge& sub_challenges_with_progress(int index) const;
  ::CDOTAMatchMetadata_Team_SubChallenge* add_sub_challenges_with_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >&
      sub_challenges_with_progress() const;

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  int cavern_challenge_map_results_size() const;
  private:
  int _internal_cavern_challenge_map_results_size() const;
  public:
  void clear_cavern_challenge_map_results();
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* mutable_cavern_challenge_map_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >*
      mutable_cavern_challenge_map_results();
  private:
  const ::CDOTAMatchMetadata_Team_CavernChallengeResult& _internal_cavern_challenge_map_results(int index) const;
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* _internal_add_cavern_challenge_map_results();
  public:
  const ::CDOTAMatchMetadata_Team_CavernChallengeResult& cavern_challenge_map_results(int index) const;
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* add_cavern_challenge_map_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >&
      cavern_challenge_map_results() const;

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  int actions_granted_size() const;
  private:
  int _internal_actions_granted_size() const;
  public:
  void clear_actions_granted();
  ::CDOTAMatchMetadata_Team_ActionGrant* mutable_actions_granted(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >*
      mutable_actions_granted();
  private:
  const ::CDOTAMatchMetadata_Team_ActionGrant& _internal_actions_granted(int index) const;
  ::CDOTAMatchMetadata_Team_ActionGrant* _internal_add_actions_granted();
  public:
  const ::CDOTAMatchMetadata_Team_ActionGrant& actions_granted(int index) const;
  ::CDOTAMatchMetadata_Team_ActionGrant* add_actions_granted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >&
      actions_granted() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 event_points = 2;
  bool has_event_points() const;
  private:
  bool _internal_has_event_points() const;
  public:
  void clear_event_points();
  uint32_t event_points() const;
  void set_event_points(uint32_t value);
  private:
  uint32_t _internal_event_points() const;
  void _internal_set_event_points(uint32_t value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  uint32_t challenge_instance_id() const;
  void set_challenge_instance_id(uint32_t value);
  private:
  uint32_t _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(uint32_t value);
  public:

  // optional uint32 challenge_quest_id = 4;
  bool has_challenge_quest_id() const;
  private:
  bool _internal_has_challenge_quest_id() const;
  public:
  void clear_challenge_quest_id();
  uint32_t challenge_quest_id() const;
  void set_challenge_quest_id(uint32_t value);
  private:
  uint32_t _internal_challenge_quest_id() const;
  void _internal_set_challenge_quest_id(uint32_t value);
  public:

  // optional uint32 challenge_quest_challenge_id = 5;
  bool has_challenge_quest_challenge_id() const;
  private:
  bool _internal_has_challenge_quest_challenge_id() const;
  public:
  void clear_challenge_quest_challenge_id();
  uint32_t challenge_quest_challenge_id() const;
  void set_challenge_quest_challenge_id(uint32_t value);
  private:
  uint32_t _internal_challenge_quest_challenge_id() const;
  void _internal_set_challenge_quest_challenge_id(uint32_t value);
  public:

  // optional uint32 challenge_rank_completed = 7;
  bool has_challenge_rank_completed() const;
  private:
  bool _internal_has_challenge_rank_completed() const;
  public:
  void clear_challenge_rank_completed();
  uint32_t challenge_rank_completed() const;
  void set_challenge_rank_completed(uint32_t value);
  private:
  uint32_t _internal_challenge_rank_completed() const;
  void _internal_set_challenge_rank_completed(uint32_t value);
  public:

  // optional uint32 challenge_rank_previously_completed = 8;
  bool has_challenge_rank_previously_completed() const;
  private:
  bool _internal_has_challenge_rank_previously_completed() const;
  public:
  void clear_challenge_rank_previously_completed();
  uint32_t challenge_rank_previously_completed() const;
  void set_challenge_rank_previously_completed(uint32_t value);
  private:
  uint32_t _internal_challenge_rank_previously_completed() const;
  void _internal_set_challenge_rank_previously_completed(uint32_t value);
  public:

  // optional bool challenge_completed = 6;
  bool has_challenge_completed() const;
  private:
  bool _internal_has_challenge_completed() const;
  public:
  void clear_challenge_completed();
  bool challenge_completed() const;
  void set_challenge_completed(bool value);
  private:
  bool _internal_challenge_completed() const;
  void _internal_set_challenge_completed(bool value);
  public:

  // optional bool event_owned = 9;
  bool has_event_owned() const;
  private:
  bool _internal_has_event_owned() const;
  public:
  void clear_event_owned();
  bool event_owned() const;
  void set_event_owned(bool value);
  private:
  bool _internal_event_owned() const;
  void _internal_set_event_owned(bool value);
  public:

  // optional bool cavern_challenge_active = 12;
  bool has_cavern_challenge_active() const;
  private:
  bool _internal_has_cavern_challenge_active() const;
  public:
  void clear_cavern_challenge_active();
  bool cavern_challenge_active() const;
  void set_cavern_challenge_active(bool value);
  private:
  bool _internal_cavern_challenge_active() const;
  void _internal_set_cavern_challenge_active(bool value);
  public:

  // optional uint32 wager_winnings = 11;
  bool has_wager_winnings() const;
  private:
  bool _internal_has_wager_winnings() const;
  public:
  void clear_wager_winnings();
  uint32_t wager_winnings() const;
  void set_wager_winnings(uint32_t value);
  private:
  uint32_t _internal_wager_winnings() const;
  void _internal_set_wager_winnings(uint32_t value);
  public:

  // optional uint32 cavern_challenge_winnings = 13;
  bool has_cavern_challenge_winnings() const;
  private:
  bool _internal_has_cavern_challenge_winnings() const;
  public:
  void clear_cavern_challenge_winnings();
  uint32_t cavern_challenge_winnings() const;
  void set_cavern_challenge_winnings(uint32_t value);
  private:
  uint32_t _internal_cavern_challenge_winnings() const;
  void _internal_set_cavern_challenge_winnings(uint32_t value);
  public:

  // optional uint32 amount_wagered = 14;
  bool has_amount_wagered() const;
  private:
  bool _internal_has_amount_wagered() const;
  public:
  void clear_amount_wagered();
  uint32_t amount_wagered() const;
  void set_amount_wagered(uint32_t value);
  private:
  uint32_t _internal_amount_wagered() const;
  void _internal_set_amount_wagered(uint32_t value);
  public:

  // optional uint32 team_wager_amount = 15;
  bool has_team_wager_amount() const;
  private:
  bool _internal_has_team_wager_amount() const;
  public:
  void clear_team_wager_amount();
  uint32_t team_wager_amount() const;
  void set_team_wager_amount(uint32_t value);
  private:
  uint32_t _internal_team_wager_amount() const;
  void _internal_set_team_wager_amount(uint32_t value);
  public:

  // optional uint32 periodic_point_adjustments = 16;
  bool has_periodic_point_adjustments() const;
  private:
  bool _internal_has_periodic_point_adjustments() const;
  public:
  void clear_periodic_point_adjustments();
  uint32_t periodic_point_adjustments() const;
  void set_periodic_point_adjustments(uint32_t value);
  private:
  uint32_t _internal_periodic_point_adjustments() const;
  void _internal_set_periodic_point_adjustments(uint32_t value);
  public:

  // optional uint32 cavern_challenge_plus_shard_winnings = 18;
  bool has_cavern_challenge_plus_shard_winnings() const;
  private:
  bool _internal_has_cavern_challenge_plus_shard_winnings() const;
  public:
  void clear_cavern_challenge_plus_shard_winnings();
  uint32_t cavern_challenge_plus_shard_winnings() const;
  void set_cavern_challenge_plus_shard_winnings(uint32_t value);
  private:
  uint32_t _internal_cavern_challenge_plus_shard_winnings() const;
  void _internal_set_cavern_challenge_plus_shard_winnings(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.EventData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge > sub_challenges_with_progress_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult > cavern_challenge_map_results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant > actions_granted_;
  uint32_t event_id_;
  uint32_t event_points_;
  uint32_t challenge_instance_id_;
  uint32_t challenge_quest_id_;
  uint32_t challenge_quest_challenge_id_;
  uint32_t challenge_rank_completed_;
  uint32_t challenge_rank_previously_completed_;
  bool challenge_completed_;
  bool event_owned_;
  bool cavern_challenge_active_;
  uint32_t wager_winnings_;
  uint32_t cavern_challenge_winnings_;
  uint32_t amount_wagered_;
  uint32_t team_wager_amount_;
  uint32_t periodic_point_adjustments_;
  uint32_t cavern_challenge_plus_shard_winnings_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team.Player) */ {
 public:
  inline CDOTAMatchMetadata_Team_Player() : CDOTAMatchMetadata_Team_Player(nullptr) {}
  ~CDOTAMatchMetadata_Team_Player() override;
  explicit constexpr CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from);
  CDOTAMatchMetadata_Team_Player(CDOTAMatchMetadata_Team_Player&& from) noexcept
    : CDOTAMatchMetadata_Team_Player() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team_Player& operator=(const CDOTAMatchMetadata_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team_Player& operator=(CDOTAMatchMetadata_Team_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team_Player*>(
               &_CDOTAMatchMetadata_Team_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CDOTAMatchMetadata_Team_Player& a, CDOTAMatchMetadata_Team_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team_Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team.Player";
  }
  protected:
  explicit CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityUpgradesFieldNumber = 2,
    kEquippedEconItemsFieldNumber = 4,
    kKillsFieldNumber = 5,
    kItemsFieldNumber = 6,
    kLevelUpTimesFieldNumber = 22,
    kGraphNetWorthFieldNumber = 23,
    kInventorySnapshotFieldNumber = 24,
    kAutoStyleCriteriaFieldNumber = 26,
    kEventDataFieldNumber = 29,
    kStrangeGemProgressFieldNumber = 30,
    kVictoryPredictionFieldNumber = 33,
    kAccountIdFieldNumber = 1,
    kPlayerSlotFieldNumber = 3,
    kAvgKillsX16FieldNumber = 7,
    kAvgDeathsX16FieldNumber = 8,
    kAvgAssistsX16FieldNumber = 9,
    kAvgGpmX16FieldNumber = 10,
    kAvgXpmX16FieldNumber = 11,
    kBestKillsX16FieldNumber = 12,
    kBestAssistsX16FieldNumber = 13,
    kBestGpmX16FieldNumber = 14,
    kBestXpmX16FieldNumber = 15,
    kWinStreakFieldNumber = 16,
    kBestWinStreakFieldNumber = 17,
    kFightScoreFieldNumber = 18,
    kFarmScoreFieldNumber = 19,
    kSupportScoreFieldNumber = 20,
    kPushScoreFieldNumber = 21,
    kAvgStatsCalibratedFieldNumber = 25,
    kHeroXpFieldNumber = 31,
    kCampsStackedFieldNumber = 32,
    kLaneSelectionFlagsFieldNumber = 34,
    kRampagesFieldNumber = 35,
    kTripleKillsFieldNumber = 36,
    kAegisSnatchedFieldNumber = 37,
    kRapiersPurchasedFieldNumber = 38,
    kCouriersKilledFieldNumber = 39,
    kNetWorthRankFieldNumber = 40,
    kSupportGoldSpentFieldNumber = 41,
    kObserverWardsPlacedFieldNumber = 42,
    kSentryWardsPlacedFieldNumber = 43,
    kWardsDewardedFieldNumber = 44,
    kStunDurationFieldNumber = 45,
    kRankMmrBoostTypeFieldNumber = 46,
  };
  // repeated uint32 ability_upgrades = 2;
  int ability_upgrades_size() const;
  private:
  int _internal_ability_upgrades_size() const;
  public:
  void clear_ability_upgrades();
  private:
  uint32_t _internal_ability_upgrades(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ability_upgrades() const;
  void _internal_add_ability_upgrades(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ability_upgrades();
  public:
  uint32_t ability_upgrades(int index) const;
  void set_ability_upgrades(int index, uint32_t value);
  void add_ability_upgrades(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ability_upgrades() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ability_upgrades();

  // repeated .CSOEconItem equipped_econ_items = 4;
  int equipped_econ_items_size() const;
  private:
  int _internal_equipped_econ_items_size() const;
  public:
  void clear_equipped_econ_items();
  ::CSOEconItem* mutable_equipped_econ_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
      mutable_equipped_econ_items();
  private:
  const ::CSOEconItem& _internal_equipped_econ_items(int index) const;
  ::CSOEconItem* _internal_add_equipped_econ_items();
  public:
  const ::CSOEconItem& equipped_econ_items(int index) const;
  ::CSOEconItem* add_equipped_econ_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
      equipped_econ_items() const;

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  int kills_size() const;
  private:
  int _internal_kills_size() const;
  public:
  void clear_kills();
  ::CDOTAMatchMetadata_Team_PlayerKill* mutable_kills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >*
      mutable_kills();
  private:
  const ::CDOTAMatchMetadata_Team_PlayerKill& _internal_kills(int index) const;
  ::CDOTAMatchMetadata_Team_PlayerKill* _internal_add_kills();
  public:
  const ::CDOTAMatchMetadata_Team_PlayerKill& kills(int index) const;
  ::CDOTAMatchMetadata_Team_PlayerKill* add_kills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >&
      kills() const;

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CDOTAMatchMetadata_Team_ItemPurchase* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >*
      mutable_items();
  private:
  const ::CDOTAMatchMetadata_Team_ItemPurchase& _internal_items(int index) const;
  ::CDOTAMatchMetadata_Team_ItemPurchase* _internal_add_items();
  public:
  const ::CDOTAMatchMetadata_Team_ItemPurchase& items(int index) const;
  ::CDOTAMatchMetadata_Team_ItemPurchase* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >&
      items() const;

  // repeated uint32 level_up_times = 22;
  int level_up_times_size() const;
  private:
  int _internal_level_up_times_size() const;
  public:
  void clear_level_up_times();
  private:
  uint32_t _internal_level_up_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_level_up_times() const;
  void _internal_add_level_up_times(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_level_up_times();
  public:
  uint32_t level_up_times(int index) const;
  void set_level_up_times(int index, uint32_t value);
  void add_level_up_times(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      level_up_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_level_up_times();

  // repeated float graph_net_worth = 23;
  int graph_net_worth_size() const;
  private:
  int _internal_graph_net_worth_size() const;
  public:
  void clear_graph_net_worth();
  private:
  float _internal_graph_net_worth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_net_worth() const;
  void _internal_add_graph_net_worth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_net_worth();
  public:
  float graph_net_worth(int index) const;
  void set_graph_net_worth(int index, float value);
  void add_graph_net_worth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_net_worth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  int inventory_snapshot_size() const;
  private:
  int _internal_inventory_snapshot_size() const;
  public:
  void clear_inventory_snapshot();
  ::CDOTAMatchMetadata_Team_InventorySnapshot* mutable_inventory_snapshot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >*
      mutable_inventory_snapshot();
  private:
  const ::CDOTAMatchMetadata_Team_InventorySnapshot& _internal_inventory_snapshot(int index) const;
  ::CDOTAMatchMetadata_Team_InventorySnapshot* _internal_add_inventory_snapshot();
  public:
  const ::CDOTAMatchMetadata_Team_InventorySnapshot& inventory_snapshot(int index) const;
  ::CDOTAMatchMetadata_Team_InventorySnapshot* add_inventory_snapshot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >&
      inventory_snapshot() const;

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  int auto_style_criteria_size() const;
  private:
  int _internal_auto_style_criteria_size() const;
  public:
  void clear_auto_style_criteria();
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* mutable_auto_style_criteria(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
      mutable_auto_style_criteria();
  private:
  const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& _internal_auto_style_criteria(int index) const;
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* _internal_add_auto_style_criteria();
  public:
  const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& auto_style_criteria(int index) const;
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* add_auto_style_criteria();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
      auto_style_criteria() const;

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  int event_data_size() const;
  private:
  int _internal_event_data_size() const;
  public:
  void clear_event_data();
  ::CDOTAMatchMetadata_Team_EventData* mutable_event_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >*
      mutable_event_data();
  private:
  const ::CDOTAMatchMetadata_Team_EventData& _internal_event_data(int index) const;
  ::CDOTAMatchMetadata_Team_EventData* _internal_add_event_data();
  public:
  const ::CDOTAMatchMetadata_Team_EventData& event_data(int index) const;
  ::CDOTAMatchMetadata_Team_EventData* add_event_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >&
      event_data() const;

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  int strange_gem_progress_size() const;
  private:
  int _internal_strange_gem_progress_size() const;
  public:
  void clear_strange_gem_progress();
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* mutable_strange_gem_progress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >*
      mutable_strange_gem_progress();
  private:
  const ::CDOTAMatchMetadata_Team_StrangeGemProgress& _internal_strange_gem_progress(int index) const;
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* _internal_add_strange_gem_progress();
  public:
  const ::CDOTAMatchMetadata_Team_StrangeGemProgress& strange_gem_progress(int index) const;
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* add_strange_gem_progress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >&
      strange_gem_progress() const;

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  int victory_prediction_size() const;
  private:
  int _internal_victory_prediction_size() const;
  public:
  void clear_victory_prediction();
  ::CDOTAMatchMetadata_Team_VictoryPrediction* mutable_victory_prediction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >*
      mutable_victory_prediction();
  private:
  const ::CDOTAMatchMetadata_Team_VictoryPrediction& _internal_victory_prediction(int index) const;
  ::CDOTAMatchMetadata_Team_VictoryPrediction* _internal_add_victory_prediction();
  public:
  const ::CDOTAMatchMetadata_Team_VictoryPrediction& victory_prediction(int index) const;
  ::CDOTAMatchMetadata_Team_VictoryPrediction* add_victory_prediction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >&
      victory_prediction() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 player_slot = 3;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 avg_kills_x16 = 7;
  bool has_avg_kills_x16() const;
  private:
  bool _internal_has_avg_kills_x16() const;
  public:
  void clear_avg_kills_x16();
  uint32_t avg_kills_x16() const;
  void set_avg_kills_x16(uint32_t value);
  private:
  uint32_t _internal_avg_kills_x16() const;
  void _internal_set_avg_kills_x16(uint32_t value);
  public:

  // optional uint32 avg_deaths_x16 = 8;
  bool has_avg_deaths_x16() const;
  private:
  bool _internal_has_avg_deaths_x16() const;
  public:
  void clear_avg_deaths_x16();
  uint32_t avg_deaths_x16() const;
  void set_avg_deaths_x16(uint32_t value);
  private:
  uint32_t _internal_avg_deaths_x16() const;
  void _internal_set_avg_deaths_x16(uint32_t value);
  public:

  // optional uint32 avg_assists_x16 = 9;
  bool has_avg_assists_x16() const;
  private:
  bool _internal_has_avg_assists_x16() const;
  public:
  void clear_avg_assists_x16();
  uint32_t avg_assists_x16() const;
  void set_avg_assists_x16(uint32_t value);
  private:
  uint32_t _internal_avg_assists_x16() const;
  void _internal_set_avg_assists_x16(uint32_t value);
  public:

  // optional uint32 avg_gpm_x16 = 10;
  bool has_avg_gpm_x16() const;
  private:
  bool _internal_has_avg_gpm_x16() const;
  public:
  void clear_avg_gpm_x16();
  uint32_t avg_gpm_x16() const;
  void set_avg_gpm_x16(uint32_t value);
  private:
  uint32_t _internal_avg_gpm_x16() const;
  void _internal_set_avg_gpm_x16(uint32_t value);
  public:

  // optional uint32 avg_xpm_x16 = 11;
  bool has_avg_xpm_x16() const;
  private:
  bool _internal_has_avg_xpm_x16() const;
  public:
  void clear_avg_xpm_x16();
  uint32_t avg_xpm_x16() const;
  void set_avg_xpm_x16(uint32_t value);
  private:
  uint32_t _internal_avg_xpm_x16() const;
  void _internal_set_avg_xpm_x16(uint32_t value);
  public:

  // optional uint32 best_kills_x16 = 12;
  bool has_best_kills_x16() const;
  private:
  bool _internal_has_best_kills_x16() const;
  public:
  void clear_best_kills_x16();
  uint32_t best_kills_x16() const;
  void set_best_kills_x16(uint32_t value);
  private:
  uint32_t _internal_best_kills_x16() const;
  void _internal_set_best_kills_x16(uint32_t value);
  public:

  // optional uint32 best_assists_x16 = 13;
  bool has_best_assists_x16() const;
  private:
  bool _internal_has_best_assists_x16() const;
  public:
  void clear_best_assists_x16();
  uint32_t best_assists_x16() const;
  void set_best_assists_x16(uint32_t value);
  private:
  uint32_t _internal_best_assists_x16() const;
  void _internal_set_best_assists_x16(uint32_t value);
  public:

  // optional uint32 best_gpm_x16 = 14;
  bool has_best_gpm_x16() const;
  private:
  bool _internal_has_best_gpm_x16() const;
  public:
  void clear_best_gpm_x16();
  uint32_t best_gpm_x16() const;
  void set_best_gpm_x16(uint32_t value);
  private:
  uint32_t _internal_best_gpm_x16() const;
  void _internal_set_best_gpm_x16(uint32_t value);
  public:

  // optional uint32 best_xpm_x16 = 15;
  bool has_best_xpm_x16() const;
  private:
  bool _internal_has_best_xpm_x16() const;
  public:
  void clear_best_xpm_x16();
  uint32_t best_xpm_x16() const;
  void set_best_xpm_x16(uint32_t value);
  private:
  uint32_t _internal_best_xpm_x16() const;
  void _internal_set_best_xpm_x16(uint32_t value);
  public:

  // optional uint32 win_streak = 16;
  bool has_win_streak() const;
  private:
  bool _internal_has_win_streak() const;
  public:
  void clear_win_streak();
  uint32_t win_streak() const;
  void set_win_streak(uint32_t value);
  private:
  uint32_t _internal_win_streak() const;
  void _internal_set_win_streak(uint32_t value);
  public:

  // optional uint32 best_win_streak = 17;
  bool has_best_win_streak() const;
  private:
  bool _internal_has_best_win_streak() const;
  public:
  void clear_best_win_streak();
  uint32_t best_win_streak() const;
  void set_best_win_streak(uint32_t value);
  private:
  uint32_t _internal_best_win_streak() const;
  void _internal_set_best_win_streak(uint32_t value);
  public:

  // optional float fight_score = 18;
  bool has_fight_score() const;
  private:
  bool _internal_has_fight_score() const;
  public:
  void clear_fight_score();
  float fight_score() const;
  void set_fight_score(float value);
  private:
  float _internal_fight_score() const;
  void _internal_set_fight_score(float value);
  public:

  // optional float farm_score = 19;
  bool has_farm_score() const;
  private:
  bool _internal_has_farm_score() const;
  public:
  void clear_farm_score();
  float farm_score() const;
  void set_farm_score(float value);
  private:
  float _internal_farm_score() const;
  void _internal_set_farm_score(float value);
  public:

  // optional float support_score = 20;
  bool has_support_score() const;
  private:
  bool _internal_has_support_score() const;
  public:
  void clear_support_score();
  float support_score() const;
  void set_support_score(float value);
  private:
  float _internal_support_score() const;
  void _internal_set_support_score(float value);
  public:

  // optional float push_score = 21;
  bool has_push_score() const;
  private:
  bool _internal_has_push_score() const;
  public:
  void clear_push_score();
  float push_score() const;
  void set_push_score(float value);
  private:
  float _internal_push_score() const;
  void _internal_set_push_score(float value);
  public:

  // optional bool avg_stats_calibrated = 25;
  bool has_avg_stats_calibrated() const;
  private:
  bool _internal_has_avg_stats_calibrated() const;
  public:
  void clear_avg_stats_calibrated();
  bool avg_stats_calibrated() const;
  void set_avg_stats_calibrated(bool value);
  private:
  bool _internal_avg_stats_calibrated() const;
  void _internal_set_avg_stats_calibrated(bool value);
  public:

  // optional uint32 hero_xp = 31;
  bool has_hero_xp() const;
  private:
  bool _internal_has_hero_xp() const;
  public:
  void clear_hero_xp();
  uint32_t hero_xp() const;
  void set_hero_xp(uint32_t value);
  private:
  uint32_t _internal_hero_xp() const;
  void _internal_set_hero_xp(uint32_t value);
  public:

  // optional uint32 camps_stacked = 32;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  uint32_t camps_stacked() const;
  void set_camps_stacked(uint32_t value);
  private:
  uint32_t _internal_camps_stacked() const;
  void _internal_set_camps_stacked(uint32_t value);
  public:

  // optional uint32 lane_selection_flags = 34;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  uint32_t lane_selection_flags() const;
  void set_lane_selection_flags(uint32_t value);
  private:
  uint32_t _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(uint32_t value);
  public:

  // optional uint32 rampages = 35;
  bool has_rampages() const;
  private:
  bool _internal_has_rampages() const;
  public:
  void clear_rampages();
  uint32_t rampages() const;
  void set_rampages(uint32_t value);
  private:
  uint32_t _internal_rampages() const;
  void _internal_set_rampages(uint32_t value);
  public:

  // optional uint32 triple_kills = 36;
  bool has_triple_kills() const;
  private:
  bool _internal_has_triple_kills() const;
  public:
  void clear_triple_kills();
  uint32_t triple_kills() const;
  void set_triple_kills(uint32_t value);
  private:
  uint32_t _internal_triple_kills() const;
  void _internal_set_triple_kills(uint32_t value);
  public:

  // optional uint32 aegis_snatched = 37;
  bool has_aegis_snatched() const;
  private:
  bool _internal_has_aegis_snatched() const;
  public:
  void clear_aegis_snatched();
  uint32_t aegis_snatched() const;
  void set_aegis_snatched(uint32_t value);
  private:
  uint32_t _internal_aegis_snatched() const;
  void _internal_set_aegis_snatched(uint32_t value);
  public:

  // optional uint32 rapiers_purchased = 38;
  bool has_rapiers_purchased() const;
  private:
  bool _internal_has_rapiers_purchased() const;
  public:
  void clear_rapiers_purchased();
  uint32_t rapiers_purchased() const;
  void set_rapiers_purchased(uint32_t value);
  private:
  uint32_t _internal_rapiers_purchased() const;
  void _internal_set_rapiers_purchased(uint32_t value);
  public:

  // optional uint32 couriers_killed = 39;
  bool has_couriers_killed() const;
  private:
  bool _internal_has_couriers_killed() const;
  public:
  void clear_couriers_killed();
  uint32_t couriers_killed() const;
  void set_couriers_killed(uint32_t value);
  private:
  uint32_t _internal_couriers_killed() const;
  void _internal_set_couriers_killed(uint32_t value);
  public:

  // optional uint32 net_worth_rank = 40;
  bool has_net_worth_rank() const;
  private:
  bool _internal_has_net_worth_rank() const;
  public:
  void clear_net_worth_rank();
  uint32_t net_worth_rank() const;
  void set_net_worth_rank(uint32_t value);
  private:
  uint32_t _internal_net_worth_rank() const;
  void _internal_set_net_worth_rank(uint32_t value);
  public:

  // optional uint32 support_gold_spent = 41;
  bool has_support_gold_spent() const;
  private:
  bool _internal_has_support_gold_spent() const;
  public:
  void clear_support_gold_spent();
  uint32_t support_gold_spent() const;
  void set_support_gold_spent(uint32_t value);
  private:
  uint32_t _internal_support_gold_spent() const;
  void _internal_set_support_gold_spent(uint32_t value);
  public:

  // optional uint32 observer_wards_placed = 42;
  bool has_observer_wards_placed() const;
  private:
  bool _internal_has_observer_wards_placed() const;
  public:
  void clear_observer_wards_placed();
  uint32_t observer_wards_placed() const;
  void set_observer_wards_placed(uint32_t value);
  private:
  uint32_t _internal_observer_wards_placed() const;
  void _internal_set_observer_wards_placed(uint32_t value);
  public:

  // optional uint32 sentry_wards_placed = 43;
  bool has_sentry_wards_placed() const;
  private:
  bool _internal_has_sentry_wards_placed() const;
  public:
  void clear_sentry_wards_placed();
  uint32_t sentry_wards_placed() const;
  void set_sentry_wards_placed(uint32_t value);
  private:
  uint32_t _internal_sentry_wards_placed() const;
  void _internal_set_sentry_wards_placed(uint32_t value);
  public:

  // optional uint32 wards_dewarded = 44;
  bool has_wards_dewarded() const;
  private:
  bool _internal_has_wards_dewarded() const;
  public:
  void clear_wards_dewarded();
  uint32_t wards_dewarded() const;
  void set_wards_dewarded(uint32_t value);
  private:
  uint32_t _internal_wards_dewarded() const;
  void _internal_set_wards_dewarded(uint32_t value);
  public:

  // optional float stun_duration = 45;
  bool has_stun_duration() const;
  private:
  bool _internal_has_stun_duration() const;
  public:
  void clear_stun_duration();
  float stun_duration() const;
  void set_stun_duration(float value);
  private:
  float _internal_stun_duration() const;
  void _internal_set_stun_duration(float value);
  public:

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  bool has_rank_mmr_boost_type() const;
  private:
  bool _internal_has_rank_mmr_boost_type() const;
  public:
  void clear_rank_mmr_boost_type();
  ::EDOTAMMRBoostType rank_mmr_boost_type() const;
  void set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  private:
  ::EDOTAMMRBoostType _internal_rank_mmr_boost_type() const;
  void _internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ability_upgrades_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem > equipped_econ_items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill > kills_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase > items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > level_up_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_net_worth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot > inventory_snapshot_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria > auto_style_criteria_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData > event_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress > strange_gem_progress_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction > victory_prediction_;
  uint32_t account_id_;
  uint32_t player_slot_;
  uint32_t avg_kills_x16_;
  uint32_t avg_deaths_x16_;
  uint32_t avg_assists_x16_;
  uint32_t avg_gpm_x16_;
  uint32_t avg_xpm_x16_;
  uint32_t best_kills_x16_;
  uint32_t best_assists_x16_;
  uint32_t best_gpm_x16_;
  uint32_t best_xpm_x16_;
  uint32_t win_streak_;
  uint32_t best_win_streak_;
  float fight_score_;
  float farm_score_;
  float support_score_;
  float push_score_;
  bool avg_stats_calibrated_;
  uint32_t hero_xp_;
  uint32_t camps_stacked_;
  uint32_t lane_selection_flags_;
  uint32_t rampages_;
  uint32_t triple_kills_;
  uint32_t aegis_snatched_;
  uint32_t rapiers_purchased_;
  uint32_t couriers_killed_;
  uint32_t net_worth_rank_;
  uint32_t support_gold_spent_;
  uint32_t observer_wards_placed_;
  uint32_t sentry_wards_placed_;
  uint32_t wards_dewarded_;
  float stun_duration_;
  int rank_mmr_boost_type_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata.Team) */ {
 public:
  inline CDOTAMatchMetadata_Team() : CDOTAMatchMetadata_Team(nullptr) {}
  ~CDOTAMatchMetadata_Team() override;
  explicit constexpr CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from);
  CDOTAMatchMetadata_Team(CDOTAMatchMetadata_Team&& from) noexcept
    : CDOTAMatchMetadata_Team() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata_Team& operator=(const CDOTAMatchMetadata_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata_Team& operator=(CDOTAMatchMetadata_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata_Team* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata_Team*>(
               &_CDOTAMatchMetadata_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CDOTAMatchMetadata_Team& a, CDOTAMatchMetadata_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata_Team& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata.Team";
  }
  protected:
  explicit CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team_PlayerKill PlayerKill;
  typedef CDOTAMatchMetadata_Team_ItemPurchase ItemPurchase;
  typedef CDOTAMatchMetadata_Team_InventorySnapshot InventorySnapshot;
  typedef CDOTAMatchMetadata_Team_AutoStyleCriteria AutoStyleCriteria;
  typedef CDOTAMatchMetadata_Team_StrangeGemProgress StrangeGemProgress;
  typedef CDOTAMatchMetadata_Team_VictoryPrediction VictoryPrediction;
  typedef CDOTAMatchMetadata_Team_SubChallenge SubChallenge;
  typedef CDOTAMatchMetadata_Team_CavernChallengeResult CavernChallengeResult;
  typedef CDOTAMatchMetadata_Team_ActionGrant ActionGrant;
  typedef CDOTAMatchMetadata_Team_EventData EventData;
  typedef CDOTAMatchMetadata_Team_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kGraphExperienceFieldNumber = 3,
    kGraphGoldEarnedFieldNumber = 4,
    kGraphNetWorthFieldNumber = 5,
    kCmBansFieldNumber = 8,
    kCmPicksFieldNumber = 9,
    kDotaTeamFieldNumber = 1,
    kCmFirstPickFieldNumber = 6,
    kCmCaptainPlayerIdFieldNumber = 7,
    kCmPenaltyFieldNumber = 10,
  };
  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CDOTAMatchMetadata_Team_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >*
      mutable_players();
  private:
  const ::CDOTAMatchMetadata_Team_Player& _internal_players(int index) const;
  ::CDOTAMatchMetadata_Team_Player* _internal_add_players();
  public:
  const ::CDOTAMatchMetadata_Team_Player& players(int index) const;
  ::CDOTAMatchMetadata_Team_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >&
      players() const;

  // repeated float graph_experience = 3;
  int graph_experience_size() const;
  private:
  int _internal_graph_experience_size() const;
  public:
  void clear_graph_experience();
  private:
  float _internal_graph_experience(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_experience() const;
  void _internal_add_graph_experience(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_experience();
  public:
  float graph_experience(int index) const;
  void set_graph_experience(int index, float value);
  void add_graph_experience(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_experience() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_experience();

  // repeated float graph_gold_earned = 4;
  int graph_gold_earned_size() const;
  private:
  int _internal_graph_gold_earned_size() const;
  public:
  void clear_graph_gold_earned();
  private:
  float _internal_graph_gold_earned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_gold_earned() const;
  void _internal_add_graph_gold_earned(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_gold_earned();
  public:
  float graph_gold_earned(int index) const;
  void set_graph_gold_earned(int index, float value);
  void add_graph_gold_earned(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_gold_earned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_gold_earned();

  // repeated float graph_net_worth = 5;
  int graph_net_worth_size() const;
  private:
  int _internal_graph_net_worth_size() const;
  public:
  void clear_graph_net_worth();
  private:
  float _internal_graph_net_worth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_graph_net_worth() const;
  void _internal_add_graph_net_worth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_graph_net_worth();
  public:
  float graph_net_worth(int index) const;
  void set_graph_net_worth(int index, float value);
  void add_graph_net_worth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      graph_net_worth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_graph_net_worth();

  // repeated uint32 cm_bans = 8;
  int cm_bans_size() const;
  private:
  int _internal_cm_bans_size() const;
  public:
  void clear_cm_bans();
  private:
  uint32_t _internal_cm_bans(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cm_bans() const;
  void _internal_add_cm_bans(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cm_bans();
  public:
  uint32_t cm_bans(int index) const;
  void set_cm_bans(int index, uint32_t value);
  void add_cm_bans(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cm_bans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cm_bans();

  // repeated uint32 cm_picks = 9;
  int cm_picks_size() const;
  private:
  int _internal_cm_picks_size() const;
  public:
  void clear_cm_picks();
  private:
  uint32_t _internal_cm_picks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cm_picks() const;
  void _internal_add_cm_picks(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cm_picks();
  public:
  uint32_t cm_picks(int index) const;
  void set_cm_picks(int index, uint32_t value);
  void add_cm_picks(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cm_picks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cm_picks();

  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  private:
  bool _internal_has_dota_team() const;
  public:
  void clear_dota_team();
  uint32_t dota_team() const;
  void set_dota_team(uint32_t value);
  private:
  uint32_t _internal_dota_team() const;
  void _internal_set_dota_team(uint32_t value);
  public:

  // optional bool cm_first_pick = 6;
  bool has_cm_first_pick() const;
  private:
  bool _internal_has_cm_first_pick() const;
  public:
  void clear_cm_first_pick();
  bool cm_first_pick() const;
  void set_cm_first_pick(bool value);
  private:
  bool _internal_cm_first_pick() const;
  void _internal_set_cm_first_pick(bool value);
  public:

  // optional uint32 cm_captain_player_id = 7;
  bool has_cm_captain_player_id() const;
  private:
  bool _internal_has_cm_captain_player_id() const;
  public:
  void clear_cm_captain_player_id();
  uint32_t cm_captain_player_id() const;
  void set_cm_captain_player_id(uint32_t value);
  private:
  uint32_t _internal_cm_captain_player_id() const;
  void _internal_set_cm_captain_player_id(uint32_t value);
  public:

  // optional uint32 cm_penalty = 10;
  bool has_cm_penalty() const;
  private:
  bool _internal_has_cm_penalty() const;
  public:
  void clear_cm_penalty();
  uint32_t cm_penalty() const;
  void set_cm_penalty(uint32_t value);
  private:
  uint32_t _internal_cm_penalty() const;
  void _internal_set_cm_penalty(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_experience_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_gold_earned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > graph_net_worth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cm_bans_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cm_picks_;
  uint32_t dota_team_;
  bool cm_first_pick_;
  uint32_t cm_captain_player_id_;
  uint32_t cm_penalty_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// -------------------------------------------------------------------

class CDOTAMatchMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAMatchMetadata) */ {
 public:
  inline CDOTAMatchMetadata() : CDOTAMatchMetadata(nullptr) {}
  ~CDOTAMatchMetadata() override;
  explicit constexpr CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAMatchMetadata(const CDOTAMatchMetadata& from);
  CDOTAMatchMetadata(CDOTAMatchMetadata&& from) noexcept
    : CDOTAMatchMetadata() {
    *this = ::std::move(from);
  }

  inline CDOTAMatchMetadata& operator=(const CDOTAMatchMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAMatchMetadata& operator=(CDOTAMatchMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAMatchMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAMatchMetadata* internal_default_instance() {
    return reinterpret_cast<const CDOTAMatchMetadata*>(
               &_CDOTAMatchMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CDOTAMatchMetadata& a, CDOTAMatchMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAMatchMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAMatchMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAMatchMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAMatchMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAMatchMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDOTAMatchMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAMatchMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAMatchMetadata";
  }
  protected:
  explicit CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAMatchMetadata_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
    kItemRewardsFieldNumber = 2,
    kMatchTipsFieldNumber = 7,
    kEventGameCustomTableFieldNumber = 5,
    kMatchmakingStatsFieldNumber = 8,
    kLobbyIdFieldNumber = 3,
    kReportUntilTimeFieldNumber = 4,
    kPrimaryEventIdFieldNumber = 6,
  };
  // repeated .CDOTAMatchMetadata.Team teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CDOTAMatchMetadata_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >*
      mutable_teams();
  private:
  const ::CDOTAMatchMetadata_Team& _internal_teams(int index) const;
  ::CDOTAMatchMetadata_Team* _internal_add_teams();
  public:
  const ::CDOTAMatchMetadata_Team& teams(int index) const;
  ::CDOTAMatchMetadata_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >&
      teams() const;

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  int item_rewards_size() const;
  private:
  int _internal_item_rewards_size() const;
  public:
  void clear_item_rewards();
  ::CLobbyTimedRewardDetails* mutable_item_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_item_rewards();
  private:
  const ::CLobbyTimedRewardDetails& _internal_item_rewards(int index) const;
  ::CLobbyTimedRewardDetails* _internal_add_item_rewards();
  public:
  const ::CLobbyTimedRewardDetails& item_rewards(int index) const;
  ::CLobbyTimedRewardDetails* add_item_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      item_rewards() const;

  // repeated .CMsgMatchTips match_tips = 7;
  int match_tips_size() const;
  private:
  int _internal_match_tips_size() const;
  public:
  void clear_match_tips();
  ::CMsgMatchTips* mutable_match_tips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >*
      mutable_match_tips();
  private:
  const ::CMsgMatchTips& _internal_match_tips(int index) const;
  ::CMsgMatchTips* _internal_add_match_tips();
  public:
  const ::CMsgMatchTips& match_tips(int index) const;
  ::CMsgMatchTips* add_match_tips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >&
      match_tips() const;

  // optional bytes event_game_custom_table = 5;
  bool has_event_game_custom_table() const;
  private:
  bool _internal_has_event_game_custom_table() const;
  public:
  void clear_event_game_custom_table();
  const std::string& event_game_custom_table() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_game_custom_table(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_game_custom_table();
  PROTOBUF_NODISCARD std::string* release_event_game_custom_table();
  void set_allocated_event_game_custom_table(std::string* event_game_custom_table);
  private:
  const std::string& _internal_event_game_custom_table() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_game_custom_table(const std::string& value);
  std::string* _internal_mutable_event_game_custom_table();
  public:

  // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
  bool has_matchmaking_stats() const;
  private:
  bool _internal_has_matchmaking_stats() const;
  public:
  void clear_matchmaking_stats();
  const ::CMsgMatchMatchmakingStats& matchmaking_stats() const;
  PROTOBUF_NODISCARD ::CMsgMatchMatchmakingStats* release_matchmaking_stats();
  ::CMsgMatchMatchmakingStats* mutable_matchmaking_stats();
  void set_allocated_matchmaking_stats(::CMsgMatchMatchmakingStats* matchmaking_stats);
  private:
  const ::CMsgMatchMatchmakingStats& _internal_matchmaking_stats() const;
  ::CMsgMatchMatchmakingStats* _internal_mutable_matchmaking_stats();
  public:
  void unsafe_arena_set_allocated_matchmaking_stats(
      ::CMsgMatchMatchmakingStats* matchmaking_stats);
  ::CMsgMatchMatchmakingStats* unsafe_arena_release_matchmaking_stats();

  // optional fixed64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional fixed64 report_until_time = 4;
  bool has_report_until_time() const;
  private:
  bool _internal_has_report_until_time() const;
  public:
  void clear_report_until_time();
  uint64_t report_until_time() const;
  void set_report_until_time(uint64_t value);
  private:
  uint64_t _internal_report_until_time() const;
  void _internal_set_report_until_time(uint64_t value);
  public:

  // optional uint32 primary_event_id = 6;
  bool has_primary_event_id() const;
  private:
  bool _internal_has_primary_event_id() const;
  public:
  void clear_primary_event_id();
  uint32_t primary_event_id() const;
  void set_primary_event_id(uint32_t value);
  private:
  uint32_t _internal_primary_event_id() const;
  void _internal_set_primary_event_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAMatchMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails > item_rewards_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips > match_tips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_game_custom_table_;
  ::CMsgMatchMatchmakingStats* matchmaking_stats_;
  uint64_t lobby_id_;
  uint64_t report_until_time_;
  uint32_t primary_event_id_;
  friend struct ::TableStruct_dotaproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSOIDOwner

// optional uint32 type = 1;
inline bool CMsgSOIDOwner::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOIDOwner::has_type() const {
  return _internal_has_type();
}
inline void CMsgSOIDOwner::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSOIDOwner::_internal_type() const {
  return type_;
}
inline uint32_t CMsgSOIDOwner::type() const {
  // @@protoc_insertion_point(field_get:CMsgSOIDOwner.type)
  return _internal_type();
}
inline void CMsgSOIDOwner::_internal_set_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CMsgSOIDOwner::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgSOIDOwner.type)
}

// optional uint64 id = 2;
inline bool CMsgSOIDOwner::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOIDOwner::has_id() const {
  return _internal_has_id();
}
inline void CMsgSOIDOwner::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSOIDOwner::_internal_id() const {
  return id_;
}
inline uint64_t CMsgSOIDOwner::id() const {
  // @@protoc_insertion_point(field_get:CMsgSOIDOwner.id)
  return _internal_id();
}
inline void CMsgSOIDOwner::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgSOIDOwner::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOIDOwner.id)
}

// -------------------------------------------------------------------

// CMsgClientToGCWrapAndDeliverGift

// optional uint64 item_id = 1;
inline bool CMsgClientToGCWrapAndDeliverGift::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCWrapAndDeliverGift::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgClientToGCWrapAndDeliverGift::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientToGCWrapAndDeliverGift::_internal_item_id() const {
  return item_id_;
}
inline uint64_t CMsgClientToGCWrapAndDeliverGift::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCWrapAndDeliverGift.item_id)
  return _internal_item_id();
}
inline void CMsgClientToGCWrapAndDeliverGift::_internal_set_item_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  item_id_ = value;
}
inline void CMsgClientToGCWrapAndDeliverGift::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCWrapAndDeliverGift.item_id)
}

// optional uint32 give_to_account_id = 2;
inline bool CMsgClientToGCWrapAndDeliverGift::_internal_has_give_to_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCWrapAndDeliverGift::has_give_to_account_id() const {
  return _internal_has_give_to_account_id();
}
inline void CMsgClientToGCWrapAndDeliverGift::clear_give_to_account_id() {
  give_to_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCWrapAndDeliverGift::_internal_give_to_account_id() const {
  return give_to_account_id_;
}
inline uint32_t CMsgClientToGCWrapAndDeliverGift::give_to_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCWrapAndDeliverGift.give_to_account_id)
  return _internal_give_to_account_id();
}
inline void CMsgClientToGCWrapAndDeliverGift::_internal_set_give_to_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  give_to_account_id_ = value;
}
inline void CMsgClientToGCWrapAndDeliverGift::set_give_to_account_id(uint32_t value) {
  _internal_set_give_to_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCWrapAndDeliverGift.give_to_account_id)
}

// optional string gift_message = 3;
inline bool CMsgClientToGCWrapAndDeliverGift::_internal_has_gift_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCWrapAndDeliverGift::has_gift_message() const {
  return _internal_has_gift_message();
}
inline void CMsgClientToGCWrapAndDeliverGift::clear_gift_message() {
  gift_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCWrapAndDeliverGift::gift_message() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCWrapAndDeliverGift.gift_message)
  return _internal_gift_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCWrapAndDeliverGift::set_gift_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gift_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCWrapAndDeliverGift.gift_message)
}
inline std::string* CMsgClientToGCWrapAndDeliverGift::mutable_gift_message() {
  std::string* _s = _internal_mutable_gift_message();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCWrapAndDeliverGift.gift_message)
  return _s;
}
inline const std::string& CMsgClientToGCWrapAndDeliverGift::_internal_gift_message() const {
  return gift_message_.Get();
}
inline void CMsgClientToGCWrapAndDeliverGift::_internal_set_gift_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gift_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCWrapAndDeliverGift::_internal_mutable_gift_message() {
  _has_bits_[0] |= 0x00000001u;
  return gift_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCWrapAndDeliverGift::release_gift_message() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCWrapAndDeliverGift.gift_message)
  if (!_internal_has_gift_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gift_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gift_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gift_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCWrapAndDeliverGift::set_allocated_gift_message(std::string* gift_message) {
  if (gift_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gift_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gift_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gift_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gift_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCWrapAndDeliverGift.gift_message)
}

// -------------------------------------------------------------------

// CMsgSOSingleObject

// optional int32 type_id = 2;
inline bool CMsgSOSingleObject::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_type_id() const {
  return _internal_has_type_id();
}
inline void CMsgSOSingleObject::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgSOSingleObject::_internal_type_id() const {
  return type_id_;
}
inline int32_t CMsgSOSingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.type_id)
  return _internal_type_id();
}
inline void CMsgSOSingleObject::_internal_set_type_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  type_id_ = value;
}
inline void CMsgSOSingleObject::set_type_id(int32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.type_id)
}

// optional bytes object_data = 3;
inline bool CMsgSOSingleObject::_internal_has_object_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_object_data() const {
  return _internal_has_object_data();
}
inline void CMsgSOSingleObject::clear_object_data() {
  object_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSOSingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.object_data)
  return _internal_object_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSOSingleObject::set_object_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 object_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.object_data)
}
inline std::string* CMsgSOSingleObject::mutable_object_data() {
  std::string* _s = _internal_mutable_object_data();
  // @@protoc_insertion_point(field_mutable:CMsgSOSingleObject.object_data)
  return _s;
}
inline const std::string& CMsgSOSingleObject::_internal_object_data() const {
  return object_data_.Get();
}
inline void CMsgSOSingleObject::_internal_set_object_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSOSingleObject::_internal_mutable_object_data() {
  _has_bits_[0] |= 0x00000001u;
  return object_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSOSingleObject::release_object_data() {
  // @@protoc_insertion_point(field_release:CMsgSOSingleObject.object_data)
  if (!_internal_has_object_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = object_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (object_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSOSingleObject::set_allocated_object_data(std::string* object_data) {
  if (object_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (object_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSOSingleObject.object_data)
}

// optional fixed64 version = 4;
inline bool CMsgSOSingleObject::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOSingleObject::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSOSingleObject::_internal_version() const {
  return version_;
}
inline uint64_t CMsgSOSingleObject::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.version)
  return _internal_version();
}
inline void CMsgSOSingleObject::_internal_set_version(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CMsgSOSingleObject::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.version)
}

// optional .CMsgSOIDOwner owner_soid = 5;
inline bool CMsgSOSingleObject::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOSingleObject::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOSingleObject::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSOIDOwner& CMsgSOSingleObject::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOSingleObject::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOSingleObject::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOSingleObject.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::release_owner_soid() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOSingleObject.owner_soid)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000002u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOSingleObject::mutable_owner_soid() {
  ::CMsgSOIDOwner* _msg = _internal_mutable_owner_soid();
  // @@protoc_insertion_point(field_mutable:CMsgSOSingleObject.owner_soid)
  return _msg;
}
inline void CMsgSOSingleObject::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOSingleObject.owner_soid)
}

// optional uint32 service_id = 6;
inline bool CMsgSOSingleObject::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSOSingleObject::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOSingleObject::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSOSingleObject::_internal_service_id() const {
  return service_id_;
}
inline uint32_t CMsgSOSingleObject::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOSingleObject.service_id)
  return _internal_service_id();
}
inline void CMsgSOSingleObject::_internal_set_service_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  service_id_ = value;
}
inline void CMsgSOSingleObject::set_service_id(uint32_t value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOSingleObject.service_id)
}

// -------------------------------------------------------------------

// CMsgRecentMatchInfo

// optional uint64 match_id = 1;
inline bool CMsgRecentMatchInfo::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgRecentMatchInfo::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgRecentMatchInfo::_internal_match_id() const {
  return match_id_;
}
inline uint64_t CMsgRecentMatchInfo::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.match_id)
  return _internal_match_id();
}
inline void CMsgRecentMatchInfo::_internal_set_match_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgRecentMatchInfo::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.match_id)
}

// optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgRecentMatchInfo::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgRecentMatchInfo::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::DOTA_GameMode CMsgRecentMatchInfo::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline ::DOTA_GameMode CMsgRecentMatchInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.game_mode)
  return _internal_game_mode();
}
inline void CMsgRecentMatchInfo::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  game_mode_ = value;
}
inline void CMsgRecentMatchInfo::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.game_mode)
}

// optional uint32 kills = 3;
inline bool CMsgRecentMatchInfo::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgRecentMatchInfo::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_kills() const {
  return kills_;
}
inline uint32_t CMsgRecentMatchInfo::kills() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.kills)
  return _internal_kills();
}
inline void CMsgRecentMatchInfo::_internal_set_kills(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  kills_ = value;
}
inline void CMsgRecentMatchInfo::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgRecentMatchInfo::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgRecentMatchInfo::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_deaths() const {
  return deaths_;
}
inline uint32_t CMsgRecentMatchInfo::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.deaths)
  return _internal_deaths();
}
inline void CMsgRecentMatchInfo::_internal_set_deaths(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  deaths_ = value;
}
inline void CMsgRecentMatchInfo::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgRecentMatchInfo::_internal_has_assists() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgRecentMatchInfo::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_assists() const {
  return assists_;
}
inline uint32_t CMsgRecentMatchInfo::assists() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.assists)
  return _internal_assists();
}
inline void CMsgRecentMatchInfo::_internal_set_assists(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  assists_ = value;
}
inline void CMsgRecentMatchInfo::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.assists)
}

// optional uint32 duration = 6;
inline bool CMsgRecentMatchInfo::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgRecentMatchInfo::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_duration() const {
  return duration_;
}
inline uint32_t CMsgRecentMatchInfo::duration() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.duration)
  return _internal_duration();
}
inline void CMsgRecentMatchInfo::_internal_set_duration(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  duration_ = value;
}
inline void CMsgRecentMatchInfo::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.duration)
}

// optional uint32 player_slot = 7;
inline bool CMsgRecentMatchInfo::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgRecentMatchInfo::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_player_slot() const {
  return player_slot_;
}
inline uint32_t CMsgRecentMatchInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.player_slot)
  return _internal_player_slot();
}
inline void CMsgRecentMatchInfo::_internal_set_player_slot(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  player_slot_ = value;
}
inline void CMsgRecentMatchInfo::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.player_slot)
}

// optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgRecentMatchInfo::_internal_has_match_outcome() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_match_outcome() const {
  return _internal_has_match_outcome();
}
inline void CMsgRecentMatchInfo::clear_match_outcome() {
  match_outcome_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::EMatchOutcome CMsgRecentMatchInfo::_internal_match_outcome() const {
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
inline ::EMatchOutcome CMsgRecentMatchInfo::match_outcome() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.match_outcome)
  return _internal_match_outcome();
}
inline void CMsgRecentMatchInfo::_internal_set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  match_outcome_ = value;
}
inline void CMsgRecentMatchInfo::set_match_outcome(::EMatchOutcome value) {
  _internal_set_match_outcome(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.match_outcome)
}

// optional uint32 timestamp = 9;
inline bool CMsgRecentMatchInfo::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgRecentMatchInfo::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgRecentMatchInfo::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgRecentMatchInfo::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CMsgRecentMatchInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgRecentMatchInfo.timestamp)
  return _internal_timestamp();
}
inline void CMsgRecentMatchInfo::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  timestamp_ = value;
}
inline void CMsgRecentMatchInfo::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgRecentMatchInfo.timestamp)
}

// -------------------------------------------------------------------

// CMsgClientToGCRequestSocialFeedResponse

// optional uint64 unk_1 = 1;
inline bool CMsgClientToGCRequestSocialFeedResponse::_internal_has_unk_1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCRequestSocialFeedResponse::has_unk_1() const {
  return _internal_has_unk_1();
}
inline void CMsgClientToGCRequestSocialFeedResponse::clear_unk_1() {
  unk_1_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientToGCRequestSocialFeedResponse::_internal_unk_1() const {
  return unk_1_;
}
inline uint64_t CMsgClientToGCRequestSocialFeedResponse::unk_1() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSocialFeedResponse.unk_1)
  return _internal_unk_1();
}
inline void CMsgClientToGCRequestSocialFeedResponse::_internal_set_unk_1(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  unk_1_ = value;
}
inline void CMsgClientToGCRequestSocialFeedResponse::set_unk_1(uint64_t value) {
  _internal_set_unk_1(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSocialFeedResponse.unk_1)
}

// optional uint64 unk_2 = 2;
inline bool CMsgClientToGCRequestSocialFeedResponse::_internal_has_unk_2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCRequestSocialFeedResponse::has_unk_2() const {
  return _internal_has_unk_2();
}
inline void CMsgClientToGCRequestSocialFeedResponse::clear_unk_2() {
  unk_2_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientToGCRequestSocialFeedResponse::_internal_unk_2() const {
  return unk_2_;
}
inline uint64_t CMsgClientToGCRequestSocialFeedResponse::unk_2() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSocialFeedResponse.unk_2)
  return _internal_unk_2();
}
inline void CMsgClientToGCRequestSocialFeedResponse::_internal_set_unk_2(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  unk_2_ = value;
}
inline void CMsgClientToGCRequestSocialFeedResponse::set_unk_2(uint64_t value) {
  _internal_set_unk_2(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSocialFeedResponse.unk_2)
}

// optional uint64 unk_3 = 3;
inline bool CMsgClientToGCRequestSocialFeedResponse::_internal_has_unk_3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCRequestSocialFeedResponse::has_unk_3() const {
  return _internal_has_unk_3();
}
inline void CMsgClientToGCRequestSocialFeedResponse::clear_unk_3() {
  unk_3_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientToGCRequestSocialFeedResponse::_internal_unk_3() const {
  return unk_3_;
}
inline uint64_t CMsgClientToGCRequestSocialFeedResponse::unk_3() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSocialFeedResponse.unk_3)
  return _internal_unk_3();
}
inline void CMsgClientToGCRequestSocialFeedResponse::_internal_set_unk_3(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  unk_3_ = value;
}
inline void CMsgClientToGCRequestSocialFeedResponse::set_unk_3(uint64_t value) {
  _internal_set_unk_3(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSocialFeedResponse.unk_3)
}

// -------------------------------------------------------------------

// CMsgBattleCupVictory

// optional uint32 account_id = 1;
inline bool CMsgBattleCupVictory::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgBattleCupVictory::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgBattleCupVictory::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CMsgBattleCupVictory::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.account_id)
  return _internal_account_id();
}
inline void CMsgBattleCupVictory::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgBattleCupVictory::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.account_id)
}

// optional uint32 win_date = 2;
inline bool CMsgBattleCupVictory::_internal_has_win_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_win_date() const {
  return _internal_has_win_date();
}
inline void CMsgBattleCupVictory::clear_win_date() {
  win_date_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgBattleCupVictory::_internal_win_date() const {
  return win_date_;
}
inline uint32_t CMsgBattleCupVictory::win_date() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.win_date)
  return _internal_win_date();
}
inline void CMsgBattleCupVictory::_internal_set_win_date(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  win_date_ = value;
}
inline void CMsgBattleCupVictory::set_win_date(uint32_t value) {
  _internal_set_win_date(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.win_date)
}

// optional uint32 valid_until = 3;
inline bool CMsgBattleCupVictory::_internal_has_valid_until() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_valid_until() const {
  return _internal_has_valid_until();
}
inline void CMsgBattleCupVictory::clear_valid_until() {
  valid_until_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBattleCupVictory::_internal_valid_until() const {
  return valid_until_;
}
inline uint32_t CMsgBattleCupVictory::valid_until() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.valid_until)
  return _internal_valid_until();
}
inline void CMsgBattleCupVictory::_internal_set_valid_until(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  valid_until_ = value;
}
inline void CMsgBattleCupVictory::set_valid_until(uint32_t value) {
  _internal_set_valid_until(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.valid_until)
}

// optional uint32 skill_level = 4;
inline bool CMsgBattleCupVictory::_internal_has_skill_level() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_skill_level() const {
  return _internal_has_skill_level();
}
inline void CMsgBattleCupVictory::clear_skill_level() {
  skill_level_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBattleCupVictory::_internal_skill_level() const {
  return skill_level_;
}
inline uint32_t CMsgBattleCupVictory::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.skill_level)
  return _internal_skill_level();
}
inline void CMsgBattleCupVictory::_internal_set_skill_level(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  skill_level_ = value;
}
inline void CMsgBattleCupVictory::set_skill_level(uint32_t value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.skill_level)
}

// optional uint32 tournament_id = 5;
inline bool CMsgBattleCupVictory::_internal_has_tournament_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgBattleCupVictory::clear_tournament_id() {
  tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgBattleCupVictory::_internal_tournament_id() const {
  return tournament_id_;
}
inline uint32_t CMsgBattleCupVictory::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgBattleCupVictory::_internal_set_tournament_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tournament_id_ = value;
}
inline void CMsgBattleCupVictory::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.tournament_id)
}

// optional uint32 division_id = 6;
inline bool CMsgBattleCupVictory::_internal_has_division_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_division_id() const {
  return _internal_has_division_id();
}
inline void CMsgBattleCupVictory::clear_division_id() {
  division_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgBattleCupVictory::_internal_division_id() const {
  return division_id_;
}
inline uint32_t CMsgBattleCupVictory::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.division_id)
  return _internal_division_id();
}
inline void CMsgBattleCupVictory::_internal_set_division_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  division_id_ = value;
}
inline void CMsgBattleCupVictory::set_division_id(uint32_t value) {
  _internal_set_division_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.division_id)
}

// optional uint32 team_id = 7;
inline bool CMsgBattleCupVictory::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgBattleCupVictory::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgBattleCupVictory::_internal_team_id() const {
  return team_id_;
}
inline uint32_t CMsgBattleCupVictory::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.team_id)
  return _internal_team_id();
}
inline void CMsgBattleCupVictory::_internal_set_team_id(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  team_id_ = value;
}
inline void CMsgBattleCupVictory::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.team_id)
}

// optional uint32 streak = 8;
inline bool CMsgBattleCupVictory::_internal_has_streak() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_streak() const {
  return _internal_has_streak();
}
inline void CMsgBattleCupVictory::clear_streak() {
  streak_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgBattleCupVictory::_internal_streak() const {
  return streak_;
}
inline uint32_t CMsgBattleCupVictory::streak() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.streak)
  return _internal_streak();
}
inline void CMsgBattleCupVictory::_internal_set_streak(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  streak_ = value;
}
inline void CMsgBattleCupVictory::set_streak(uint32_t value) {
  _internal_set_streak(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.streak)
}

// optional uint32 trophy_id = 9;
inline bool CMsgBattleCupVictory::_internal_has_trophy_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgBattleCupVictory::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgBattleCupVictory::clear_trophy_id() {
  trophy_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgBattleCupVictory::_internal_trophy_id() const {
  return trophy_id_;
}
inline uint32_t CMsgBattleCupVictory::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgBattleCupVictory.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgBattleCupVictory::_internal_set_trophy_id(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  trophy_id_ = value;
}
inline void CMsgBattleCupVictory::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgBattleCupVictory.trophy_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCSetItemStyle

// optional uint64 item_id = 1;
inline bool CMsgClientToGCSetItemStyle::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCSetItemStyle::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgClientToGCSetItemStyle::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientToGCSetItemStyle::_internal_item_id() const {
  return item_id_;
}
inline uint64_t CMsgClientToGCSetItemStyle::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetItemStyle.item_id)
  return _internal_item_id();
}
inline void CMsgClientToGCSetItemStyle::_internal_set_item_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CMsgClientToGCSetItemStyle::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetItemStyle.item_id)
}

// optional uint32 style_index = 2;
inline bool CMsgClientToGCSetItemStyle::_internal_has_style_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCSetItemStyle::has_style_index() const {
  return _internal_has_style_index();
}
inline void CMsgClientToGCSetItemStyle::clear_style_index() {
  style_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCSetItemStyle::_internal_style_index() const {
  return style_index_;
}
inline uint32_t CMsgClientToGCSetItemStyle::style_index() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetItemStyle.style_index)
  return _internal_style_index();
}
inline void CMsgClientToGCSetItemStyle::_internal_set_style_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  style_index_ = value;
}
inline void CMsgClientToGCSetItemStyle::set_style_index(uint32_t value) {
  _internal_set_style_index(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetItemStyle.style_index)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Trophy::_internal_has_trophy_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::_internal_trophy_id() const {
  return trophy_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::_internal_set_trophy_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  trophy_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Trophy::_internal_has_trophy_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return _internal_has_trophy_score();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::_internal_trophy_score() const {
  return trophy_score_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return _internal_trophy_score();
}
inline void CMsgDOTAProfileCard_Slot_Trophy::_internal_set_trophy_score(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  trophy_score_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(uint32_t value) {
  _internal_set_trophy_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Stat

// optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
inline bool CMsgDOTAProfileCard_Slot_Stat::_internal_has_stat_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return _internal_has_stat_id();
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  stat_id_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::_internal_stat_id() const {
  return static_cast< ::CMsgDOTAProfileCard_EStatID >(stat_id_);
}
inline ::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return _internal_stat_id();
}
inline void CMsgDOTAProfileCard_Slot_Stat::_internal_set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  assert(::CMsgDOTAProfileCard_EStatID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  stat_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::CMsgDOTAProfileCard_EStatID value) {
  _internal_set_stat_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
inline bool CMsgDOTAProfileCard_Slot_Stat::_internal_has_stat_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return _internal_has_stat_score();
}
inline void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  stat_score_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Stat::_internal_stat_score() const {
  return stat_score_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return _internal_stat_score();
}
inline void CMsgDOTAProfileCard_Slot_Stat::_internal_set_stat_score(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  stat_score_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(uint32_t value) {
  _internal_set_stat_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
inline bool CMsgDOTAProfileCard_Slot_Item::_internal_has_serialized_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return _internal_has_serialized_item();
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  serialized_item_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return _internal_serialized_item();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serialized_item_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
inline std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  std::string* _s = _internal_mutable_serialized_item();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return _s;
}
inline const std::string& CMsgDOTAProfileCard_Slot_Item::_internal_serialized_item() const {
  return serialized_item_.Get();
}
inline void CMsgDOTAProfileCard_Slot_Item::_internal_set_serialized_item(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_item_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAProfileCard_Slot_Item::_internal_mutable_serialized_item() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_item_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.Item.serialized_item)
  if (!_internal_has_serialized_item()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serialized_item_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_item_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_item_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(std::string* serialized_item) {
  if (serialized_item != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_item_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_item,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_item_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialized_item_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
inline bool CMsgDOTAProfileCard_Slot_Item::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAProfileCard_Slot_Item::_internal_item_id() const {
  return item_id_;
}
inline uint64_t CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Item.item_id)
  return _internal_item_id();
}
inline void CMsgDOTAProfileCard_Slot_Item::_internal_set_item_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  item_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Item::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Item.item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Hero::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::_internal_hero_id() const {
  return hero_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return _internal_hero_id();
}
inline void CMsgDOTAProfileCard_Slot_Hero::_internal_set_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
inline bool CMsgDOTAProfileCard_Slot_Hero::_internal_has_hero_wins() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return _internal_has_hero_wins();
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  hero_wins_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::_internal_hero_wins() const {
  return hero_wins_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return _internal_hero_wins();
}
inline void CMsgDOTAProfileCard_Slot_Hero::_internal_set_hero_wins(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  hero_wins_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(uint32_t value) {
  _internal_set_hero_wins(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
inline bool CMsgDOTAProfileCard_Slot_Hero::_internal_has_hero_losses() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return _internal_has_hero_losses();
}
inline void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  hero_losses_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::_internal_hero_losses() const {
  return hero_losses_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return _internal_hero_losses();
}
inline void CMsgDOTAProfileCard_Slot_Hero::_internal_set_hero_losses(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  hero_losses_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(uint32_t value) {
  _internal_set_hero_losses(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Emoticon::_internal_has_emoticon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  emoticon_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Emoticon::_internal_emoticon_id() const {
  return emoticon_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return _internal_emoticon_id();
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::_internal_set_emoticon_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  emoticon_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTAProfileCard_Slot_Team::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot_Team::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAProfileCard_Slot_Team::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Team::_internal_team_id() const {
  return team_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.Team.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAProfileCard_Slot_Team::_internal_set_team_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  team_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot_Team::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.Team.team_id)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_slot_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAProfileCard_Slot::_internal_slot_id() const {
  return slot_id_;
}
inline uint32_t CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.slot_id)
  return _internal_slot_id();
}
inline void CMsgDOTAProfileCard_Slot::_internal_set_slot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  slot_id_ = value;
}
inline void CMsgDOTAProfileCard_Slot::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_trophy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || trophy_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return _internal_has_trophy();
}
inline void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (trophy_ != nullptr) trophy_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::_internal_trophy() const {
  const ::CMsgDOTAProfileCard_Slot_Trophy* p = trophy_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Trophy&>(
      ::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.trophy)
  return _internal_trophy();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_trophy(
    ::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trophy_);
  }
  trophy_ = trophy;
  if (trophy) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::unsafe_arena_release_trophy() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.trophy)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::_internal_mutable_trophy() {
  _has_bits_[0] |= 0x00000001u;
  if (trophy_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Trophy>(GetArenaForAllocation());
    trophy_ = p;
  }
  return trophy_;
}
inline ::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  ::CMsgDOTAProfileCard_Slot_Trophy* _msg = _internal_mutable_trophy();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.trophy)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trophy_;
  }
  if (trophy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgDOTAProfileCard_Slot_Trophy>::GetOwningArena(trophy);
    if (message_arena != submessage_arena) {
      trophy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trophy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trophy_ = trophy;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.trophy)
}

// optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stat_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return _internal_has_stat();
}
inline void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (stat_ != nullptr) stat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::_internal_stat() const {
  const ::CMsgDOTAProfileCard_Slot_Stat* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Stat&>(
      ::_CMsgDOTAProfileCard_Slot_Stat_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.stat)
  return _internal_stat();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_stat(
    ::CMsgDOTAProfileCard_Slot_Stat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.stat)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::_internal_mutable_stat() {
  _has_bits_[0] |= 0x00000002u;
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Stat>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  ::CMsgDOTAProfileCard_Slot_Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.stat)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_stat(::CMsgDOTAProfileCard_Slot_Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgDOTAProfileCard_Slot_Stat>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.stat)
}

// optional .CMsgDOTAProfileCard.Slot.Item item = 4;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_item() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || item_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_item() const {
  return _internal_has_item();
}
inline void CMsgDOTAProfileCard_Slot::clear_item() {
  if (item_ != nullptr) item_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::_internal_item() const {
  const ::CMsgDOTAProfileCard_Slot_Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Item&>(
      ::_CMsgDOTAProfileCard_Slot_Item_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.item)
  return _internal_item();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_item(
    ::CMsgDOTAProfileCard_Slot_Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.item)
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.item)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::_internal_mutable_item() {
  _has_bits_[0] |= 0x00000004u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Item>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  ::CMsgDOTAProfileCard_Slot_Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.item)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_item(::CMsgDOTAProfileCard_Slot_Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgDOTAProfileCard_Slot_Item>::GetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.item)
}

// optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_hero() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || hero_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return _internal_has_hero();
}
inline void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (hero_ != nullptr) hero_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::_internal_hero() const {
  const ::CMsgDOTAProfileCard_Slot_Hero* p = hero_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Hero&>(
      ::_CMsgDOTAProfileCard_Slot_Hero_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.hero)
  return _internal_hero();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_hero(
    ::CMsgDOTAProfileCard_Slot_Hero* hero) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hero_);
  }
  hero_ = hero;
  if (hero) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::unsafe_arena_release_hero() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.hero)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::_internal_mutable_hero() {
  _has_bits_[0] |= 0x00000008u;
  if (hero_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Hero>(GetArenaForAllocation());
    hero_ = p;
  }
  return hero_;
}
inline ::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  ::CMsgDOTAProfileCard_Slot_Hero* _msg = _internal_mutable_hero();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.hero)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_hero(::CMsgDOTAProfileCard_Slot_Hero* hero) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hero_;
  }
  if (hero) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgDOTAProfileCard_Slot_Hero>::GetOwningArena(hero);
    if (message_arena != submessage_arena) {
      hero = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hero, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  hero_ = hero;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.hero)
}

// optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_emoticon() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || emoticon_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return _internal_has_emoticon();
}
inline void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (emoticon_ != nullptr) emoticon_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::_internal_emoticon() const {
  const ::CMsgDOTAProfileCard_Slot_Emoticon* p = emoticon_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Emoticon&>(
      ::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.emoticon)
  return _internal_emoticon();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_emoticon(
    ::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emoticon_);
  }
  emoticon_ = emoticon;
  if (emoticon) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::unsafe_arena_release_emoticon() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.emoticon)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::_internal_mutable_emoticon() {
  _has_bits_[0] |= 0x00000010u;
  if (emoticon_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Emoticon>(GetArenaForAllocation());
    emoticon_ = p;
  }
  return emoticon_;
}
inline ::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  ::CMsgDOTAProfileCard_Slot_Emoticon* _msg = _internal_mutable_emoticon();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.emoticon)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete emoticon_;
  }
  if (emoticon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgDOTAProfileCard_Slot_Emoticon>::GetOwningArena(emoticon);
    if (message_arena != submessage_arena) {
      emoticon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emoticon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  emoticon_ = emoticon;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.emoticon)
}

// optional .CMsgDOTAProfileCard.Slot.Team team = 7;
inline bool CMsgDOTAProfileCard_Slot::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || team_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard_Slot::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTAProfileCard_Slot::clear_team() {
  if (team_ != nullptr) team_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot::_internal_team() const {
  const ::CMsgDOTAProfileCard_Slot_Team* p = team_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAProfileCard_Slot_Team&>(
      ::_CMsgDOTAProfileCard_Slot_Team_default_instance_);
}
inline const ::CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.Slot.team)
  return _internal_team();
}
inline void CMsgDOTAProfileCard_Slot::unsafe_arena_set_allocated_team(
    ::CMsgDOTAProfileCard_Slot_Team* team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_);
  }
  team_ = team;
  if (team) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.Slot.team)
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::release_team() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgDOTAProfileCard_Slot_Team* temp = team_;
  team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.Slot.team)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgDOTAProfileCard_Slot_Team* temp = team_;
  team_ = nullptr;
  return temp;
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::_internal_mutable_team() {
  _has_bits_[0] |= 0x00000020u;
  if (team_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAProfileCard_Slot_Team>(GetArenaForAllocation());
    team_ = p;
  }
  return team_;
}
inline ::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::mutable_team() {
  ::CMsgDOTAProfileCard_Slot_Team* _msg = _internal_mutable_team();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.Slot.team)
  return _msg;
}
inline void CMsgDOTAProfileCard_Slot::set_allocated_team(::CMsgDOTAProfileCard_Slot_Team* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete team_;
  }
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgDOTAProfileCard_Slot_Team>::GetOwningArena(team);
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.Slot.team)
}

// -------------------------------------------------------------------

// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
inline bool CMsgDOTAProfileCard::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAProfileCard::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAProfileCard::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgDOTAProfileCard::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.account_id)
}

// repeated .CMsgDOTAProfileCard.Slot slots = 3;
inline int CMsgDOTAProfileCard::_internal_slots_size() const {
  return slots_.size();
}
inline int CMsgDOTAProfileCard::slots_size() const {
  return _internal_slots_size();
}
inline void CMsgDOTAProfileCard::clear_slots() {
  slots_.Clear();
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.slots)
  return slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAProfileCard.slots)
  return &slots_;
}
inline const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::_internal_slots(int index) const {
  return slots_.Get(index);
}
inline const ::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.slots)
  return _internal_slots(index);
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::_internal_add_slots() {
  return slots_.Add();
}
inline ::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  ::CMsgDOTAProfileCard_Slot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:CMsgDOTAProfileCard.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAProfileCard.slots)
  return slots_;
}

// optional uint32 badge_points = 4;
inline bool CMsgDOTAProfileCard::_internal_has_badge_points() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_badge_points() const {
  return _internal_has_badge_points();
}
inline void CMsgDOTAProfileCard::clear_badge_points() {
  badge_points_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_badge_points() const {
  return badge_points_;
}
inline uint32_t CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.badge_points)
  return _internal_badge_points();
}
inline void CMsgDOTAProfileCard::_internal_set_badge_points(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  badge_points_ = value;
}
inline void CMsgDOTAProfileCard::set_badge_points(uint32_t value) {
  _internal_set_badge_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
inline bool CMsgDOTAProfileCard::_internal_has_event_points() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_event_points() const {
  return _internal_has_event_points();
}
inline void CMsgDOTAProfileCard::clear_event_points() {
  event_points_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_event_points() const {
  return event_points_;
}
inline uint32_t CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_points)
  return _internal_event_points();
}
inline void CMsgDOTAProfileCard::_internal_set_event_points(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  event_points_ = value;
}
inline void CMsgDOTAProfileCard::set_event_points(uint32_t value) {
  _internal_set_event_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
inline bool CMsgDOTAProfileCard::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgDOTAProfileCard::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_event_id() const {
  return event_id_;
}
inline uint32_t CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.event_id)
  return _internal_event_id();
}
inline void CMsgDOTAProfileCard::_internal_set_event_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  event_id_ = value;
}
inline void CMsgDOTAProfileCard::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.event_id)
}

// optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
inline bool CMsgDOTAProfileCard::_internal_has_recent_battle_cup_victory() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || recent_battle_cup_victory_ != nullptr);
  return value;
}
inline bool CMsgDOTAProfileCard::has_recent_battle_cup_victory() const {
  return _internal_has_recent_battle_cup_victory();
}
inline void CMsgDOTAProfileCard::clear_recent_battle_cup_victory() {
  if (recent_battle_cup_victory_ != nullptr) recent_battle_cup_victory_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBattleCupVictory& CMsgDOTAProfileCard::_internal_recent_battle_cup_victory() const {
  const ::CMsgBattleCupVictory* p = recent_battle_cup_victory_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBattleCupVictory&>(
      ::_CMsgBattleCupVictory_default_instance_);
}
inline const ::CMsgBattleCupVictory& CMsgDOTAProfileCard::recent_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.recent_battle_cup_victory)
  return _internal_recent_battle_cup_victory();
}
inline void CMsgDOTAProfileCard::unsafe_arena_set_allocated_recent_battle_cup_victory(
    ::CMsgBattleCupVictory* recent_battle_cup_victory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recent_battle_cup_victory_);
  }
  recent_battle_cup_victory_ = recent_battle_cup_victory;
  if (recent_battle_cup_victory) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAProfileCard.recent_battle_cup_victory)
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::release_recent_battle_cup_victory() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleCupVictory* temp = recent_battle_cup_victory_;
  recent_battle_cup_victory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::unsafe_arena_release_recent_battle_cup_victory() {
  // @@protoc_insertion_point(field_release:CMsgDOTAProfileCard.recent_battle_cup_victory)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBattleCupVictory* temp = recent_battle_cup_victory_;
  recent_battle_cup_victory_ = nullptr;
  return temp;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::_internal_mutable_recent_battle_cup_victory() {
  _has_bits_[0] |= 0x00000001u;
  if (recent_battle_cup_victory_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBattleCupVictory>(GetArenaForAllocation());
    recent_battle_cup_victory_ = p;
  }
  return recent_battle_cup_victory_;
}
inline ::CMsgBattleCupVictory* CMsgDOTAProfileCard::mutable_recent_battle_cup_victory() {
  ::CMsgBattleCupVictory* _msg = _internal_mutable_recent_battle_cup_victory();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAProfileCard.recent_battle_cup_victory)
  return _msg;
}
inline void CMsgDOTAProfileCard::set_allocated_recent_battle_cup_victory(::CMsgBattleCupVictory* recent_battle_cup_victory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete recent_battle_cup_victory_;
  }
  if (recent_battle_cup_victory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgBattleCupVictory>::GetOwningArena(recent_battle_cup_victory);
    if (message_arena != submessage_arena) {
      recent_battle_cup_victory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_battle_cup_victory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recent_battle_cup_victory_ = recent_battle_cup_victory;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAProfileCard.recent_battle_cup_victory)
}

// optional uint32 rank_tier = 8;
inline bool CMsgDOTAProfileCard::_internal_has_rank_tier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_rank_tier() const {
  return _internal_has_rank_tier();
}
inline void CMsgDOTAProfileCard::clear_rank_tier() {
  rank_tier_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_rank_tier() const {
  return rank_tier_;
}
inline uint32_t CMsgDOTAProfileCard::rank_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.rank_tier)
  return _internal_rank_tier();
}
inline void CMsgDOTAProfileCard::_internal_set_rank_tier(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  rank_tier_ = value;
}
inline void CMsgDOTAProfileCard::set_rank_tier(uint32_t value) {
  _internal_set_rank_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.rank_tier)
}

// optional uint32 leaderboard_rank = 9;
inline bool CMsgDOTAProfileCard::_internal_has_leaderboard_rank() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_leaderboard_rank() const {
  return _internal_has_leaderboard_rank();
}
inline void CMsgDOTAProfileCard::clear_leaderboard_rank() {
  leaderboard_rank_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_leaderboard_rank() const {
  return leaderboard_rank_;
}
inline uint32_t CMsgDOTAProfileCard::leaderboard_rank() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.leaderboard_rank)
  return _internal_leaderboard_rank();
}
inline void CMsgDOTAProfileCard::_internal_set_leaderboard_rank(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  leaderboard_rank_ = value;
}
inline void CMsgDOTAProfileCard::set_leaderboard_rank(uint32_t value) {
  _internal_set_leaderboard_rank(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.leaderboard_rank)
}

// optional bool is_plus_subscriber = 10;
inline bool CMsgDOTAProfileCard::_internal_has_is_plus_subscriber() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CMsgDOTAProfileCard::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTAProfileCard::_internal_is_plus_subscriber() const {
  return is_plus_subscriber_;
}
inline bool CMsgDOTAProfileCard::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CMsgDOTAProfileCard::_internal_set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_plus_subscriber_ = value;
}
inline void CMsgDOTAProfileCard::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.is_plus_subscriber)
}

// optional uint32 plus_original_start_date = 11;
inline bool CMsgDOTAProfileCard::_internal_has_plus_original_start_date() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_plus_original_start_date() const {
  return _internal_has_plus_original_start_date();
}
inline void CMsgDOTAProfileCard::clear_plus_original_start_date() {
  plus_original_start_date_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_plus_original_start_date() const {
  return plus_original_start_date_;
}
inline uint32_t CMsgDOTAProfileCard::plus_original_start_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.plus_original_start_date)
  return _internal_plus_original_start_date();
}
inline void CMsgDOTAProfileCard::_internal_set_plus_original_start_date(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  plus_original_start_date_ = value;
}
inline void CMsgDOTAProfileCard::set_plus_original_start_date(uint32_t value) {
  _internal_set_plus_original_start_date(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.plus_original_start_date)
}

// optional uint32 rank_tier_score = 12;
inline bool CMsgDOTAProfileCard::_internal_has_rank_tier_score() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_rank_tier_score() const {
  return _internal_has_rank_tier_score();
}
inline void CMsgDOTAProfileCard::clear_rank_tier_score() {
  rank_tier_score_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_rank_tier_score() const {
  return rank_tier_score_;
}
inline uint32_t CMsgDOTAProfileCard::rank_tier_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.rank_tier_score)
  return _internal_rank_tier_score();
}
inline void CMsgDOTAProfileCard::_internal_set_rank_tier_score(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  rank_tier_score_ = value;
}
inline void CMsgDOTAProfileCard::set_rank_tier_score(uint32_t value) {
  _internal_set_rank_tier_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.rank_tier_score)
}

// optional uint32 previous_rank_tier = 13;
inline bool CMsgDOTAProfileCard::_internal_has_previous_rank_tier() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_previous_rank_tier() const {
  return _internal_has_previous_rank_tier();
}
inline void CMsgDOTAProfileCard::clear_previous_rank_tier() {
  previous_rank_tier_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_previous_rank_tier() const {
  return previous_rank_tier_;
}
inline uint32_t CMsgDOTAProfileCard::previous_rank_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.previous_rank_tier)
  return _internal_previous_rank_tier();
}
inline void CMsgDOTAProfileCard::_internal_set_previous_rank_tier(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  previous_rank_tier_ = value;
}
inline void CMsgDOTAProfileCard::set_previous_rank_tier(uint32_t value) {
  _internal_set_previous_rank_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.previous_rank_tier)
}

// optional uint32 rank_tier_mmr_type = 14;
inline bool CMsgDOTAProfileCard::_internal_has_rank_tier_mmr_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_rank_tier_mmr_type() const {
  return _internal_has_rank_tier_mmr_type();
}
inline void CMsgDOTAProfileCard::clear_rank_tier_mmr_type() {
  rank_tier_mmr_type_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_rank_tier_mmr_type() const {
  return rank_tier_mmr_type_;
}
inline uint32_t CMsgDOTAProfileCard::rank_tier_mmr_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.rank_tier_mmr_type)
  return _internal_rank_tier_mmr_type();
}
inline void CMsgDOTAProfileCard::_internal_set_rank_tier_mmr_type(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  rank_tier_mmr_type_ = value;
}
inline void CMsgDOTAProfileCard::set_rank_tier_mmr_type(uint32_t value) {
  _internal_set_rank_tier_mmr_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.rank_tier_mmr_type)
}

// optional uint32 leaderboard_rank_core = 17;
inline bool CMsgDOTAProfileCard::_internal_has_leaderboard_rank_core() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_leaderboard_rank_core() const {
  return _internal_has_leaderboard_rank_core();
}
inline void CMsgDOTAProfileCard::clear_leaderboard_rank_core() {
  leaderboard_rank_core_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_leaderboard_rank_core() const {
  return leaderboard_rank_core_;
}
inline uint32_t CMsgDOTAProfileCard::leaderboard_rank_core() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.leaderboard_rank_core)
  return _internal_leaderboard_rank_core();
}
inline void CMsgDOTAProfileCard::_internal_set_leaderboard_rank_core(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  leaderboard_rank_core_ = value;
}
inline void CMsgDOTAProfileCard::set_leaderboard_rank_core(uint32_t value) {
  _internal_set_leaderboard_rank_core(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.leaderboard_rank_core)
}

// optional uint32 rank_tier_peak = 21;
inline bool CMsgDOTAProfileCard::_internal_has_rank_tier_peak() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_rank_tier_peak() const {
  return _internal_has_rank_tier_peak();
}
inline void CMsgDOTAProfileCard::clear_rank_tier_peak() {
  rank_tier_peak_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_rank_tier_peak() const {
  return rank_tier_peak_;
}
inline uint32_t CMsgDOTAProfileCard::rank_tier_peak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.rank_tier_peak)
  return _internal_rank_tier_peak();
}
inline void CMsgDOTAProfileCard::_internal_set_rank_tier_peak(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  rank_tier_peak_ = value;
}
inline void CMsgDOTAProfileCard::set_rank_tier_peak(uint32_t value) {
  _internal_set_rank_tier_peak(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.rank_tier_peak)
}

// optional uint32 title = 23;
inline bool CMsgDOTAProfileCard::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_title() const {
  return _internal_has_title();
}
inline void CMsgDOTAProfileCard::clear_title() {
  title_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTAProfileCard::_internal_title() const {
  return title_;
}
inline uint32_t CMsgDOTAProfileCard::title() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.title)
  return _internal_title();
}
inline void CMsgDOTAProfileCard::_internal_set_title(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  title_ = value;
}
inline void CMsgDOTAProfileCard::set_title(uint32_t value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.title)
}

// optional uint64 favorite_team_packed = 24;
inline bool CMsgDOTAProfileCard::_internal_has_favorite_team_packed() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAProfileCard::has_favorite_team_packed() const {
  return _internal_has_favorite_team_packed();
}
inline void CMsgDOTAProfileCard::clear_favorite_team_packed() {
  favorite_team_packed_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CMsgDOTAProfileCard::_internal_favorite_team_packed() const {
  return favorite_team_packed_;
}
inline uint64_t CMsgDOTAProfileCard::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAProfileCard.favorite_team_packed)
  return _internal_favorite_team_packed();
}
inline void CMsgDOTAProfileCard::_internal_set_favorite_team_packed(uint64_t value) {
  _has_bits_[0] |= 0x00008000u;
  favorite_team_packed_ = value;
}
inline void CMsgDOTAProfileCard::set_favorite_team_packed(uint64_t value) {
  _internal_set_favorite_team_packed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAProfileCard.favorite_team_packed)
}

// -------------------------------------------------------------------

// CMsgSuccessfulHero

// optional uint32 hero_id = 1;
inline bool CMsgSuccessfulHero::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSuccessfulHero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSuccessfulHero::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSuccessfulHero::_internal_hero_id() const {
  return hero_id_;
}
inline uint32_t CMsgSuccessfulHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSuccessfulHero.hero_id)
  return _internal_hero_id();
}
inline void CMsgSuccessfulHero::_internal_set_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  hero_id_ = value;
}
inline void CMsgSuccessfulHero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSuccessfulHero.hero_id)
}

// optional float win_percent = 2;
inline bool CMsgSuccessfulHero::_internal_has_win_percent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSuccessfulHero::has_win_percent() const {
  return _internal_has_win_percent();
}
inline void CMsgSuccessfulHero::clear_win_percent() {
  win_percent_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgSuccessfulHero::_internal_win_percent() const {
  return win_percent_;
}
inline float CMsgSuccessfulHero::win_percent() const {
  // @@protoc_insertion_point(field_get:CMsgSuccessfulHero.win_percent)
  return _internal_win_percent();
}
inline void CMsgSuccessfulHero::_internal_set_win_percent(float value) {
  _has_bits_[0] |= 0x00000002u;
  win_percent_ = value;
}
inline void CMsgSuccessfulHero::set_win_percent(float value) {
  _internal_set_win_percent(value);
  // @@protoc_insertion_point(field_set:CMsgSuccessfulHero.win_percent)
}

// optional uint32 longest_streak = 3;
inline bool CMsgSuccessfulHero::_internal_has_longest_streak() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSuccessfulHero::has_longest_streak() const {
  return _internal_has_longest_streak();
}
inline void CMsgSuccessfulHero::clear_longest_streak() {
  longest_streak_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSuccessfulHero::_internal_longest_streak() const {
  return longest_streak_;
}
inline uint32_t CMsgSuccessfulHero::longest_streak() const {
  // @@protoc_insertion_point(field_get:CMsgSuccessfulHero.longest_streak)
  return _internal_longest_streak();
}
inline void CMsgSuccessfulHero::_internal_set_longest_streak(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  longest_streak_ = value;
}
inline void CMsgSuccessfulHero::set_longest_streak(uint32_t value) {
  _internal_set_longest_streak(value);
  // @@protoc_insertion_point(field_set:CMsgSuccessfulHero.longest_streak)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetAllHeroProgressResponse

// optional uint32 account_id = 1;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.account_id)
}

// optional uint32 curr_hero_id = 2;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_curr_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_curr_hero_id() const {
  return _internal_has_curr_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_curr_hero_id() {
  curr_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_curr_hero_id() const {
  return curr_hero_id_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::curr_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.curr_hero_id)
  return _internal_curr_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_curr_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  curr_hero_id_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_curr_hero_id(uint32_t value) {
  _internal_set_curr_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.curr_hero_id)
}

// optional uint32 laps_completed = 3;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_laps_completed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_laps_completed() const {
  return _internal_has_laps_completed();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_laps_completed() {
  laps_completed_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_laps_completed() const {
  return laps_completed_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::laps_completed() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.laps_completed)
  return _internal_laps_completed();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_laps_completed(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  laps_completed_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_laps_completed(uint32_t value) {
  _internal_set_laps_completed(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.laps_completed)
}

// optional uint32 curr_hero_games = 4;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_curr_hero_games() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_curr_hero_games() const {
  return _internal_has_curr_hero_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_curr_hero_games() {
  curr_hero_games_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_curr_hero_games() const {
  return curr_hero_games_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::curr_hero_games() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.curr_hero_games)
  return _internal_curr_hero_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_curr_hero_games(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  curr_hero_games_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_curr_hero_games(uint32_t value) {
  _internal_set_curr_hero_games(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.curr_hero_games)
}

// optional uint32 curr_lap_time_started = 5;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_curr_lap_time_started() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_curr_lap_time_started() const {
  return _internal_has_curr_lap_time_started();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_curr_lap_time_started() {
  curr_lap_time_started_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_curr_lap_time_started() const {
  return curr_lap_time_started_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::curr_lap_time_started() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.curr_lap_time_started)
  return _internal_curr_lap_time_started();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_curr_lap_time_started(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  curr_lap_time_started_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_curr_lap_time_started(uint32_t value) {
  _internal_set_curr_lap_time_started(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.curr_lap_time_started)
}

// optional uint32 curr_lap_games = 6;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_curr_lap_games() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_curr_lap_games() const {
  return _internal_has_curr_lap_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_curr_lap_games() {
  curr_lap_games_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_curr_lap_games() const {
  return curr_lap_games_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::curr_lap_games() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.curr_lap_games)
  return _internal_curr_lap_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_curr_lap_games(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  curr_lap_games_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_curr_lap_games(uint32_t value) {
  _internal_set_curr_lap_games(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.curr_lap_games)
}

// optional uint32 best_lap_games = 7;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_best_lap_games() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_best_lap_games() const {
  return _internal_has_best_lap_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_best_lap_games() {
  best_lap_games_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_best_lap_games() const {
  return best_lap_games_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::best_lap_games() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.best_lap_games)
  return _internal_best_lap_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_best_lap_games(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  best_lap_games_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_best_lap_games(uint32_t value) {
  _internal_set_best_lap_games(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.best_lap_games)
}

// optional uint32 best_lap_time = 8;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_best_lap_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_best_lap_time() const {
  return _internal_has_best_lap_time();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_best_lap_time() {
  best_lap_time_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_best_lap_time() const {
  return best_lap_time_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::best_lap_time() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.best_lap_time)
  return _internal_best_lap_time();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_best_lap_time(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  best_lap_time_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_best_lap_time(uint32_t value) {
  _internal_set_best_lap_time(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.best_lap_time)
}

// optional uint32 lap_heroes_completed = 9;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_lap_heroes_completed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_lap_heroes_completed() const {
  return _internal_has_lap_heroes_completed();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_lap_heroes_completed() {
  lap_heroes_completed_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_lap_heroes_completed() const {
  return lap_heroes_completed_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::lap_heroes_completed() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.lap_heroes_completed)
  return _internal_lap_heroes_completed();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_lap_heroes_completed(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  lap_heroes_completed_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_lap_heroes_completed(uint32_t value) {
  _internal_set_lap_heroes_completed(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.lap_heroes_completed)
}

// optional uint32 lap_heroes_remaining = 10;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_lap_heroes_remaining() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_lap_heroes_remaining() const {
  return _internal_has_lap_heroes_remaining();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_lap_heroes_remaining() {
  lap_heroes_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_lap_heroes_remaining() const {
  return lap_heroes_remaining_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::lap_heroes_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.lap_heroes_remaining)
  return _internal_lap_heroes_remaining();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_lap_heroes_remaining(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  lap_heroes_remaining_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_lap_heroes_remaining(uint32_t value) {
  _internal_set_lap_heroes_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.lap_heroes_remaining)
}

// optional uint32 next_hero_id = 11;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_next_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_next_hero_id() const {
  return _internal_has_next_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_next_hero_id() {
  next_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_next_hero_id() const {
  return next_hero_id_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::next_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.next_hero_id)
  return _internal_next_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_next_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  next_hero_id_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_next_hero_id(uint32_t value) {
  _internal_set_next_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.next_hero_id)
}

// optional uint32 prev_hero_id = 12;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_prev_hero_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_prev_hero_id() const {
  return _internal_has_prev_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_prev_hero_id() {
  prev_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_prev_hero_id() const {
  return prev_hero_id_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::prev_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.prev_hero_id)
  return _internal_prev_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_prev_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  prev_hero_id_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_prev_hero_id(uint32_t value) {
  _internal_set_prev_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.prev_hero_id)
}

// optional uint32 prev_hero_games = 13;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_prev_hero_games() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_prev_hero_games() const {
  return _internal_has_prev_hero_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_prev_hero_games() {
  prev_hero_games_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_prev_hero_games() const {
  return prev_hero_games_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::prev_hero_games() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.prev_hero_games)
  return _internal_prev_hero_games();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_prev_hero_games(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  prev_hero_games_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_prev_hero_games(uint32_t value) {
  _internal_set_prev_hero_games(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.prev_hero_games)
}

// optional float prev_avg_tries = 14;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_prev_avg_tries() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_prev_avg_tries() const {
  return _internal_has_prev_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_prev_avg_tries() {
  prev_avg_tries_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::_internal_prev_avg_tries() const {
  return prev_avg_tries_;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::prev_avg_tries() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.prev_avg_tries)
  return _internal_prev_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_prev_avg_tries(float value) {
  _has_bits_[0] |= 0x00004000u;
  prev_avg_tries_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_prev_avg_tries(float value) {
  _internal_set_prev_avg_tries(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.prev_avg_tries)
}

// optional float curr_avg_tries = 15;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_curr_avg_tries() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_curr_avg_tries() const {
  return _internal_has_curr_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_curr_avg_tries() {
  curr_avg_tries_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::_internal_curr_avg_tries() const {
  return curr_avg_tries_;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::curr_avg_tries() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.curr_avg_tries)
  return _internal_curr_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_curr_avg_tries(float value) {
  _has_bits_[0] |= 0x00008000u;
  curr_avg_tries_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_curr_avg_tries(float value) {
  _internal_set_curr_avg_tries(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.curr_avg_tries)
}

// optional float next_avg_tries = 16;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_next_avg_tries() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_next_avg_tries() const {
  return _internal_has_next_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_next_avg_tries() {
  next_avg_tries_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::_internal_next_avg_tries() const {
  return next_avg_tries_;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::next_avg_tries() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.next_avg_tries)
  return _internal_next_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_next_avg_tries(float value) {
  _has_bits_[0] |= 0x00010000u;
  next_avg_tries_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_next_avg_tries(float value) {
  _internal_set_next_avg_tries(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.next_avg_tries)
}

// optional float full_lap_avg_tries = 17;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_full_lap_avg_tries() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_full_lap_avg_tries() const {
  return _internal_has_full_lap_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_full_lap_avg_tries() {
  full_lap_avg_tries_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::_internal_full_lap_avg_tries() const {
  return full_lap_avg_tries_;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::full_lap_avg_tries() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.full_lap_avg_tries)
  return _internal_full_lap_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_full_lap_avg_tries(float value) {
  _has_bits_[0] |= 0x00020000u;
  full_lap_avg_tries_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_full_lap_avg_tries(float value) {
  _internal_set_full_lap_avg_tries(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.full_lap_avg_tries)
}

// optional float curr_lap_avg_tries = 18;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_curr_lap_avg_tries() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_curr_lap_avg_tries() const {
  return _internal_has_curr_lap_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_curr_lap_avg_tries() {
  curr_lap_avg_tries_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::_internal_curr_lap_avg_tries() const {
  return curr_lap_avg_tries_;
}
inline float CMsgClientToGCGetAllHeroProgressResponse::curr_lap_avg_tries() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.curr_lap_avg_tries)
  return _internal_curr_lap_avg_tries();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_curr_lap_avg_tries(float value) {
  _has_bits_[0] |= 0x00040000u;
  curr_lap_avg_tries_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_curr_lap_avg_tries(float value) {
  _internal_set_curr_lap_avg_tries(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.curr_lap_avg_tries)
}

// optional string profile_name = 19;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_profile_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_profile_name() const {
  return _internal_has_profile_name();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_profile_name() {
  profile_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCGetAllHeroProgressResponse::profile_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.profile_name)
  return _internal_profile_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCGetAllHeroProgressResponse::set_profile_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.profile_name)
}
inline std::string* CMsgClientToGCGetAllHeroProgressResponse::mutable_profile_name() {
  std::string* _s = _internal_mutable_profile_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetAllHeroProgressResponse.profile_name)
  return _s;
}
inline const std::string& CMsgClientToGCGetAllHeroProgressResponse::_internal_profile_name() const {
  return profile_name_.Get();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_profile_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCGetAllHeroProgressResponse::_internal_mutable_profile_name() {
  _has_bits_[0] |= 0x00000001u;
  return profile_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCGetAllHeroProgressResponse::release_profile_name() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetAllHeroProgressResponse.profile_name)
  if (!_internal_has_profile_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = profile_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_allocated_profile_name(std::string* profile_name) {
  if (profile_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetAllHeroProgressResponse.profile_name)
}

// optional uint32 start_hero_id = 20;
inline bool CMsgClientToGCGetAllHeroProgressResponse::_internal_has_start_hero_id() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientToGCGetAllHeroProgressResponse::has_start_hero_id() const {
  return _internal_has_start_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::clear_start_hero_id() {
  start_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::_internal_start_hero_id() const {
  return start_hero_id_;
}
inline uint32_t CMsgClientToGCGetAllHeroProgressResponse::start_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetAllHeroProgressResponse.start_hero_id)
  return _internal_start_hero_id();
}
inline void CMsgClientToGCGetAllHeroProgressResponse::_internal_set_start_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  start_hero_id_ = value;
}
inline void CMsgClientToGCGetAllHeroProgressResponse::set_start_hero_id(uint32_t value) {
  _internal_set_start_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetAllHeroProgressResponse.start_hero_id)
}

// -------------------------------------------------------------------

// CMsgProfileResponse_FeaturedHero

// optional uint32 hero_id = 1;
inline bool CMsgProfileResponse_FeaturedHero::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProfileResponse_FeaturedHero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgProfileResponse_FeaturedHero::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgProfileResponse_FeaturedHero::_internal_hero_id() const {
  return hero_id_;
}
inline uint32_t CMsgProfileResponse_FeaturedHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.FeaturedHero.hero_id)
  return _internal_hero_id();
}
inline void CMsgProfileResponse_FeaturedHero::_internal_set_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  hero_id_ = value;
}
inline void CMsgProfileResponse_FeaturedHero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.FeaturedHero.hero_id)
}

// repeated .CSOEconItem equipped_econ_items = 2;
inline int CMsgProfileResponse_FeaturedHero::_internal_equipped_econ_items_size() const {
  return equipped_econ_items_.size();
}
inline int CMsgProfileResponse_FeaturedHero::equipped_econ_items_size() const {
  return _internal_equipped_econ_items_size();
}
inline void CMsgProfileResponse_FeaturedHero::clear_equipped_econ_items() {
  equipped_econ_items_.Clear();
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::mutable_equipped_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.FeaturedHero.equipped_econ_items)
  return equipped_econ_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
CMsgProfileResponse_FeaturedHero::mutable_equipped_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProfileResponse.FeaturedHero.equipped_econ_items)
  return &equipped_econ_items_;
}
inline const ::CSOEconItem& CMsgProfileResponse_FeaturedHero::_internal_equipped_econ_items(int index) const {
  return equipped_econ_items_.Get(index);
}
inline const ::CSOEconItem& CMsgProfileResponse_FeaturedHero::equipped_econ_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.FeaturedHero.equipped_econ_items)
  return _internal_equipped_econ_items(index);
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::_internal_add_equipped_econ_items() {
  return equipped_econ_items_.Add();
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::add_equipped_econ_items() {
  ::CSOEconItem* _add = _internal_add_equipped_econ_items();
  // @@protoc_insertion_point(field_add:CMsgProfileResponse.FeaturedHero.equipped_econ_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
CMsgProfileResponse_FeaturedHero::equipped_econ_items() const {
  // @@protoc_insertion_point(field_list:CMsgProfileResponse.FeaturedHero.equipped_econ_items)
  return equipped_econ_items_;
}

// optional bool manually_set = 3;
inline bool CMsgProfileResponse_FeaturedHero::_internal_has_manually_set() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProfileResponse_FeaturedHero::has_manually_set() const {
  return _internal_has_manually_set();
}
inline void CMsgProfileResponse_FeaturedHero::clear_manually_set() {
  manually_set_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgProfileResponse_FeaturedHero::_internal_manually_set() const {
  return manually_set_;
}
inline bool CMsgProfileResponse_FeaturedHero::manually_set() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.FeaturedHero.manually_set)
  return _internal_manually_set();
}
inline void CMsgProfileResponse_FeaturedHero::_internal_set_manually_set(bool value) {
  _has_bits_[0] |= 0x00000004u;
  manually_set_ = value;
}
inline void CMsgProfileResponse_FeaturedHero::set_manually_set(bool value) {
  _internal_set_manually_set(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.FeaturedHero.manually_set)
}

// optional uint32 plus_hero_xp = 4;
inline bool CMsgProfileResponse_FeaturedHero::_internal_has_plus_hero_xp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProfileResponse_FeaturedHero::has_plus_hero_xp() const {
  return _internal_has_plus_hero_xp();
}
inline void CMsgProfileResponse_FeaturedHero::clear_plus_hero_xp() {
  plus_hero_xp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgProfileResponse_FeaturedHero::_internal_plus_hero_xp() const {
  return plus_hero_xp_;
}
inline uint32_t CMsgProfileResponse_FeaturedHero::plus_hero_xp() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.FeaturedHero.plus_hero_xp)
  return _internal_plus_hero_xp();
}
inline void CMsgProfileResponse_FeaturedHero::_internal_set_plus_hero_xp(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  plus_hero_xp_ = value;
}
inline void CMsgProfileResponse_FeaturedHero::set_plus_hero_xp(uint32_t value) {
  _internal_set_plus_hero_xp(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.FeaturedHero.plus_hero_xp)
}

// optional .CSOEconItem plus_hero_relics_item = 5;
inline bool CMsgProfileResponse_FeaturedHero::_internal_has_plus_hero_relics_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plus_hero_relics_item_ != nullptr);
  return value;
}
inline bool CMsgProfileResponse_FeaturedHero::has_plus_hero_relics_item() const {
  return _internal_has_plus_hero_relics_item();
}
inline void CMsgProfileResponse_FeaturedHero::clear_plus_hero_relics_item() {
  if (plus_hero_relics_item_ != nullptr) plus_hero_relics_item_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSOEconItem& CMsgProfileResponse_FeaturedHero::_internal_plus_hero_relics_item() const {
  const ::CSOEconItem* p = plus_hero_relics_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgProfileResponse_FeaturedHero::plus_hero_relics_item() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.FeaturedHero.plus_hero_relics_item)
  return _internal_plus_hero_relics_item();
}
inline void CMsgProfileResponse_FeaturedHero::unsafe_arena_set_allocated_plus_hero_relics_item(
    ::CSOEconItem* plus_hero_relics_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plus_hero_relics_item_);
  }
  plus_hero_relics_item_ = plus_hero_relics_item;
  if (plus_hero_relics_item) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProfileResponse.FeaturedHero.plus_hero_relics_item)
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::release_plus_hero_relics_item() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = plus_hero_relics_item_;
  plus_hero_relics_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::unsafe_arena_release_plus_hero_relics_item() {
  // @@protoc_insertion_point(field_release:CMsgProfileResponse.FeaturedHero.plus_hero_relics_item)
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = plus_hero_relics_item_;
  plus_hero_relics_item_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::_internal_mutable_plus_hero_relics_item() {
  _has_bits_[0] |= 0x00000001u;
  if (plus_hero_relics_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    plus_hero_relics_item_ = p;
  }
  return plus_hero_relics_item_;
}
inline ::CSOEconItem* CMsgProfileResponse_FeaturedHero::mutable_plus_hero_relics_item() {
  ::CSOEconItem* _msg = _internal_mutable_plus_hero_relics_item();
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.FeaturedHero.plus_hero_relics_item)
  return _msg;
}
inline void CMsgProfileResponse_FeaturedHero::set_allocated_plus_hero_relics_item(::CSOEconItem* plus_hero_relics_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete plus_hero_relics_item_;
  }
  if (plus_hero_relics_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSOEconItem>::GetOwningArena(plus_hero_relics_item);
    if (message_arena != submessage_arena) {
      plus_hero_relics_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plus_hero_relics_item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plus_hero_relics_item_ = plus_hero_relics_item;
  // @@protoc_insertion_point(field_set_allocated:CMsgProfileResponse.FeaturedHero.plus_hero_relics_item)
}

// -------------------------------------------------------------------

// CMsgProfileResponse_MatchInfo

// optional uint64 match_id = 1;
inline bool CMsgProfileResponse_MatchInfo::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProfileResponse_MatchInfo::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgProfileResponse_MatchInfo::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgProfileResponse_MatchInfo::_internal_match_id() const {
  return match_id_;
}
inline uint64_t CMsgProfileResponse_MatchInfo::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.MatchInfo.match_id)
  return _internal_match_id();
}
inline void CMsgProfileResponse_MatchInfo::_internal_set_match_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgProfileResponse_MatchInfo::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.MatchInfo.match_id)
}

// optional uint32 match_timestamp = 2;
inline bool CMsgProfileResponse_MatchInfo::_internal_has_match_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProfileResponse_MatchInfo::has_match_timestamp() const {
  return _internal_has_match_timestamp();
}
inline void CMsgProfileResponse_MatchInfo::clear_match_timestamp() {
  match_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgProfileResponse_MatchInfo::_internal_match_timestamp() const {
  return match_timestamp_;
}
inline uint32_t CMsgProfileResponse_MatchInfo::match_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.MatchInfo.match_timestamp)
  return _internal_match_timestamp();
}
inline void CMsgProfileResponse_MatchInfo::_internal_set_match_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  match_timestamp_ = value;
}
inline void CMsgProfileResponse_MatchInfo::set_match_timestamp(uint32_t value) {
  _internal_set_match_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.MatchInfo.match_timestamp)
}

// optional sint32 performance_rating = 3;
inline bool CMsgProfileResponse_MatchInfo::_internal_has_performance_rating() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProfileResponse_MatchInfo::has_performance_rating() const {
  return _internal_has_performance_rating();
}
inline void CMsgProfileResponse_MatchInfo::clear_performance_rating() {
  performance_rating_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgProfileResponse_MatchInfo::_internal_performance_rating() const {
  return performance_rating_;
}
inline int32_t CMsgProfileResponse_MatchInfo::performance_rating() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.MatchInfo.performance_rating)
  return _internal_performance_rating();
}
inline void CMsgProfileResponse_MatchInfo::_internal_set_performance_rating(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  performance_rating_ = value;
}
inline void CMsgProfileResponse_MatchInfo::set_performance_rating(int32_t value) {
  _internal_set_performance_rating(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.MatchInfo.performance_rating)
}

// optional uint32 hero_id = 4;
inline bool CMsgProfileResponse_MatchInfo::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProfileResponse_MatchInfo::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgProfileResponse_MatchInfo::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgProfileResponse_MatchInfo::_internal_hero_id() const {
  return hero_id_;
}
inline uint32_t CMsgProfileResponse_MatchInfo::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.MatchInfo.hero_id)
  return _internal_hero_id();
}
inline void CMsgProfileResponse_MatchInfo::_internal_set_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  hero_id_ = value;
}
inline void CMsgProfileResponse_MatchInfo::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.MatchInfo.hero_id)
}

// optional bool won_match = 5;
inline bool CMsgProfileResponse_MatchInfo::_internal_has_won_match() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProfileResponse_MatchInfo::has_won_match() const {
  return _internal_has_won_match();
}
inline void CMsgProfileResponse_MatchInfo::clear_won_match() {
  won_match_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgProfileResponse_MatchInfo::_internal_won_match() const {
  return won_match_;
}
inline bool CMsgProfileResponse_MatchInfo::won_match() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.MatchInfo.won_match)
  return _internal_won_match();
}
inline void CMsgProfileResponse_MatchInfo::_internal_set_won_match(bool value) {
  _has_bits_[0] |= 0x00000010u;
  won_match_ = value;
}
inline void CMsgProfileResponse_MatchInfo::set_won_match(bool value) {
  _internal_set_won_match(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.MatchInfo.won_match)
}

// -------------------------------------------------------------------

// CMsgProfileResponse

// optional .CSOEconItem background_item = 1;
inline bool CMsgProfileResponse::_internal_has_background_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || background_item_ != nullptr);
  return value;
}
inline bool CMsgProfileResponse::has_background_item() const {
  return _internal_has_background_item();
}
inline void CMsgProfileResponse::clear_background_item() {
  if (background_item_ != nullptr) background_item_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSOEconItem& CMsgProfileResponse::_internal_background_item() const {
  const ::CSOEconItem* p = background_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CMsgProfileResponse::background_item() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.background_item)
  return _internal_background_item();
}
inline void CMsgProfileResponse::unsafe_arena_set_allocated_background_item(
    ::CSOEconItem* background_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_item_);
  }
  background_item_ = background_item;
  if (background_item) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProfileResponse.background_item)
}
inline ::CSOEconItem* CMsgProfileResponse::release_background_item() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = background_item_;
  background_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CMsgProfileResponse::unsafe_arena_release_background_item() {
  // @@protoc_insertion_point(field_release:CMsgProfileResponse.background_item)
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = background_item_;
  background_item_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CMsgProfileResponse::_internal_mutable_background_item() {
  _has_bits_[0] |= 0x00000001u;
  if (background_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    background_item_ = p;
  }
  return background_item_;
}
inline ::CSOEconItem* CMsgProfileResponse::mutable_background_item() {
  ::CSOEconItem* _msg = _internal_mutable_background_item();
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.background_item)
  return _msg;
}
inline void CMsgProfileResponse::set_allocated_background_item(::CSOEconItem* background_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete background_item_;
  }
  if (background_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSOEconItem>::GetOwningArena(background_item);
    if (message_arena != submessage_arena) {
      background_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  background_item_ = background_item;
  // @@protoc_insertion_point(field_set_allocated:CMsgProfileResponse.background_item)
}

// repeated .CMsgProfileResponse.FeaturedHero featured_heroes = 2;
inline int CMsgProfileResponse::_internal_featured_heroes_size() const {
  return featured_heroes_.size();
}
inline int CMsgProfileResponse::featured_heroes_size() const {
  return _internal_featured_heroes_size();
}
inline void CMsgProfileResponse::clear_featured_heroes() {
  featured_heroes_.Clear();
}
inline ::CMsgProfileResponse_FeaturedHero* CMsgProfileResponse::mutable_featured_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.featured_heroes)
  return featured_heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_FeaturedHero >*
CMsgProfileResponse::mutable_featured_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProfileResponse.featured_heroes)
  return &featured_heroes_;
}
inline const ::CMsgProfileResponse_FeaturedHero& CMsgProfileResponse::_internal_featured_heroes(int index) const {
  return featured_heroes_.Get(index);
}
inline const ::CMsgProfileResponse_FeaturedHero& CMsgProfileResponse::featured_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.featured_heroes)
  return _internal_featured_heroes(index);
}
inline ::CMsgProfileResponse_FeaturedHero* CMsgProfileResponse::_internal_add_featured_heroes() {
  return featured_heroes_.Add();
}
inline ::CMsgProfileResponse_FeaturedHero* CMsgProfileResponse::add_featured_heroes() {
  ::CMsgProfileResponse_FeaturedHero* _add = _internal_add_featured_heroes();
  // @@protoc_insertion_point(field_add:CMsgProfileResponse.featured_heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_FeaturedHero >&
CMsgProfileResponse::featured_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgProfileResponse.featured_heroes)
  return featured_heroes_;
}

// repeated .CMsgProfileResponse.MatchInfo recent_matches = 3;
inline int CMsgProfileResponse::_internal_recent_matches_size() const {
  return recent_matches_.size();
}
inline int CMsgProfileResponse::recent_matches_size() const {
  return _internal_recent_matches_size();
}
inline void CMsgProfileResponse::clear_recent_matches() {
  recent_matches_.Clear();
}
inline ::CMsgProfileResponse_MatchInfo* CMsgProfileResponse::mutable_recent_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.recent_matches)
  return recent_matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_MatchInfo >*
CMsgProfileResponse::mutable_recent_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProfileResponse.recent_matches)
  return &recent_matches_;
}
inline const ::CMsgProfileResponse_MatchInfo& CMsgProfileResponse::_internal_recent_matches(int index) const {
  return recent_matches_.Get(index);
}
inline const ::CMsgProfileResponse_MatchInfo& CMsgProfileResponse::recent_matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.recent_matches)
  return _internal_recent_matches(index);
}
inline ::CMsgProfileResponse_MatchInfo* CMsgProfileResponse::_internal_add_recent_matches() {
  return recent_matches_.Add();
}
inline ::CMsgProfileResponse_MatchInfo* CMsgProfileResponse::add_recent_matches() {
  ::CMsgProfileResponse_MatchInfo* _add = _internal_add_recent_matches();
  // @@protoc_insertion_point(field_add:CMsgProfileResponse.recent_matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgProfileResponse_MatchInfo >&
CMsgProfileResponse::recent_matches() const {
  // @@protoc_insertion_point(field_list:CMsgProfileResponse.recent_matches)
  return recent_matches_;
}

// repeated .CMsgSuccessfulHero successful_heroes = 4;
inline int CMsgProfileResponse::_internal_successful_heroes_size() const {
  return successful_heroes_.size();
}
inline int CMsgProfileResponse::successful_heroes_size() const {
  return _internal_successful_heroes_size();
}
inline void CMsgProfileResponse::clear_successful_heroes() {
  successful_heroes_.Clear();
}
inline ::CMsgSuccessfulHero* CMsgProfileResponse::mutable_successful_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.successful_heroes)
  return successful_heroes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSuccessfulHero >*
CMsgProfileResponse::mutable_successful_heroes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgProfileResponse.successful_heroes)
  return &successful_heroes_;
}
inline const ::CMsgSuccessfulHero& CMsgProfileResponse::_internal_successful_heroes(int index) const {
  return successful_heroes_.Get(index);
}
inline const ::CMsgSuccessfulHero& CMsgProfileResponse::successful_heroes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.successful_heroes)
  return _internal_successful_heroes(index);
}
inline ::CMsgSuccessfulHero* CMsgProfileResponse::_internal_add_successful_heroes() {
  return successful_heroes_.Add();
}
inline ::CMsgSuccessfulHero* CMsgProfileResponse::add_successful_heroes() {
  ::CMsgSuccessfulHero* _add = _internal_add_successful_heroes();
  // @@protoc_insertion_point(field_add:CMsgProfileResponse.successful_heroes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSuccessfulHero >&
CMsgProfileResponse::successful_heroes() const {
  // @@protoc_insertion_point(field_list:CMsgProfileResponse.successful_heroes)
  return successful_heroes_;
}

// optional .CMsgRecentMatchInfo recent_match_details = 5;
inline bool CMsgProfileResponse::_internal_has_recent_match_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || recent_match_details_ != nullptr);
  return value;
}
inline bool CMsgProfileResponse::has_recent_match_details() const {
  return _internal_has_recent_match_details();
}
inline void CMsgProfileResponse::clear_recent_match_details() {
  if (recent_match_details_ != nullptr) recent_match_details_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgRecentMatchInfo& CMsgProfileResponse::_internal_recent_match_details() const {
  const ::CMsgRecentMatchInfo* p = recent_match_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgRecentMatchInfo&>(
      ::_CMsgRecentMatchInfo_default_instance_);
}
inline const ::CMsgRecentMatchInfo& CMsgProfileResponse::recent_match_details() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.recent_match_details)
  return _internal_recent_match_details();
}
inline void CMsgProfileResponse::unsafe_arena_set_allocated_recent_match_details(
    ::CMsgRecentMatchInfo* recent_match_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recent_match_details_);
  }
  recent_match_details_ = recent_match_details;
  if (recent_match_details) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgProfileResponse.recent_match_details)
}
inline ::CMsgRecentMatchInfo* CMsgProfileResponse::release_recent_match_details() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgRecentMatchInfo* temp = recent_match_details_;
  recent_match_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgRecentMatchInfo* CMsgProfileResponse::unsafe_arena_release_recent_match_details() {
  // @@protoc_insertion_point(field_release:CMsgProfileResponse.recent_match_details)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgRecentMatchInfo* temp = recent_match_details_;
  recent_match_details_ = nullptr;
  return temp;
}
inline ::CMsgRecentMatchInfo* CMsgProfileResponse::_internal_mutable_recent_match_details() {
  _has_bits_[0] |= 0x00000002u;
  if (recent_match_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgRecentMatchInfo>(GetArenaForAllocation());
    recent_match_details_ = p;
  }
  return recent_match_details_;
}
inline ::CMsgRecentMatchInfo* CMsgProfileResponse::mutable_recent_match_details() {
  ::CMsgRecentMatchInfo* _msg = _internal_mutable_recent_match_details();
  // @@protoc_insertion_point(field_mutable:CMsgProfileResponse.recent_match_details)
  return _msg;
}
inline void CMsgProfileResponse::set_allocated_recent_match_details(::CMsgRecentMatchInfo* recent_match_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete recent_match_details_;
  }
  if (recent_match_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgRecentMatchInfo>::GetOwningArena(recent_match_details);
    if (message_arena != submessage_arena) {
      recent_match_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recent_match_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  recent_match_details_ = recent_match_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgProfileResponse.recent_match_details)
}

// optional .CMsgProfileResponse.EResponse result = 6 [default = k_eInternalError];
inline bool CMsgProfileResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProfileResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgProfileResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgProfileResponse_EResponse CMsgProfileResponse::_internal_result() const {
  return static_cast< ::CMsgProfileResponse_EResponse >(result_);
}
inline ::CMsgProfileResponse_EResponse CMsgProfileResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgProfileResponse.result)
  return _internal_result();
}
inline void CMsgProfileResponse::_internal_set_result(::CMsgProfileResponse_EResponse value) {
  assert(::CMsgProfileResponse_EResponse_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CMsgProfileResponse::set_result(::CMsgProfileResponse_EResponse value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgProfileResponse.result)
}

// -------------------------------------------------------------------

// CMsgSOMultipleObjects_SingleObject

// optional int32 type_id = 1;
inline bool CMsgSOMultipleObjects_SingleObject::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects_SingleObject::has_type_id() const {
  return _internal_has_type_id();
}
inline void CMsgSOMultipleObjects_SingleObject::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSOMultipleObjects_SingleObject::_internal_type_id() const {
  return type_id_;
}
inline int32_t CMsgSOMultipleObjects_SingleObject::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.SingleObject.type_id)
  return _internal_type_id();
}
inline void CMsgSOMultipleObjects_SingleObject::_internal_set_type_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  type_id_ = value;
}
inline void CMsgSOMultipleObjects_SingleObject::set_type_id(int32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.SingleObject.type_id)
}

// optional bytes object_data = 2;
inline bool CMsgSOMultipleObjects_SingleObject::_internal_has_object_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects_SingleObject::has_object_data() const {
  return _internal_has_object_data();
}
inline void CMsgSOMultipleObjects_SingleObject::clear_object_data() {
  object_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSOMultipleObjects_SingleObject::object_data() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.SingleObject.object_data)
  return _internal_object_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSOMultipleObjects_SingleObject::set_object_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 object_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.SingleObject.object_data)
}
inline std::string* CMsgSOMultipleObjects_SingleObject::mutable_object_data() {
  std::string* _s = _internal_mutable_object_data();
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.SingleObject.object_data)
  return _s;
}
inline const std::string& CMsgSOMultipleObjects_SingleObject::_internal_object_data() const {
  return object_data_.Get();
}
inline void CMsgSOMultipleObjects_SingleObject::_internal_set_object_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSOMultipleObjects_SingleObject::_internal_mutable_object_data() {
  _has_bits_[0] |= 0x00000001u;
  return object_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSOMultipleObjects_SingleObject::release_object_data() {
  // @@protoc_insertion_point(field_release:CMsgSOMultipleObjects.SingleObject.object_data)
  if (!_internal_has_object_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = object_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (object_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSOMultipleObjects_SingleObject::set_allocated_object_data(std::string* object_data) {
  if (object_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (object_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    object_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSOMultipleObjects.SingleObject.object_data)
}

// -------------------------------------------------------------------

// CMsgSOMultipleObjects

// repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
inline int CMsgSOMultipleObjects::_internal_objects_modified_size() const {
  return objects_modified_.size();
}
inline int CMsgSOMultipleObjects::objects_modified_size() const {
  return _internal_objects_modified_size();
}
inline void CMsgSOMultipleObjects::clear_objects_modified() {
  objects_modified_.Clear();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_modified(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects_modified)
  return objects_modified_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_modified() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects_modified)
  return &objects_modified_;
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::_internal_objects_modified(int index) const {
  return objects_modified_.Get(index);
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_modified(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects_modified)
  return _internal_objects_modified(index);
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::_internal_add_objects_modified() {
  return objects_modified_.Add();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_modified() {
  ::CMsgSOMultipleObjects_SingleObject* _add = _internal_add_objects_modified();
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects_modified)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_modified() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects_modified)
  return objects_modified_;
}

// optional fixed64 version = 3;
inline bool CMsgSOMultipleObjects::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOMultipleObjects::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgSOMultipleObjects::_internal_version() const {
  return version_;
}
inline uint64_t CMsgSOMultipleObjects::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.version)
  return _internal_version();
}
inline void CMsgSOMultipleObjects::_internal_set_version(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgSOMultipleObjects::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.version)
}

// repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
inline int CMsgSOMultipleObjects::_internal_objects_added_size() const {
  return objects_added_.size();
}
inline int CMsgSOMultipleObjects::objects_added_size() const {
  return _internal_objects_added_size();
}
inline void CMsgSOMultipleObjects::clear_objects_added() {
  objects_added_.Clear();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_added(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects_added)
  return objects_added_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_added() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects_added)
  return &objects_added_;
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::_internal_objects_added(int index) const {
  return objects_added_.Get(index);
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_added(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects_added)
  return _internal_objects_added(index);
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::_internal_add_objects_added() {
  return objects_added_.Add();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_added() {
  ::CMsgSOMultipleObjects_SingleObject* _add = _internal_add_objects_added();
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects_added)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_added() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects_added)
  return objects_added_;
}

// repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
inline int CMsgSOMultipleObjects::_internal_objects_removed_size() const {
  return objects_removed_.size();
}
inline int CMsgSOMultipleObjects::objects_removed_size() const {
  return _internal_objects_removed_size();
}
inline void CMsgSOMultipleObjects::clear_objects_removed() {
  objects_removed_.Clear();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::mutable_objects_removed(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.objects_removed)
  return objects_removed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >*
CMsgSOMultipleObjects::mutable_objects_removed() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOMultipleObjects.objects_removed)
  return &objects_removed_;
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::_internal_objects_removed(int index) const {
  return objects_removed_.Get(index);
}
inline const ::CMsgSOMultipleObjects_SingleObject& CMsgSOMultipleObjects::objects_removed(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.objects_removed)
  return _internal_objects_removed(index);
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::_internal_add_objects_removed() {
  return objects_removed_.Add();
}
inline ::CMsgSOMultipleObjects_SingleObject* CMsgSOMultipleObjects::add_objects_removed() {
  ::CMsgSOMultipleObjects_SingleObject* _add = _internal_add_objects_removed();
  // @@protoc_insertion_point(field_add:CMsgSOMultipleObjects.objects_removed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOMultipleObjects_SingleObject >&
CMsgSOMultipleObjects::objects_removed() const {
  // @@protoc_insertion_point(field_list:CMsgSOMultipleObjects.objects_removed)
  return objects_removed_;
}

// optional .CMsgSOIDOwner owner_soid = 6;
inline bool CMsgSOMultipleObjects::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOMultipleObjects::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOMultipleObjects::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOMultipleObjects::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOMultipleObjects::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOMultipleObjects::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOMultipleObjects.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOMultipleObjects.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOMultipleObjects::mutable_owner_soid() {
  ::CMsgSOIDOwner* _msg = _internal_mutable_owner_soid();
  // @@protoc_insertion_point(field_mutable:CMsgSOMultipleObjects.owner_soid)
  return _msg;
}
inline void CMsgSOMultipleObjects::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOMultipleObjects.owner_soid)
}

// optional uint32 service_id = 7;
inline bool CMsgSOMultipleObjects::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOMultipleObjects::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOMultipleObjects::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSOMultipleObjects::_internal_service_id() const {
  return service_id_;
}
inline uint32_t CMsgSOMultipleObjects::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOMultipleObjects.service_id)
  return _internal_service_id();
}
inline void CMsgSOMultipleObjects::_internal_set_service_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  service_id_ = value;
}
inline void CMsgSOMultipleObjects::set_service_id(uint32_t value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOMultipleObjects.service_id)
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscribed_SubscribedType

// optional int32 type_id = 1;
inline bool CMsgSOCacheSubscribed_SubscribedType::_internal_has_type_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed_SubscribedType::has_type_id() const {
  return _internal_has_type_id();
}
inline void CMsgSOCacheSubscribed_SubscribedType::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSOCacheSubscribed_SubscribedType::_internal_type_id() const {
  return type_id_;
}
inline int32_t CMsgSOCacheSubscribed_SubscribedType::type_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.SubscribedType.type_id)
  return _internal_type_id();
}
inline void CMsgSOCacheSubscribed_SubscribedType::_internal_set_type_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_id_ = value;
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_type_id(int32_t value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.type_id)
}

// repeated bytes object_data = 2;
inline int CMsgSOCacheSubscribed_SubscribedType::_internal_object_data_size() const {
  return object_data_.size();
}
inline int CMsgSOCacheSubscribed_SubscribedType::object_data_size() const {
  return _internal_object_data_size();
}
inline void CMsgSOCacheSubscribed_SubscribedType::clear_object_data() {
  object_data_.Clear();
}
inline std::string* CMsgSOCacheSubscribed_SubscribedType::add_object_data() {
  std::string* _s = _internal_add_object_data();
  // @@protoc_insertion_point(field_add_mutable:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return _s;
}
inline const std::string& CMsgSOCacheSubscribed_SubscribedType::_internal_object_data(int index) const {
  return object_data_.Get(index);
}
inline const std::string& CMsgSOCacheSubscribed_SubscribedType::object_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return _internal_object_data(index);
}
inline std::string* CMsgSOCacheSubscribed_SubscribedType::mutable_object_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_.Mutable(index);
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const std::string& value) {
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, std::string&& value) {
  object_data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  object_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::set_object_data(int index, const void* value, size_t size) {
  object_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline std::string* CMsgSOCacheSubscribed_SubscribedType::_internal_add_object_data() {
  return object_data_.Add();
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const std::string& value) {
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(std::string&& value) {
  object_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  object_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline void CMsgSOCacheSubscribed_SubscribedType::add_object_data(const void* value, size_t size) {
  object_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgSOCacheSubscribed.SubscribedType.object_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgSOCacheSubscribed_SubscribedType::object_data() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return object_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgSOCacheSubscribed_SubscribedType::mutable_object_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.SubscribedType.object_data)
  return &object_data_;
}

// -------------------------------------------------------------------

// CMsgSOCacheSubscribed

// repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
inline int CMsgSOCacheSubscribed::_internal_objects_size() const {
  return objects_.size();
}
inline int CMsgSOCacheSubscribed::objects_size() const {
  return _internal_objects_size();
}
inline void CMsgSOCacheSubscribed::clear_objects() {
  objects_.Clear();
}
inline ::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >*
CMsgSOCacheSubscribed::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.objects)
  return &objects_;
}
inline const ::CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::CMsgSOCacheSubscribed_SubscribedType& CMsgSOCacheSubscribed::objects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.objects)
  return _internal_objects(index);
}
inline ::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::_internal_add_objects() {
  return objects_.Add();
}
inline ::CMsgSOCacheSubscribed_SubscribedType* CMsgSOCacheSubscribed::add_objects() {
  ::CMsgSOCacheSubscribed_SubscribedType* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheSubscribed_SubscribedType >&
CMsgSOCacheSubscribed::objects() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.objects)
  return objects_;
}

// optional fixed64 version = 3;
inline bool CMsgSOCacheSubscribed::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheSubscribed::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgSOCacheSubscribed::_internal_version() const {
  return version_;
}
inline uint64_t CMsgSOCacheSubscribed::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.version)
  return _internal_version();
}
inline void CMsgSOCacheSubscribed::_internal_set_version(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgSOCacheSubscribed::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.version)
}

// optional .CMsgSOIDOwner owner_soid = 4;
inline bool CMsgSOCacheSubscribed::_internal_has_owner_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || owner_soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheSubscribed::has_owner_soid() const {
  return _internal_has_owner_soid();
}
inline void CMsgSOCacheSubscribed::clear_owner_soid() {
  if (owner_soid_ != nullptr) owner_soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscribed::_internal_owner_soid() const {
  const ::CMsgSOIDOwner* p = owner_soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheSubscribed::owner_soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.owner_soid)
  return _internal_owner_soid();
}
inline void CMsgSOCacheSubscribed::unsafe_arena_set_allocated_owner_soid(
    ::CMsgSOIDOwner* owner_soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_soid_);
  }
  owner_soid_ = owner_soid;
  if (owner_soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheSubscribed.owner_soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::release_owner_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::unsafe_arena_release_owner_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheSubscribed.owner_soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = owner_soid_;
  owner_soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::_internal_mutable_owner_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    owner_soid_ = p;
  }
  return owner_soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheSubscribed::mutable_owner_soid() {
  ::CMsgSOIDOwner* _msg = _internal_mutable_owner_soid();
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheSubscribed.owner_soid)
  return _msg;
}
inline void CMsgSOCacheSubscribed::set_allocated_owner_soid(::CMsgSOIDOwner* owner_soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete owner_soid_;
  }
  if (owner_soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(owner_soid);
    if (message_arena != submessage_arena) {
      owner_soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_soid_ = owner_soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheSubscribed.owner_soid)
}

// optional uint32 service_id = 5;
inline bool CMsgSOCacheSubscribed::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOCacheSubscribed::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSOCacheSubscribed::_internal_service_id() const {
  return service_id_;
}
inline uint32_t CMsgSOCacheSubscribed::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.service_id)
  return _internal_service_id();
}
inline void CMsgSOCacheSubscribed::_internal_set_service_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  service_id_ = value;
}
inline void CMsgSOCacheSubscribed::set_service_id(uint32_t value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.service_id)
}

// repeated uint32 service_list = 6;
inline int CMsgSOCacheSubscribed::_internal_service_list_size() const {
  return service_list_.size();
}
inline int CMsgSOCacheSubscribed::service_list_size() const {
  return _internal_service_list_size();
}
inline void CMsgSOCacheSubscribed::clear_service_list() {
  service_list_.Clear();
}
inline uint32_t CMsgSOCacheSubscribed::_internal_service_list(int index) const {
  return service_list_.Get(index);
}
inline uint32_t CMsgSOCacheSubscribed::service_list(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.service_list)
  return _internal_service_list(index);
}
inline void CMsgSOCacheSubscribed::set_service_list(int index, uint32_t value) {
  service_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.service_list)
}
inline void CMsgSOCacheSubscribed::_internal_add_service_list(uint32_t value) {
  service_list_.Add(value);
}
inline void CMsgSOCacheSubscribed::add_service_list(uint32_t value) {
  _internal_add_service_list(value);
  // @@protoc_insertion_point(field_add:CMsgSOCacheSubscribed.service_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSOCacheSubscribed::_internal_service_list() const {
  return service_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSOCacheSubscribed::service_list() const {
  // @@protoc_insertion_point(field_list:CMsgSOCacheSubscribed.service_list)
  return _internal_service_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSOCacheSubscribed::_internal_mutable_service_list() {
  return &service_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSOCacheSubscribed::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSOCacheSubscribed.service_list)
  return _internal_mutable_service_list();
}

// optional fixed64 sync_version = 7;
inline bool CMsgSOCacheSubscribed::_internal_has_sync_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOCacheSubscribed::has_sync_version() const {
  return _internal_has_sync_version();
}
inline void CMsgSOCacheSubscribed::clear_sync_version() {
  sync_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSOCacheSubscribed::_internal_sync_version() const {
  return sync_version_;
}
inline uint64_t CMsgSOCacheSubscribed::sync_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheSubscribed.sync_version)
  return _internal_sync_version();
}
inline void CMsgSOCacheSubscribed::_internal_set_sync_version(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  sync_version_ = value;
}
inline void CMsgSOCacheSubscribed::set_sync_version(uint64_t value) {
  _internal_set_sync_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheSubscribed.sync_version)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_TipAlert

// optional string tip_text = 1;
inline bool CDOTAClientMsg_TipAlert::_internal_has_tip_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TipAlert::has_tip_text() const {
  return _internal_has_tip_text();
}
inline void CDOTAClientMsg_TipAlert::clear_tip_text() {
  tip_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_TipAlert::tip_text() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TipAlert.tip_text)
  return _internal_tip_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_TipAlert::set_tip_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tip_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TipAlert.tip_text)
}
inline std::string* CDOTAClientMsg_TipAlert::mutable_tip_text() {
  std::string* _s = _internal_mutable_tip_text();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_TipAlert.tip_text)
  return _s;
}
inline const std::string& CDOTAClientMsg_TipAlert::_internal_tip_text() const {
  return tip_text_.Get();
}
inline void CDOTAClientMsg_TipAlert::_internal_set_tip_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tip_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_TipAlert::_internal_mutable_tip_text() {
  _has_bits_[0] |= 0x00000001u;
  return tip_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_TipAlert::release_tip_text() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_TipAlert.tip_text)
  if (!_internal_has_tip_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tip_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tip_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tip_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_TipAlert::set_allocated_tip_text(std::string* tip_text) {
  if (tip_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tip_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tip_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tip_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tip_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_TipAlert.tip_text)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetTrophyListResponse_Trophy

// optional uint32 trophy_id = 1;
inline bool CMsgClientToGCGetTrophyListResponse_Trophy::_internal_has_trophy_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetTrophyListResponse_Trophy::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse_Trophy::_internal_trophy_id() const {
  return trophy_id_;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetTrophyListResponse.Trophy.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::_internal_set_trophy_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  trophy_id_ = value;
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetTrophyListResponse.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
inline bool CMsgClientToGCGetTrophyListResponse_Trophy::_internal_has_trophy_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetTrophyListResponse_Trophy::has_trophy_score() const {
  return _internal_has_trophy_score();
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse_Trophy::_internal_trophy_score() const {
  return trophy_score_;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetTrophyListResponse.Trophy.trophy_score)
  return _internal_trophy_score();
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::_internal_set_trophy_score(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  trophy_score_ = value;
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::set_trophy_score(uint32_t value) {
  _internal_set_trophy_score(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetTrophyListResponse.Trophy.trophy_score)
}

// optional uint32 last_updated = 3;
inline bool CMsgClientToGCGetTrophyListResponse_Trophy::_internal_has_last_updated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetTrophyListResponse_Trophy::has_last_updated() const {
  return _internal_has_last_updated();
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::clear_last_updated() {
  last_updated_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse_Trophy::_internal_last_updated() const {
  return last_updated_;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse_Trophy::last_updated() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetTrophyListResponse.Trophy.last_updated)
  return _internal_last_updated();
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::_internal_set_last_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  last_updated_ = value;
}
inline void CMsgClientToGCGetTrophyListResponse_Trophy::set_last_updated(uint32_t value) {
  _internal_set_last_updated(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetTrophyListResponse.Trophy.last_updated)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetTrophyListResponse

// optional uint32 account_id = 1;
inline bool CMsgClientToGCGetTrophyListResponse::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetTrophyListResponse::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCGetTrophyListResponse::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CMsgClientToGCGetTrophyListResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetTrophyListResponse.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCGetTrophyListResponse::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgClientToGCGetTrophyListResponse::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetTrophyListResponse.account_id)
}

// repeated .CMsgClientToGCGetTrophyListResponse.Trophy trophies = 2;
inline int CMsgClientToGCGetTrophyListResponse::_internal_trophies_size() const {
  return trophies_.size();
}
inline int CMsgClientToGCGetTrophyListResponse::trophies_size() const {
  return _internal_trophies_size();
}
inline void CMsgClientToGCGetTrophyListResponse::clear_trophies() {
  trophies_.Clear();
}
inline ::CMsgClientToGCGetTrophyListResponse_Trophy* CMsgClientToGCGetTrophyListResponse::mutable_trophies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetTrophyListResponse.trophies)
  return trophies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetTrophyListResponse_Trophy >*
CMsgClientToGCGetTrophyListResponse::mutable_trophies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCGetTrophyListResponse.trophies)
  return &trophies_;
}
inline const ::CMsgClientToGCGetTrophyListResponse_Trophy& CMsgClientToGCGetTrophyListResponse::_internal_trophies(int index) const {
  return trophies_.Get(index);
}
inline const ::CMsgClientToGCGetTrophyListResponse_Trophy& CMsgClientToGCGetTrophyListResponse::trophies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetTrophyListResponse.trophies)
  return _internal_trophies(index);
}
inline ::CMsgClientToGCGetTrophyListResponse_Trophy* CMsgClientToGCGetTrophyListResponse::_internal_add_trophies() {
  return trophies_.Add();
}
inline ::CMsgClientToGCGetTrophyListResponse_Trophy* CMsgClientToGCGetTrophyListResponse::add_trophies() {
  ::CMsgClientToGCGetTrophyListResponse_Trophy* _add = _internal_add_trophies();
  // @@protoc_insertion_point(field_add:CMsgClientToGCGetTrophyListResponse.trophies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCGetTrophyListResponse_Trophy >&
CMsgClientToGCGetTrophyListResponse::trophies() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCGetTrophyListResponse.trophies)
  return trophies_;
}

// optional string profile_name = 3;
inline bool CMsgClientToGCGetTrophyListResponse::_internal_has_profile_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetTrophyListResponse::has_profile_name() const {
  return _internal_has_profile_name();
}
inline void CMsgClientToGCGetTrophyListResponse::clear_profile_name() {
  profile_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCGetTrophyListResponse::profile_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetTrophyListResponse.profile_name)
  return _internal_profile_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCGetTrophyListResponse::set_profile_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetTrophyListResponse.profile_name)
}
inline std::string* CMsgClientToGCGetTrophyListResponse::mutable_profile_name() {
  std::string* _s = _internal_mutable_profile_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCGetTrophyListResponse.profile_name)
  return _s;
}
inline const std::string& CMsgClientToGCGetTrophyListResponse::_internal_profile_name() const {
  return profile_name_.Get();
}
inline void CMsgClientToGCGetTrophyListResponse::_internal_set_profile_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCGetTrophyListResponse::_internal_mutable_profile_name() {
  _has_bits_[0] |= 0x00000001u;
  return profile_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCGetTrophyListResponse::release_profile_name() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCGetTrophyListResponse.profile_name)
  if (!_internal_has_profile_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = profile_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCGetTrophyListResponse::set_allocated_profile_name(std::string* profile_name) {
  if (profile_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    profile_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCGetTrophyListResponse.profile_name)
}

// -------------------------------------------------------------------

// CCLCMsg_SplitPlayerConnect

// optional string playername = 1;
inline bool CCLCMsg_SplitPlayerConnect::_internal_has_playername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_SplitPlayerConnect::has_playername() const {
  return _internal_has_playername();
}
inline void CCLCMsg_SplitPlayerConnect::clear_playername() {
  playername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_SplitPlayerConnect::playername() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_SplitPlayerConnect.playername)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_SplitPlayerConnect::set_playername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_SplitPlayerConnect.playername)
}
inline std::string* CCLCMsg_SplitPlayerConnect::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_SplitPlayerConnect.playername)
  return _s;
}
inline const std::string& CCLCMsg_SplitPlayerConnect::_internal_playername() const {
  return playername_.Get();
}
inline void CCLCMsg_SplitPlayerConnect::_internal_set_playername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_SplitPlayerConnect::_internal_mutable_playername() {
  _has_bits_[0] |= 0x00000001u;
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_SplitPlayerConnect::release_playername() {
  // @@protoc_insertion_point(field_release:CCLCMsg_SplitPlayerConnect.playername)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = playername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCLCMsg_SplitPlayerConnect::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_SplitPlayerConnect.playername)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EventCNY2015Cmd

// optional bytes data = 1;
inline bool CDOTAClientMsg_EventCNY2015Cmd::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EventCNY2015Cmd::has_data() const {
  return _internal_has_data();
}
inline void CDOTAClientMsg_EventCNY2015Cmd::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_EventCNY2015Cmd::data() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EventCNY2015Cmd.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_EventCNY2015Cmd::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EventCNY2015Cmd.data)
}
inline std::string* CDOTAClientMsg_EventCNY2015Cmd::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_EventCNY2015Cmd.data)
  return _s;
}
inline const std::string& CDOTAClientMsg_EventCNY2015Cmd::_internal_data() const {
  return data_.Get();
}
inline void CDOTAClientMsg_EventCNY2015Cmd::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_EventCNY2015Cmd::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_EventCNY2015Cmd::release_data() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_EventCNY2015Cmd.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_EventCNY2015Cmd::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_EventCNY2015Cmd.data)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RankWager

// optional bool announce_wager = 1;
inline bool CDOTAClientMsg_RankWager::_internal_has_announce_wager() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RankWager::has_announce_wager() const {
  return _internal_has_announce_wager();
}
inline void CDOTAClientMsg_RankWager::clear_announce_wager() {
  announce_wager_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_RankWager::_internal_announce_wager() const {
  return announce_wager_;
}
inline bool CDOTAClientMsg_RankWager::announce_wager() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RankWager.announce_wager)
  return _internal_announce_wager();
}
inline void CDOTAClientMsg_RankWager::_internal_set_announce_wager(bool value) {
  _has_bits_[0] |= 0x00000001u;
  announce_wager_ = value;
}
inline void CDOTAClientMsg_RankWager::set_announce_wager(bool value) {
  _internal_set_announce_wager(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RankWager.announce_wager)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EventPointsTip

// optional uint32 recipient_player_id = 1;
inline bool CDOTAClientMsg_EventPointsTip::_internal_has_recipient_player_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EventPointsTip::has_recipient_player_id() const {
  return _internal_has_recipient_player_id();
}
inline void CDOTAClientMsg_EventPointsTip::clear_recipient_player_id() {
  recipient_player_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_EventPointsTip::_internal_recipient_player_id() const {
  return recipient_player_id_;
}
inline uint32_t CDOTAClientMsg_EventPointsTip::recipient_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EventPointsTip.recipient_player_id)
  return _internal_recipient_player_id();
}
inline void CDOTAClientMsg_EventPointsTip::_internal_set_recipient_player_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  recipient_player_id_ = value;
}
inline void CDOTAClientMsg_EventPointsTip::set_recipient_player_id(uint32_t value) {
  _internal_set_recipient_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EventPointsTip.recipient_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_CoinWager

// optional uint32 wager_amount = 1;
inline bool CDOTAClientMsg_CoinWager::_internal_has_wager_amount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_CoinWager::has_wager_amount() const {
  return _internal_has_wager_amount();
}
inline void CDOTAClientMsg_CoinWager::clear_wager_amount() {
  wager_amount_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_CoinWager::_internal_wager_amount() const {
  return wager_amount_;
}
inline uint32_t CDOTAClientMsg_CoinWager::wager_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CoinWager.wager_amount)
  return _internal_wager_amount();
}
inline void CDOTAClientMsg_CoinWager::_internal_set_wager_amount(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  wager_amount_ = value;
}
inline void CDOTAClientMsg_CoinWager::set_wager_amount(uint32_t value) {
  _internal_set_wager_amount(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_CoinWager.wager_amount)
}

// -------------------------------------------------------------------

// CMsgSOCacheHaveVersion

// optional .CMsgSOIDOwner soid = 1;
inline bool CMsgSOCacheHaveVersion::_internal_has_soid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || soid_ != nullptr);
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_soid() const {
  return _internal_has_soid();
}
inline void CMsgSOCacheHaveVersion::clear_soid() {
  if (soid_ != nullptr) soid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSOIDOwner& CMsgSOCacheHaveVersion::_internal_soid() const {
  const ::CMsgSOIDOwner* p = soid_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSOIDOwner&>(
      ::_CMsgSOIDOwner_default_instance_);
}
inline const ::CMsgSOIDOwner& CMsgSOCacheHaveVersion::soid() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.soid)
  return _internal_soid();
}
inline void CMsgSOCacheHaveVersion::unsafe_arena_set_allocated_soid(
    ::CMsgSOIDOwner* soid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soid_);
  }
  soid_ = soid;
  if (soid) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSOCacheHaveVersion.soid)
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::release_soid() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = soid_;
  soid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::unsafe_arena_release_soid() {
  // @@protoc_insertion_point(field_release:CMsgSOCacheHaveVersion.soid)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSOIDOwner* temp = soid_;
  soid_ = nullptr;
  return temp;
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::_internal_mutable_soid() {
  _has_bits_[0] |= 0x00000001u;
  if (soid_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSOIDOwner>(GetArenaForAllocation());
    soid_ = p;
  }
  return soid_;
}
inline ::CMsgSOIDOwner* CMsgSOCacheHaveVersion::mutable_soid() {
  ::CMsgSOIDOwner* _msg = _internal_mutable_soid();
  // @@protoc_insertion_point(field_mutable:CMsgSOCacheHaveVersion.soid)
  return _msg;
}
inline void CMsgSOCacheHaveVersion::set_allocated_soid(::CMsgSOIDOwner* soid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete soid_;
  }
  if (soid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSOIDOwner>::GetOwningArena(soid);
    if (message_arena != submessage_arena) {
      soid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  soid_ = soid;
  // @@protoc_insertion_point(field_set_allocated:CMsgSOCacheHaveVersion.soid)
}

// optional fixed64 version = 2;
inline bool CMsgSOCacheHaveVersion::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_version() const {
  return _internal_has_version();
}
inline void CMsgSOCacheHaveVersion::clear_version() {
  version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgSOCacheHaveVersion::_internal_version() const {
  return version_;
}
inline uint64_t CMsgSOCacheHaveVersion::version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.version)
  return _internal_version();
}
inline void CMsgSOCacheHaveVersion::_internal_set_version(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgSOCacheHaveVersion::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.version)
}

// optional uint32 service_id = 3;
inline bool CMsgSOCacheHaveVersion::_internal_has_service_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_service_id() const {
  return _internal_has_service_id();
}
inline void CMsgSOCacheHaveVersion::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSOCacheHaveVersion::_internal_service_id() const {
  return service_id_;
}
inline uint32_t CMsgSOCacheHaveVersion::service_id() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.service_id)
  return _internal_service_id();
}
inline void CMsgSOCacheHaveVersion::_internal_set_service_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  service_id_ = value;
}
inline void CMsgSOCacheHaveVersion::set_service_id(uint32_t value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.service_id)
}

// optional uint32 cached_file_version = 4;
inline bool CMsgSOCacheHaveVersion::_internal_has_cached_file_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSOCacheHaveVersion::has_cached_file_version() const {
  return _internal_has_cached_file_version();
}
inline void CMsgSOCacheHaveVersion::clear_cached_file_version() {
  cached_file_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSOCacheHaveVersion::_internal_cached_file_version() const {
  return cached_file_version_;
}
inline uint32_t CMsgSOCacheHaveVersion::cached_file_version() const {
  // @@protoc_insertion_point(field_get:CMsgSOCacheHaveVersion.cached_file_version)
  return _internal_cached_file_version();
}
inline void CMsgSOCacheHaveVersion::_internal_set_cached_file_version(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cached_file_version_ = value;
}
inline void CMsgSOCacheHaveVersion::set_cached_file_version(uint32_t value) {
  _internal_set_cached_file_version(value);
  // @@protoc_insertion_point(field_set:CMsgSOCacheHaveVersion.cached_file_version)
}

// -------------------------------------------------------------------

// CMsgGCToClientPlayerStatsResponse

// optional uint32 account_id = 1;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.account_id)
  return _internal_account_id();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.account_id)
}

// repeated float player_stats = 2;
inline int CMsgGCToClientPlayerStatsResponse::_internal_player_stats_size() const {
  return player_stats_.size();
}
inline int CMsgGCToClientPlayerStatsResponse::player_stats_size() const {
  return _internal_player_stats_size();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_player_stats() {
  player_stats_.Clear();
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_player_stats(int index) const {
  return player_stats_.Get(index);
}
inline float CMsgGCToClientPlayerStatsResponse::player_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.player_stats)
  return _internal_player_stats(index);
}
inline void CMsgGCToClientPlayerStatsResponse::set_player_stats(int index, float value) {
  player_stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.player_stats)
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_add_player_stats(float value) {
  player_stats_.Add(value);
}
inline void CMsgGCToClientPlayerStatsResponse::add_player_stats(float value) {
  _internal_add_player_stats(value);
  // @@protoc_insertion_point(field_add:CMsgGCToClientPlayerStatsResponse.player_stats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGCToClientPlayerStatsResponse::_internal_player_stats() const {
  return player_stats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGCToClientPlayerStatsResponse::player_stats() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientPlayerStatsResponse.player_stats)
  return _internal_player_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGCToClientPlayerStatsResponse::_internal_mutable_player_stats() {
  return &player_stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGCToClientPlayerStatsResponse::mutable_player_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientPlayerStatsResponse.player_stats)
  return _internal_mutable_player_stats();
}

// optional uint32 match_count = 3;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_match_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_match_count() const {
  return _internal_has_match_count();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_match_count() {
  match_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_match_count() const {
  return match_count_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::match_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.match_count)
  return _internal_match_count();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_match_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  match_count_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_match_count(uint32_t value) {
  _internal_set_match_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.match_count)
}

// optional float mean_gpm = 4;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_mean_gpm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_mean_gpm() const {
  return _internal_has_mean_gpm();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_mean_gpm() {
  mean_gpm_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_mean_gpm() const {
  return mean_gpm_;
}
inline float CMsgGCToClientPlayerStatsResponse::mean_gpm() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.mean_gpm)
  return _internal_mean_gpm();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_mean_gpm(float value) {
  _has_bits_[0] |= 0x00000004u;
  mean_gpm_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_mean_gpm(float value) {
  _internal_set_mean_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.mean_gpm)
}

// optional float mean_xppm = 5;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_mean_xppm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_mean_xppm() const {
  return _internal_has_mean_xppm();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_mean_xppm() {
  mean_xppm_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_mean_xppm() const {
  return mean_xppm_;
}
inline float CMsgGCToClientPlayerStatsResponse::mean_xppm() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.mean_xppm)
  return _internal_mean_xppm();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_mean_xppm(float value) {
  _has_bits_[0] |= 0x00000008u;
  mean_xppm_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_mean_xppm(float value) {
  _internal_set_mean_xppm(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.mean_xppm)
}

// optional float mean_lasthits = 6;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_mean_lasthits() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_mean_lasthits() const {
  return _internal_has_mean_lasthits();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_mean_lasthits() {
  mean_lasthits_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_mean_lasthits() const {
  return mean_lasthits_;
}
inline float CMsgGCToClientPlayerStatsResponse::mean_lasthits() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.mean_lasthits)
  return _internal_mean_lasthits();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_mean_lasthits(float value) {
  _has_bits_[0] |= 0x00000010u;
  mean_lasthits_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_mean_lasthits(float value) {
  _internal_set_mean_lasthits(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.mean_lasthits)
}

// optional uint32 rampages = 7;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_rampages() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_rampages() const {
  return _internal_has_rampages();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_rampages() {
  rampages_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_rampages() const {
  return rampages_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::rampages() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.rampages)
  return _internal_rampages();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_rampages(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  rampages_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_rampages(uint32_t value) {
  _internal_set_rampages(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.rampages)
}

// optional uint32 triple_kills = 8;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_triple_kills() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_triple_kills() const {
  return _internal_has_triple_kills();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_triple_kills() {
  triple_kills_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_triple_kills() const {
  return triple_kills_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::triple_kills() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.triple_kills)
  return _internal_triple_kills();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_triple_kills(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  triple_kills_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_triple_kills(uint32_t value) {
  _internal_set_triple_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.triple_kills)
}

// optional uint32 first_blood_claimed = 9;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_first_blood_claimed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_first_blood_claimed() const {
  return _internal_has_first_blood_claimed();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_first_blood_claimed() {
  first_blood_claimed_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_first_blood_claimed() const {
  return first_blood_claimed_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::first_blood_claimed() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.first_blood_claimed)
  return _internal_first_blood_claimed();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_first_blood_claimed(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  first_blood_claimed_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_first_blood_claimed(uint32_t value) {
  _internal_set_first_blood_claimed(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.first_blood_claimed)
}

// optional uint32 first_blood_given = 10;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_first_blood_given() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_first_blood_given() const {
  return _internal_has_first_blood_given();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_first_blood_given() {
  first_blood_given_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_first_blood_given() const {
  return first_blood_given_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::first_blood_given() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.first_blood_given)
  return _internal_first_blood_given();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_first_blood_given(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  first_blood_given_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_first_blood_given(uint32_t value) {
  _internal_set_first_blood_given(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.first_blood_given)
}

// optional uint32 couriers_killed = 11;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_couriers_killed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_couriers_killed() const {
  return _internal_has_couriers_killed();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_couriers_killed() {
  couriers_killed_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_couriers_killed() const {
  return couriers_killed_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::couriers_killed() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.couriers_killed)
  return _internal_couriers_killed();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_couriers_killed(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  couriers_killed_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_couriers_killed(uint32_t value) {
  _internal_set_couriers_killed(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.couriers_killed)
}

// optional uint32 aegises_snatched = 12;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_aegises_snatched() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_aegises_snatched() const {
  return _internal_has_aegises_snatched();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_aegises_snatched() {
  aegises_snatched_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_aegises_snatched() const {
  return aegises_snatched_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::aegises_snatched() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.aegises_snatched)
  return _internal_aegises_snatched();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_aegises_snatched(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  aegises_snatched_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_aegises_snatched(uint32_t value) {
  _internal_set_aegises_snatched(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.aegises_snatched)
}

// optional uint32 cheeses_eaten = 13;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_cheeses_eaten() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_cheeses_eaten() const {
  return _internal_has_cheeses_eaten();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_cheeses_eaten() {
  cheeses_eaten_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_cheeses_eaten() const {
  return cheeses_eaten_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::cheeses_eaten() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.cheeses_eaten)
  return _internal_cheeses_eaten();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_cheeses_eaten(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  cheeses_eaten_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_cheeses_eaten(uint32_t value) {
  _internal_set_cheeses_eaten(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.cheeses_eaten)
}

// optional uint32 creeps_stacked = 14;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_creeps_stacked() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_creeps_stacked() const {
  return _internal_has_creeps_stacked();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_creeps_stacked() {
  creeps_stacked_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_creeps_stacked() const {
  return creeps_stacked_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::creeps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.creeps_stacked)
  return _internal_creeps_stacked();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_creeps_stacked(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  creeps_stacked_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_creeps_stacked(uint32_t value) {
  _internal_set_creeps_stacked(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.creeps_stacked)
}

// optional float fight_score = 15;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_fight_score() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_fight_score() const {
  return _internal_has_fight_score();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_fight_score() {
  fight_score_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_fight_score() const {
  return fight_score_;
}
inline float CMsgGCToClientPlayerStatsResponse::fight_score() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.fight_score)
  return _internal_fight_score();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_fight_score(float value) {
  _has_bits_[0] |= 0x00002000u;
  fight_score_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_fight_score(float value) {
  _internal_set_fight_score(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.fight_score)
}

// optional float farm_score = 16;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_farm_score() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_farm_score() const {
  return _internal_has_farm_score();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_farm_score() {
  farm_score_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_farm_score() const {
  return farm_score_;
}
inline float CMsgGCToClientPlayerStatsResponse::farm_score() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.farm_score)
  return _internal_farm_score();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_farm_score(float value) {
  _has_bits_[0] |= 0x00004000u;
  farm_score_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_farm_score(float value) {
  _internal_set_farm_score(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.farm_score)
}

// optional float support_score = 17;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_support_score() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_support_score() const {
  return _internal_has_support_score();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_support_score() {
  support_score_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_support_score() const {
  return support_score_;
}
inline float CMsgGCToClientPlayerStatsResponse::support_score() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.support_score)
  return _internal_support_score();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_support_score(float value) {
  _has_bits_[0] |= 0x00008000u;
  support_score_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_support_score(float value) {
  _internal_set_support_score(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.support_score)
}

// optional float push_score = 18;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_push_score() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_push_score() const {
  return _internal_has_push_score();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_push_score() {
  push_score_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_push_score() const {
  return push_score_;
}
inline float CMsgGCToClientPlayerStatsResponse::push_score() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.push_score)
  return _internal_push_score();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_push_score(float value) {
  _has_bits_[0] |= 0x00010000u;
  push_score_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_push_score(float value) {
  _internal_set_push_score(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.push_score)
}

// optional float versatility_score = 19;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_versatility_score() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_versatility_score() const {
  return _internal_has_versatility_score();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_versatility_score() {
  versatility_score_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_versatility_score() const {
  return versatility_score_;
}
inline float CMsgGCToClientPlayerStatsResponse::versatility_score() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.versatility_score)
  return _internal_versatility_score();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_versatility_score(float value) {
  _has_bits_[0] |= 0x00020000u;
  versatility_score_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_versatility_score(float value) {
  _internal_set_versatility_score(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.versatility_score)
}

// optional float mean_networth = 20;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_mean_networth() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_mean_networth() const {
  return _internal_has_mean_networth();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_mean_networth() {
  mean_networth_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_mean_networth() const {
  return mean_networth_;
}
inline float CMsgGCToClientPlayerStatsResponse::mean_networth() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.mean_networth)
  return _internal_mean_networth();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_mean_networth(float value) {
  _has_bits_[0] |= 0x00040000u;
  mean_networth_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_mean_networth(float value) {
  _internal_set_mean_networth(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.mean_networth)
}

// optional float mean_damage = 21;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_mean_damage() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_mean_damage() const {
  return _internal_has_mean_damage();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_mean_damage() {
  mean_damage_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_mean_damage() const {
  return mean_damage_;
}
inline float CMsgGCToClientPlayerStatsResponse::mean_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.mean_damage)
  return _internal_mean_damage();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_mean_damage(float value) {
  _has_bits_[0] |= 0x00080000u;
  mean_damage_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_mean_damage(float value) {
  _internal_set_mean_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.mean_damage)
}

// optional float mean_heals = 22;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_mean_heals() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_mean_heals() const {
  return _internal_has_mean_heals();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_mean_heals() {
  mean_heals_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float CMsgGCToClientPlayerStatsResponse::_internal_mean_heals() const {
  return mean_heals_;
}
inline float CMsgGCToClientPlayerStatsResponse::mean_heals() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.mean_heals)
  return _internal_mean_heals();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_mean_heals(float value) {
  _has_bits_[0] |= 0x00100000u;
  mean_heals_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_mean_heals(float value) {
  _internal_set_mean_heals(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.mean_heals)
}

// optional uint32 rapiers_purchased = 23;
inline bool CMsgGCToClientPlayerStatsResponse::_internal_has_rapiers_purchased() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgGCToClientPlayerStatsResponse::has_rapiers_purchased() const {
  return _internal_has_rapiers_purchased();
}
inline void CMsgGCToClientPlayerStatsResponse::clear_rapiers_purchased() {
  rapiers_purchased_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::_internal_rapiers_purchased() const {
  return rapiers_purchased_;
}
inline uint32_t CMsgGCToClientPlayerStatsResponse::rapiers_purchased() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPlayerStatsResponse.rapiers_purchased)
  return _internal_rapiers_purchased();
}
inline void CMsgGCToClientPlayerStatsResponse::_internal_set_rapiers_purchased(uint32_t value) {
  _has_bits_[0] |= 0x00200000u;
  rapiers_purchased_ = value;
}
inline void CMsgGCToClientPlayerStatsResponse::set_rapiers_purchased(uint32_t value) {
  _internal_set_rapiers_purchased(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPlayerStatsResponse.rapiers_purchased)
}

// -------------------------------------------------------------------

// CMsgAdjustItemEquippedState

// optional uint64 item_id = 1;
inline bool CMsgAdjustItemEquippedState::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAdjustItemEquippedState::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgAdjustItemEquippedState::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgAdjustItemEquippedState::_internal_item_id() const {
  return item_id_;
}
inline uint64_t CMsgAdjustItemEquippedState::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgAdjustItemEquippedState.item_id)
  return _internal_item_id();
}
inline void CMsgAdjustItemEquippedState::_internal_set_item_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CMsgAdjustItemEquippedState::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgAdjustItemEquippedState.item_id)
}

// optional uint32 new_class = 2;
inline bool CMsgAdjustItemEquippedState::_internal_has_new_class() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAdjustItemEquippedState::has_new_class() const {
  return _internal_has_new_class();
}
inline void CMsgAdjustItemEquippedState::clear_new_class() {
  new_class_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAdjustItemEquippedState::_internal_new_class() const {
  return new_class_;
}
inline uint32_t CMsgAdjustItemEquippedState::new_class() const {
  // @@protoc_insertion_point(field_get:CMsgAdjustItemEquippedState.new_class)
  return _internal_new_class();
}
inline void CMsgAdjustItemEquippedState::_internal_set_new_class(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  new_class_ = value;
}
inline void CMsgAdjustItemEquippedState::set_new_class(uint32_t value) {
  _internal_set_new_class(value);
  // @@protoc_insertion_point(field_set:CMsgAdjustItemEquippedState.new_class)
}

// optional uint32 new_slot = 3;
inline bool CMsgAdjustItemEquippedState::_internal_has_new_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAdjustItemEquippedState::has_new_slot() const {
  return _internal_has_new_slot();
}
inline void CMsgAdjustItemEquippedState::clear_new_slot() {
  new_slot_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgAdjustItemEquippedState::_internal_new_slot() const {
  return new_slot_;
}
inline uint32_t CMsgAdjustItemEquippedState::new_slot() const {
  // @@protoc_insertion_point(field_get:CMsgAdjustItemEquippedState.new_slot)
  return _internal_new_slot();
}
inline void CMsgAdjustItemEquippedState::_internal_set_new_slot(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  new_slot_ = value;
}
inline void CMsgAdjustItemEquippedState::set_new_slot(uint32_t value) {
  _internal_set_new_slot(value);
  // @@protoc_insertion_point(field_set:CMsgAdjustItemEquippedState.new_slot)
}

// optional uint32 style_index = 4;
inline bool CMsgAdjustItemEquippedState::_internal_has_style_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAdjustItemEquippedState::has_style_index() const {
  return _internal_has_style_index();
}
inline void CMsgAdjustItemEquippedState::clear_style_index() {
  style_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgAdjustItemEquippedState::_internal_style_index() const {
  return style_index_;
}
inline uint32_t CMsgAdjustItemEquippedState::style_index() const {
  // @@protoc_insertion_point(field_get:CMsgAdjustItemEquippedState.style_index)
  return _internal_style_index();
}
inline void CMsgAdjustItemEquippedState::_internal_set_style_index(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  style_index_ = value;
}
inline void CMsgAdjustItemEquippedState::set_style_index(uint32_t value) {
  _internal_set_style_index(value);
  // @@protoc_insertion_point(field_set:CMsgAdjustItemEquippedState.style_index)
}

// -------------------------------------------------------------------

// CMsgClientToGCEquipItems

// repeated .CMsgAdjustItemEquippedState equips = 1;
inline int CMsgClientToGCEquipItems::_internal_equips_size() const {
  return equips_.size();
}
inline int CMsgClientToGCEquipItems::equips_size() const {
  return _internal_equips_size();
}
inline void CMsgClientToGCEquipItems::clear_equips() {
  equips_.Clear();
}
inline ::CMsgAdjustItemEquippedState* CMsgClientToGCEquipItems::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCEquipItems.equips)
  return equips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdjustItemEquippedState >*
CMsgClientToGCEquipItems::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCEquipItems.equips)
  return &equips_;
}
inline const ::CMsgAdjustItemEquippedState& CMsgClientToGCEquipItems::_internal_equips(int index) const {
  return equips_.Get(index);
}
inline const ::CMsgAdjustItemEquippedState& CMsgClientToGCEquipItems::equips(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCEquipItems.equips)
  return _internal_equips(index);
}
inline ::CMsgAdjustItemEquippedState* CMsgClientToGCEquipItems::_internal_add_equips() {
  return equips_.Add();
}
inline ::CMsgAdjustItemEquippedState* CMsgClientToGCEquipItems::add_equips() {
  ::CMsgAdjustItemEquippedState* _add = _internal_add_equips();
  // @@protoc_insertion_point(field_add:CMsgClientToGCEquipItems.equips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdjustItemEquippedState >&
CMsgClientToGCEquipItems::equips() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCEquipItems.equips)
  return equips_;
}

// -------------------------------------------------------------------

// CMsgClientHello

// optional uint32 version = 1;
inline bool CMsgClientHello::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientHello::has_version() const {
  return _internal_has_version();
}
inline void CMsgClientHello::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientHello::_internal_version() const {
  return version_;
}
inline uint32_t CMsgClientHello::version() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.version)
  return _internal_version();
}
inline void CMsgClientHello::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  version_ = value;
}
inline void CMsgClientHello::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.version)
}

// repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
inline int CMsgClientHello::_internal_socache_have_versions_size() const {
  return socache_have_versions_.size();
}
inline int CMsgClientHello::socache_have_versions_size() const {
  return _internal_socache_have_versions_size();
}
inline void CMsgClientHello::clear_socache_have_versions() {
  socache_have_versions_.Clear();
}
inline ::CMsgSOCacheHaveVersion* CMsgClientHello::mutable_socache_have_versions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.socache_have_versions)
  return socache_have_versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheHaveVersion >*
CMsgClientHello::mutable_socache_have_versions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientHello.socache_have_versions)
  return &socache_have_versions_;
}
inline const ::CMsgSOCacheHaveVersion& CMsgClientHello::_internal_socache_have_versions(int index) const {
  return socache_have_versions_.Get(index);
}
inline const ::CMsgSOCacheHaveVersion& CMsgClientHello::socache_have_versions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.socache_have_versions)
  return _internal_socache_have_versions(index);
}
inline ::CMsgSOCacheHaveVersion* CMsgClientHello::_internal_add_socache_have_versions() {
  return socache_have_versions_.Add();
}
inline ::CMsgSOCacheHaveVersion* CMsgClientHello::add_socache_have_versions() {
  ::CMsgSOCacheHaveVersion* _add = _internal_add_socache_have_versions();
  // @@protoc_insertion_point(field_add:CMsgClientHello.socache_have_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSOCacheHaveVersion >&
CMsgClientHello::socache_have_versions() const {
  // @@protoc_insertion_point(field_list:CMsgClientHello.socache_have_versions)
  return socache_have_versions_;
}

// optional uint32 client_session_need = 3;
inline bool CMsgClientHello::_internal_has_client_session_need() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientHello::has_client_session_need() const {
  return _internal_has_client_session_need();
}
inline void CMsgClientHello::clear_client_session_need() {
  client_session_need_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientHello::_internal_client_session_need() const {
  return client_session_need_;
}
inline uint32_t CMsgClientHello::client_session_need() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.client_session_need)
  return _internal_client_session_need();
}
inline void CMsgClientHello::_internal_set_client_session_need(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  client_session_need_ = value;
}
inline void CMsgClientHello::set_client_session_need(uint32_t value) {
  _internal_set_client_session_need(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.client_session_need)
}

// optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
inline bool CMsgClientHello::_internal_has_client_launcher() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientHello::has_client_launcher() const {
  return _internal_has_client_launcher();
}
inline void CMsgClientHello::clear_client_launcher() {
  client_launcher_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PartnerAccountType CMsgClientHello::_internal_client_launcher() const {
  return static_cast< ::PartnerAccountType >(client_launcher_);
}
inline ::PartnerAccountType CMsgClientHello::client_launcher() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.client_launcher)
  return _internal_client_launcher();
}
inline void CMsgClientHello::_internal_set_client_launcher(::PartnerAccountType value) {
  assert(::PartnerAccountType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  client_launcher_ = value;
}
inline void CMsgClientHello::set_client_launcher(::PartnerAccountType value) {
  _internal_set_client_launcher(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.client_launcher)
}

// optional string secret_key = 5;
inline bool CMsgClientHello::_internal_has_secret_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientHello::has_secret_key() const {
  return _internal_has_secret_key();
}
inline void CMsgClientHello::clear_secret_key() {
  secret_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientHello::secret_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientHello::set_secret_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientHello.secret_key)
}
inline std::string* CMsgClientHello::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.secret_key)
  return _s;
}
inline const std::string& CMsgClientHello::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void CMsgClientHello::_internal_set_secret_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::_internal_mutable_secret_key() {
  _has_bits_[0] |= 0x00000001u;
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::release_secret_key() {
  // @@protoc_insertion_point(field_release:CMsgClientHello.secret_key)
  if (!_internal_has_secret_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = secret_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientHello::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (secret_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    secret_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientHello.secret_key)
}

// optional uint32 client_language = 6;
inline bool CMsgClientHello::_internal_has_client_language() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientHello::has_client_language() const {
  return _internal_has_client_language();
}
inline void CMsgClientHello::clear_client_language() {
  client_language_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientHello::_internal_client_language() const {
  return client_language_;
}
inline uint32_t CMsgClientHello::client_language() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.client_language)
  return _internal_client_language();
}
inline void CMsgClientHello::_internal_set_client_language(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  client_language_ = value;
}
inline void CMsgClientHello::set_client_language(uint32_t value) {
  _internal_set_client_language(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.client_language)
}

// optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
inline bool CMsgClientHello::_internal_has_engine() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientHello::has_engine() const {
  return _internal_has_engine();
}
inline void CMsgClientHello::clear_engine() {
  engine_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ESourceEngine CMsgClientHello::_internal_engine() const {
  return static_cast< ::ESourceEngine >(engine_);
}
inline ::ESourceEngine CMsgClientHello::engine() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.engine)
  return _internal_engine();
}
inline void CMsgClientHello::_internal_set_engine(::ESourceEngine value) {
  assert(::ESourceEngine_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  engine_ = value;
}
inline void CMsgClientHello::set_engine(::ESourceEngine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.engine)
}

// optional bytes steamdatagram_login = 8;
inline bool CMsgClientHello::_internal_has_steamdatagram_login() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientHello::has_steamdatagram_login() const {
  return _internal_has_steamdatagram_login();
}
inline void CMsgClientHello::clear_steamdatagram_login() {
  steamdatagram_login_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientHello::steamdatagram_login() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.steamdatagram_login)
  return _internal_steamdatagram_login();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientHello::set_steamdatagram_login(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 steamdatagram_login_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientHello.steamdatagram_login)
}
inline std::string* CMsgClientHello::mutable_steamdatagram_login() {
  std::string* _s = _internal_mutable_steamdatagram_login();
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.steamdatagram_login)
  return _s;
}
inline const std::string& CMsgClientHello::_internal_steamdatagram_login() const {
  return steamdatagram_login_.Get();
}
inline void CMsgClientHello::_internal_set_steamdatagram_login(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  steamdatagram_login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::_internal_mutable_steamdatagram_login() {
  _has_bits_[0] |= 0x00000002u;
  return steamdatagram_login_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::release_steamdatagram_login() {
  // @@protoc_insertion_point(field_release:CMsgClientHello.steamdatagram_login)
  if (!_internal_has_steamdatagram_login()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = steamdatagram_login_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (steamdatagram_login_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    steamdatagram_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientHello::set_allocated_steamdatagram_login(std::string* steamdatagram_login) {
  if (steamdatagram_login != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steamdatagram_login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steamdatagram_login,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (steamdatagram_login_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    steamdatagram_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientHello.steamdatagram_login)
}

// optional uint32 platform_id = 9;
inline bool CMsgClientHello::_internal_has_platform_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientHello::has_platform_id() const {
  return _internal_has_platform_id();
}
inline void CMsgClientHello::clear_platform_id() {
  platform_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgClientHello::_internal_platform_id() const {
  return platform_id_;
}
inline uint32_t CMsgClientHello::platform_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.platform_id)
  return _internal_platform_id();
}
inline void CMsgClientHello::_internal_set_platform_id(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  platform_id_ = value;
}
inline void CMsgClientHello::set_platform_id(uint32_t value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.platform_id)
}

// optional bytes game_msg = 10;
inline bool CMsgClientHello::_internal_has_game_msg() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientHello::has_game_msg() const {
  return _internal_has_game_msg();
}
inline void CMsgClientHello::clear_game_msg() {
  game_msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientHello::game_msg() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.game_msg)
  return _internal_game_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientHello::set_game_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 game_msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientHello.game_msg)
}
inline std::string* CMsgClientHello::mutable_game_msg() {
  std::string* _s = _internal_mutable_game_msg();
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.game_msg)
  return _s;
}
inline const std::string& CMsgClientHello::_internal_game_msg() const {
  return game_msg_.Get();
}
inline void CMsgClientHello::_internal_set_game_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  game_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::_internal_mutable_game_msg() {
  _has_bits_[0] |= 0x00000004u;
  return game_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::release_game_msg() {
  // @@protoc_insertion_point(field_release:CMsgClientHello.game_msg)
  if (!_internal_has_game_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = game_msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientHello::set_allocated_game_msg(std::string* game_msg) {
  if (game_msg != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  game_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientHello.game_msg)
}

// optional int32 os_type = 11;
inline bool CMsgClientHello::_internal_has_os_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientHello::has_os_type() const {
  return _internal_has_os_type();
}
inline void CMsgClientHello::clear_os_type() {
  os_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgClientHello::_internal_os_type() const {
  return os_type_;
}
inline int32_t CMsgClientHello::os_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.os_type)
  return _internal_os_type();
}
inline void CMsgClientHello::_internal_set_os_type(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  os_type_ = value;
}
inline void CMsgClientHello::set_os_type(int32_t value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.os_type)
}

// optional uint32 render_system = 12;
inline bool CMsgClientHello::_internal_has_render_system() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientHello::has_render_system() const {
  return _internal_has_render_system();
}
inline void CMsgClientHello::clear_render_system() {
  render_system_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgClientHello::_internal_render_system() const {
  return render_system_;
}
inline uint32_t CMsgClientHello::render_system() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.render_system)
  return _internal_render_system();
}
inline void CMsgClientHello::_internal_set_render_system(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  render_system_ = value;
}
inline void CMsgClientHello::set_render_system(uint32_t value) {
  _internal_set_render_system(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.render_system)
}

// optional uint32 render_system_req = 13;
inline bool CMsgClientHello::_internal_has_render_system_req() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_render_system_req() const {
  return _internal_has_render_system_req();
}
inline void CMsgClientHello::clear_render_system_req() {
  render_system_req_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgClientHello::_internal_render_system_req() const {
  return render_system_req_;
}
inline uint32_t CMsgClientHello::render_system_req() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.render_system_req)
  return _internal_render_system_req();
}
inline void CMsgClientHello::_internal_set_render_system_req(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  render_system_req_ = value;
}
inline void CMsgClientHello::set_render_system_req(uint32_t value) {
  _internal_set_render_system_req(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.render_system_req)
}

// optional uint32 screen_width = 14;
inline bool CMsgClientHello::_internal_has_screen_width() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_screen_width() const {
  return _internal_has_screen_width();
}
inline void CMsgClientHello::clear_screen_width() {
  screen_width_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgClientHello::_internal_screen_width() const {
  return screen_width_;
}
inline uint32_t CMsgClientHello::screen_width() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.screen_width)
  return _internal_screen_width();
}
inline void CMsgClientHello::_internal_set_screen_width(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  screen_width_ = value;
}
inline void CMsgClientHello::set_screen_width(uint32_t value) {
  _internal_set_screen_width(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.screen_width)
}

// optional uint32 screen_height = 15;
inline bool CMsgClientHello::_internal_has_screen_height() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_screen_height() const {
  return _internal_has_screen_height();
}
inline void CMsgClientHello::clear_screen_height() {
  screen_height_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgClientHello::_internal_screen_height() const {
  return screen_height_;
}
inline uint32_t CMsgClientHello::screen_height() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.screen_height)
  return _internal_screen_height();
}
inline void CMsgClientHello::_internal_set_screen_height(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  screen_height_ = value;
}
inline void CMsgClientHello::set_screen_height(uint32_t value) {
  _internal_set_screen_height(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.screen_height)
}

// optional uint32 screen_refresh = 16;
inline bool CMsgClientHello::_internal_has_screen_refresh() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_screen_refresh() const {
  return _internal_has_screen_refresh();
}
inline void CMsgClientHello::clear_screen_refresh() {
  screen_refresh_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgClientHello::_internal_screen_refresh() const {
  return screen_refresh_;
}
inline uint32_t CMsgClientHello::screen_refresh() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.screen_refresh)
  return _internal_screen_refresh();
}
inline void CMsgClientHello::_internal_set_screen_refresh(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  screen_refresh_ = value;
}
inline void CMsgClientHello::set_screen_refresh(uint32_t value) {
  _internal_set_screen_refresh(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.screen_refresh)
}

// optional uint32 render_width = 17;
inline bool CMsgClientHello::_internal_has_render_width() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_render_width() const {
  return _internal_has_render_width();
}
inline void CMsgClientHello::clear_render_width() {
  render_width_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgClientHello::_internal_render_width() const {
  return render_width_;
}
inline uint32_t CMsgClientHello::render_width() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.render_width)
  return _internal_render_width();
}
inline void CMsgClientHello::_internal_set_render_width(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  render_width_ = value;
}
inline void CMsgClientHello::set_render_width(uint32_t value) {
  _internal_set_render_width(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.render_width)
}

// optional uint32 render_height = 18;
inline bool CMsgClientHello::_internal_has_render_height() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_render_height() const {
  return _internal_has_render_height();
}
inline void CMsgClientHello::clear_render_height() {
  render_height_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgClientHello::_internal_render_height() const {
  return render_height_;
}
inline uint32_t CMsgClientHello::render_height() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.render_height)
  return _internal_render_height();
}
inline void CMsgClientHello::_internal_set_render_height(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  render_height_ = value;
}
inline void CMsgClientHello::set_render_height(uint32_t value) {
  _internal_set_render_height(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.render_height)
}

// optional uint32 swap_width = 19;
inline bool CMsgClientHello::_internal_has_swap_width() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_swap_width() const {
  return _internal_has_swap_width();
}
inline void CMsgClientHello::clear_swap_width() {
  swap_width_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgClientHello::_internal_swap_width() const {
  return swap_width_;
}
inline uint32_t CMsgClientHello::swap_width() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.swap_width)
  return _internal_swap_width();
}
inline void CMsgClientHello::_internal_set_swap_width(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  swap_width_ = value;
}
inline void CMsgClientHello::set_swap_width(uint32_t value) {
  _internal_set_swap_width(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.swap_width)
}

// optional uint32 swap_height = 20;
inline bool CMsgClientHello::_internal_has_swap_height() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_swap_height() const {
  return _internal_has_swap_height();
}
inline void CMsgClientHello::clear_swap_height() {
  swap_height_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgClientHello::_internal_swap_height() const {
  return swap_height_;
}
inline uint32_t CMsgClientHello::swap_height() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.swap_height)
  return _internal_swap_height();
}
inline void CMsgClientHello::_internal_set_swap_height(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  swap_height_ = value;
}
inline void CMsgClientHello::set_swap_height(uint32_t value) {
  _internal_set_swap_height(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.swap_height)
}

// optional bool is_steam_china = 22;
inline bool CMsgClientHello::_internal_has_is_steam_china() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientHello::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CMsgClientHello::clear_is_steam_china() {
  is_steam_china_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CMsgClientHello::_internal_is_steam_china() const {
  return is_steam_china_;
}
inline bool CMsgClientHello::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.is_steam_china)
  return _internal_is_steam_china();
}
inline void CMsgClientHello::_internal_set_is_steam_china(bool value) {
  _has_bits_[0] |= 0x00100000u;
  is_steam_china_ = value;
}
inline void CMsgClientHello::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CMsgClientHello.is_steam_china)
}

// optional string platform_name = 23;
inline bool CMsgClientHello::_internal_has_platform_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientHello::has_platform_name() const {
  return _internal_has_platform_name();
}
inline void CMsgClientHello::clear_platform_name() {
  platform_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientHello::platform_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientHello.platform_name)
  return _internal_platform_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientHello::set_platform_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 platform_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientHello.platform_name)
}
inline std::string* CMsgClientHello::mutable_platform_name() {
  std::string* _s = _internal_mutable_platform_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientHello.platform_name)
  return _s;
}
inline const std::string& CMsgClientHello::_internal_platform_name() const {
  return platform_name_.Get();
}
inline void CMsgClientHello::_internal_set_platform_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  platform_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::_internal_mutable_platform_name() {
  _has_bits_[0] |= 0x00000008u;
  return platform_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientHello::release_platform_name() {
  // @@protoc_insertion_point(field_release:CMsgClientHello.platform_name)
  if (!_internal_has_platform_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = platform_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    platform_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientHello::set_allocated_platform_name(std::string* platform_name) {
  if (platform_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  platform_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    platform_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientHello.platform_name)
}

// -------------------------------------------------------------------

// CMsg_CVars_CVar

// optional string name = 1;
inline bool CMsg_CVars_CVar::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_name() const {
  return _internal_has_name();
}
inline void CMsg_CVars_CVar::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsg_CVars_CVar::name() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsg_CVars_CVar::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.name)
}
inline std::string* CMsg_CVars_CVar::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.name)
  return _s;
}
inline const std::string& CMsg_CVars_CVar::_internal_name() const {
  return name_.Get();
}
inline void CMsg_CVars_CVar::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::release_name() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsg_CVars_CVar::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.name)
}

// optional string value = 2;
inline bool CMsg_CVars_CVar::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_value() const {
  return _internal_has_value();
}
inline void CMsg_CVars_CVar::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsg_CVars_CVar::value() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsg_CVars_CVar::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.value)
}
inline std::string* CMsg_CVars_CVar::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.value)
  return _s;
}
inline const std::string& CMsg_CVars_CVar::_internal_value() const {
  return value_.Get();
}
inline void CMsg_CVars_CVar::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::release_value() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsg_CVars_CVar::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.value)
}

// -------------------------------------------------------------------

// CMsg_CVars

// repeated .CMsg_CVars.CVar cvars = 1;
inline int CMsg_CVars::_internal_cvars_size() const {
  return cvars_.size();
}
inline int CMsg_CVars::cvars_size() const {
  return _internal_cvars_size();
}
inline void CMsg_CVars::clear_cvars() {
  cvars_.Clear();
}
inline ::CMsg_CVars_CVar* CMsg_CVars::mutable_cvars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.cvars)
  return cvars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >*
CMsg_CVars::mutable_cvars() {
  // @@protoc_insertion_point(field_mutable_list:CMsg_CVars.cvars)
  return &cvars_;
}
inline const ::CMsg_CVars_CVar& CMsg_CVars::_internal_cvars(int index) const {
  return cvars_.Get(index);
}
inline const ::CMsg_CVars_CVar& CMsg_CVars::cvars(int index) const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.cvars)
  return _internal_cvars(index);
}
inline ::CMsg_CVars_CVar* CMsg_CVars::_internal_add_cvars() {
  return cvars_.Add();
}
inline ::CMsg_CVars_CVar* CMsg_CVars::add_cvars() {
  ::CMsg_CVars_CVar* _add = _internal_add_cvars();
  // @@protoc_insertion_point(field_add:CMsg_CVars.cvars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >&
CMsg_CVars::cvars() const {
  // @@protoc_insertion_point(field_list:CMsg_CVars.cvars)
  return cvars_;
}

// -------------------------------------------------------------------

// CNETMsg_SetConVar

// optional .CMsg_CVars convars = 1;
inline bool CNETMsg_SetConVar::_internal_has_convars() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || convars_ != nullptr);
  return value;
}
inline bool CNETMsg_SetConVar::has_convars() const {
  return _internal_has_convars();
}
inline void CNETMsg_SetConVar::clear_convars() {
  if (convars_ != nullptr) convars_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsg_CVars& CNETMsg_SetConVar::_internal_convars() const {
  const ::CMsg_CVars* p = convars_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsg_CVars&>(
      ::_CMsg_CVars_default_instance_);
}
inline const ::CMsg_CVars& CNETMsg_SetConVar::convars() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SetConVar.convars)
  return _internal_convars();
}
inline void CNETMsg_SetConVar::unsafe_arena_set_allocated_convars(
    ::CMsg_CVars* convars) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convars_);
  }
  convars_ = convars;
  if (convars) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNETMsg_SetConVar.convars)
}
inline ::CMsg_CVars* CNETMsg_SetConVar::release_convars() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::unsafe_arena_release_convars() {
  // @@protoc_insertion_point(field_release:CNETMsg_SetConVar.convars)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
  return temp;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::_internal_mutable_convars() {
  _has_bits_[0] |= 0x00000001u;
  if (convars_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsg_CVars>(GetArenaForAllocation());
    convars_ = p;
  }
  return convars_;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::mutable_convars() {
  ::CMsg_CVars* _msg = _internal_mutable_convars();
  // @@protoc_insertion_point(field_mutable:CNETMsg_SetConVar.convars)
  return _msg;
}
inline void CNETMsg_SetConVar::set_allocated_convars(::CMsg_CVars* convars) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete convars_;
  }
  if (convars) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsg_CVars>::GetOwningArena(convars);
    if (message_arena != submessage_arena) {
      convars = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convars, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  convars_ = convars;
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SetConVar.convars)
}

// -------------------------------------------------------------------

// CNETMsg_StringCmd

// optional string command = 1;
inline bool CNETMsg_StringCmd::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_StringCmd::has_command() const {
  return _internal_has_command();
}
inline void CNETMsg_StringCmd::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_StringCmd::command() const {
  // @@protoc_insertion_point(field_get:CNETMsg_StringCmd.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CNETMsg_StringCmd::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CNETMsg_StringCmd.command)
}
inline std::string* CNETMsg_StringCmd::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:CNETMsg_StringCmd.command)
  return _s;
}
inline const std::string& CNETMsg_StringCmd::_internal_command() const {
  return command_.Get();
}
inline void CNETMsg_StringCmd::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CNETMsg_StringCmd::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CNETMsg_StringCmd::release_command() {
  // @@protoc_insertion_point(field_release:CNETMsg_StringCmd.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CNETMsg_StringCmd::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_StringCmd.command)
}

// -------------------------------------------------------------------

// CDOTAMsg_CoachHUDPing

// optional uint32 x = 1;
inline bool CDOTAMsg_CoachHUDPing::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMsg_CoachHUDPing::has_x() const {
  return _internal_has_x();
}
inline void CDOTAMsg_CoachHUDPing::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMsg_CoachHUDPing::_internal_x() const {
  return x_;
}
inline uint32_t CDOTAMsg_CoachHUDPing::x() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_CoachHUDPing.x)
  return _internal_x();
}
inline void CDOTAMsg_CoachHUDPing::_internal_set_x(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void CDOTAMsg_CoachHUDPing::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_CoachHUDPing.x)
}

// optional uint32 y = 2;
inline bool CDOTAMsg_CoachHUDPing::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMsg_CoachHUDPing::has_y() const {
  return _internal_has_y();
}
inline void CDOTAMsg_CoachHUDPing::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMsg_CoachHUDPing::_internal_y() const {
  return y_;
}
inline uint32_t CDOTAMsg_CoachHUDPing::y() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_CoachHUDPing.y)
  return _internal_y();
}
inline void CDOTAMsg_CoachHUDPing::_internal_set_y(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void CDOTAMsg_CoachHUDPing::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CDOTAMsg_CoachHUDPing.y)
}

// optional string tgtpath = 3;
inline bool CDOTAMsg_CoachHUDPing::_internal_has_tgtpath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMsg_CoachHUDPing::has_tgtpath() const {
  return _internal_has_tgtpath();
}
inline void CDOTAMsg_CoachHUDPing::clear_tgtpath() {
  tgtpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMsg_CoachHUDPing::tgtpath() const {
  // @@protoc_insertion_point(field_get:CDOTAMsg_CoachHUDPing.tgtpath)
  return _internal_tgtpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAMsg_CoachHUDPing::set_tgtpath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tgtpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAMsg_CoachHUDPing.tgtpath)
}
inline std::string* CDOTAMsg_CoachHUDPing::mutable_tgtpath() {
  std::string* _s = _internal_mutable_tgtpath();
  // @@protoc_insertion_point(field_mutable:CDOTAMsg_CoachHUDPing.tgtpath)
  return _s;
}
inline const std::string& CDOTAMsg_CoachHUDPing::_internal_tgtpath() const {
  return tgtpath_.Get();
}
inline void CDOTAMsg_CoachHUDPing::_internal_set_tgtpath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tgtpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDOTAMsg_CoachHUDPing::_internal_mutable_tgtpath() {
  _has_bits_[0] |= 0x00000001u;
  return tgtpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDOTAMsg_CoachHUDPing::release_tgtpath() {
  // @@protoc_insertion_point(field_release:CDOTAMsg_CoachHUDPing.tgtpath)
  if (!_internal_has_tgtpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tgtpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tgtpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tgtpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAMsg_CoachHUDPing::set_allocated_tgtpath(std::string* tgtpath) {
  if (tgtpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tgtpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tgtpath,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tgtpath_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tgtpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAMsg_CoachHUDPing.tgtpath)
}

// -------------------------------------------------------------------

// CDOTAUserMsg_CoachHUDPing

// optional uint32 player_id = 1;
inline bool CDOTAUserMsg_CoachHUDPing::_internal_has_player_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAUserMsg_CoachHUDPing::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAUserMsg_CoachHUDPing::clear_player_id() {
  player_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAUserMsg_CoachHUDPing::_internal_player_id() const {
  return player_id_;
}
inline uint32_t CDOTAUserMsg_CoachHUDPing::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAUserMsg_CoachHUDPing.player_id)
  return _internal_player_id();
}
inline void CDOTAUserMsg_CoachHUDPing::_internal_set_player_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  player_id_ = value;
}
inline void CDOTAUserMsg_CoachHUDPing::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAUserMsg_CoachHUDPing.player_id)
}

// optional .CDOTAMsg_CoachHUDPing hud_ping = 2;
inline bool CDOTAUserMsg_CoachHUDPing::_internal_has_hud_ping() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hud_ping_ != nullptr);
  return value;
}
inline bool CDOTAUserMsg_CoachHUDPing::has_hud_ping() const {
  return _internal_has_hud_ping();
}
inline void CDOTAUserMsg_CoachHUDPing::clear_hud_ping() {
  if (hud_ping_ != nullptr) hud_ping_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CDOTAMsg_CoachHUDPing& CDOTAUserMsg_CoachHUDPing::_internal_hud_ping() const {
  const ::CDOTAMsg_CoachHUDPing* p = hud_ping_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_CoachHUDPing&>(
      ::_CDOTAMsg_CoachHUDPing_default_instance_);
}
inline const ::CDOTAMsg_CoachHUDPing& CDOTAUserMsg_CoachHUDPing::hud_ping() const {
  // @@protoc_insertion_point(field_get:CDOTAUserMsg_CoachHUDPing.hud_ping)
  return _internal_hud_ping();
}
inline void CDOTAUserMsg_CoachHUDPing::unsafe_arena_set_allocated_hud_ping(
    ::CDOTAMsg_CoachHUDPing* hud_ping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hud_ping_);
  }
  hud_ping_ = hud_ping;
  if (hud_ping) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAUserMsg_CoachHUDPing.hud_ping)
}
inline ::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::release_hud_ping() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_CoachHUDPing* temp = hud_ping_;
  hud_ping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::unsafe_arena_release_hud_ping() {
  // @@protoc_insertion_point(field_release:CDOTAUserMsg_CoachHUDPing.hud_ping)
  _has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_CoachHUDPing* temp = hud_ping_;
  hud_ping_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::_internal_mutable_hud_ping() {
  _has_bits_[0] |= 0x00000001u;
  if (hud_ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_CoachHUDPing>(GetArenaForAllocation());
    hud_ping_ = p;
  }
  return hud_ping_;
}
inline ::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::mutable_hud_ping() {
  ::CDOTAMsg_CoachHUDPing* _msg = _internal_mutable_hud_ping();
  // @@protoc_insertion_point(field_mutable:CDOTAUserMsg_CoachHUDPing.hud_ping)
  return _msg;
}
inline void CDOTAUserMsg_CoachHUDPing::set_allocated_hud_ping(::CDOTAMsg_CoachHUDPing* hud_ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hud_ping_;
  }
  if (hud_ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CDOTAMsg_CoachHUDPing>::GetOwningArena(hud_ping);
    if (message_arena != submessage_arena) {
      hud_ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hud_ping, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hud_ping_ = hud_ping;
  // @@protoc_insertion_point(field_set_allocated:CDOTAUserMsg_CoachHUDPing.hud_ping)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_GuideSelectOption

// optional uint32 option = 1;
inline bool CDOTAClientMsg_GuideSelectOption::_internal_has_option() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelectOption::has_option() const {
  return _internal_has_option();
}
inline void CDOTAClientMsg_GuideSelectOption::clear_option() {
  option_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_GuideSelectOption::_internal_option() const {
  return option_;
}
inline uint32_t CDOTAClientMsg_GuideSelectOption::option() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelectOption.option)
  return _internal_option();
}
inline void CDOTAClientMsg_GuideSelectOption::_internal_set_option(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  option_ = value;
}
inline void CDOTAClientMsg_GuideSelectOption::set_option(uint32_t value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelectOption.option)
}

// optional bool force_recalculate = 2;
inline bool CDOTAClientMsg_GuideSelectOption::_internal_has_force_recalculate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelectOption::has_force_recalculate() const {
  return _internal_has_force_recalculate();
}
inline void CDOTAClientMsg_GuideSelectOption::clear_force_recalculate() {
  force_recalculate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_GuideSelectOption::_internal_force_recalculate() const {
  return force_recalculate_;
}
inline bool CDOTAClientMsg_GuideSelectOption::force_recalculate() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelectOption.force_recalculate)
  return _internal_force_recalculate();
}
inline void CDOTAClientMsg_GuideSelectOption::_internal_set_force_recalculate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  force_recalculate_ = value;
}
inline void CDOTAClientMsg_GuideSelectOption::set_force_recalculate(bool value) {
  _internal_set_force_recalculate(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelectOption.force_recalculate)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_GuideSelected

// optional uint64 guide_workshop_id = 1;
inline bool CDOTAClientMsg_GuideSelected::_internal_has_guide_workshop_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelected::has_guide_workshop_id() const {
  return _internal_has_guide_workshop_id();
}
inline void CDOTAClientMsg_GuideSelected::clear_guide_workshop_id() {
  guide_workshop_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDOTAClientMsg_GuideSelected::_internal_guide_workshop_id() const {
  return guide_workshop_id_;
}
inline uint64_t CDOTAClientMsg_GuideSelected::guide_workshop_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelected.guide_workshop_id)
  return _internal_guide_workshop_id();
}
inline void CDOTAClientMsg_GuideSelected::_internal_set_guide_workshop_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  guide_workshop_id_ = value;
}
inline void CDOTAClientMsg_GuideSelected::set_guide_workshop_id(uint64_t value) {
  _internal_set_guide_workshop_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelected.guide_workshop_id)
}

// optional bool is_plus_guide = 2;
inline bool CDOTAClientMsg_GuideSelected::_internal_has_is_plus_guide() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelected::has_is_plus_guide() const {
  return _internal_has_is_plus_guide();
}
inline void CDOTAClientMsg_GuideSelected::clear_is_plus_guide() {
  is_plus_guide_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_GuideSelected::_internal_is_plus_guide() const {
  return is_plus_guide_;
}
inline bool CDOTAClientMsg_GuideSelected::is_plus_guide() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelected.is_plus_guide)
  return _internal_is_plus_guide();
}
inline void CDOTAClientMsg_GuideSelected::_internal_set_is_plus_guide(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_plus_guide_ = value;
}
inline void CDOTAClientMsg_GuideSelected::set_is_plus_guide(bool value) {
  _internal_set_is_plus_guide(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelected.is_plus_guide)
}

// -------------------------------------------------------------------

// CCLCMsg_CmdKeyValues

// optional bytes data = 1;
inline bool CCLCMsg_CmdKeyValues::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_CmdKeyValues::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_CmdKeyValues::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_CmdKeyValues::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_CmdKeyValues.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_CmdKeyValues::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_CmdKeyValues.data)
}
inline std::string* CCLCMsg_CmdKeyValues::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_CmdKeyValues.data)
  return _s;
}
inline const std::string& CCLCMsg_CmdKeyValues::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_CmdKeyValues::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_CmdKeyValues::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_CmdKeyValues::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_CmdKeyValues.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCLCMsg_CmdKeyValues::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_CmdKeyValues.data)
}

// -------------------------------------------------------------------

// CCLCMsg_FileCRCCheck

// optional int32 code_path = 1;
inline bool CCLCMsg_FileCRCCheck::_internal_has_code_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_code_path() const {
  return _internal_has_code_path();
}
inline void CCLCMsg_FileCRCCheck::clear_code_path() {
  code_path_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CCLCMsg_FileCRCCheck::_internal_code_path() const {
  return code_path_;
}
inline int32_t CCLCMsg_FileCRCCheck::code_path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_path)
  return _internal_code_path();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_code_path(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  code_path_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_code_path(int32_t value) {
  _internal_set_code_path(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_path)
}

// optional string path = 2;
inline bool CCLCMsg_FileCRCCheck::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_path() const {
  return _internal_has_path();
}
inline void CCLCMsg_FileCRCCheck::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_FileCRCCheck::path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_FileCRCCheck::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.path)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.path)
  return _s;
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_path() const {
  return path_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::release_path() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCLCMsg_FileCRCCheck::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.path)
}

// optional int32 code_filename = 3;
inline bool CCLCMsg_FileCRCCheck::_internal_has_code_filename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_code_filename() const {
  return _internal_has_code_filename();
}
inline void CCLCMsg_FileCRCCheck::clear_code_filename() {
  code_filename_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CCLCMsg_FileCRCCheck::_internal_code_filename() const {
  return code_filename_;
}
inline int32_t CCLCMsg_FileCRCCheck::code_filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_filename)
  return _internal_code_filename();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_code_filename(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  code_filename_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_code_filename(int32_t value) {
  _internal_set_code_filename(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_filename)
}

// optional string filename = 4;
inline bool CCLCMsg_FileCRCCheck::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_filename() const {
  return _internal_has_filename();
}
inline void CCLCMsg_FileCRCCheck::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCLCMsg_FileCRCCheck::filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_FileCRCCheck::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.filename)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.filename)
  return _s;
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_filename() const {
  return filename_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::release_filename() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCLCMsg_FileCRCCheck::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.filename)
}

// optional fixed32 crc = 5;
inline bool CCLCMsg_FileCRCCheck::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_crc() const {
  return _internal_has_crc();
}
inline void CCLCMsg_FileCRCCheck::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCLCMsg_FileCRCCheck::_internal_crc() const {
  return crc_;
}
inline uint32_t CCLCMsg_FileCRCCheck::crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.crc)
  return _internal_crc();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_crc(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  crc_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_crc(uint32_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.crc)
}

// -------------------------------------------------------------------

// CCLCMsg_ClientMessage

// optional int32 msg_type = 1;
inline bool CCLCMsg_ClientMessage::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_ClientMessage::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CCLCMsg_ClientMessage::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCLCMsg_ClientMessage::_internal_msg_type() const {
  return msg_type_;
}
inline int32_t CCLCMsg_ClientMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientMessage.msg_type)
  return _internal_msg_type();
}
inline void CCLCMsg_ClientMessage::_internal_set_msg_type(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_ = value;
}
inline void CCLCMsg_ClientMessage::set_msg_type(int32_t value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientMessage.msg_type)
}

// optional bytes data = 2;
inline bool CCLCMsg_ClientMessage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_ClientMessage::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_ClientMessage::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_ClientMessage::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_ClientMessage::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientMessage.data)
}
inline std::string* CCLCMsg_ClientMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_ClientMessage.data)
  return _s;
}
inline const std::string& CCLCMsg_ClientMessage::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_ClientMessage::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_ClientMessage::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_ClientMessage::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_ClientMessage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCLCMsg_ClientMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_ClientMessage.data)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_MatchMetadata

// optional uint64 match_id = 1;
inline bool CDOTAClientMsg_MatchMetadata::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_MatchMetadata::has_match_id() const {
  return _internal_has_match_id();
}
inline void CDOTAClientMsg_MatchMetadata::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CDOTAClientMsg_MatchMetadata::_internal_match_id() const {
  return match_id_;
}
inline uint64_t CDOTAClientMsg_MatchMetadata::match_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MatchMetadata.match_id)
  return _internal_match_id();
}
inline void CDOTAClientMsg_MatchMetadata::_internal_set_match_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  match_id_ = value;
}
inline void CDOTAClientMsg_MatchMetadata::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_MatchMetadata.match_id)
}

// optional bytes metadata = 2;
inline bool CDOTAClientMsg_MatchMetadata::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_MatchMetadata::has_metadata() const {
  return _internal_has_metadata();
}
inline void CDOTAClientMsg_MatchMetadata::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_MatchMetadata::metadata() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MatchMetadata.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_MatchMetadata::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 metadata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_MatchMetadata.metadata)
}
inline std::string* CDOTAClientMsg_MatchMetadata::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_MatchMetadata.metadata)
  return _s;
}
inline const std::string& CDOTAClientMsg_MatchMetadata::_internal_metadata() const {
  return metadata_.Get();
}
inline void CDOTAClientMsg_MatchMetadata::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_MatchMetadata::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_MatchMetadata::release_metadata() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_MatchMetadata.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_MatchMetadata::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_MatchMetadata.metadata)
}

// -------------------------------------------------------------------

// CSOEconItemAttribute

// optional uint32 def_index = 1;
inline bool CSOEconItemAttribute::_internal_has_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOEconItemAttribute::has_def_index() const {
  return _internal_has_def_index();
}
inline void CSOEconItemAttribute::clear_def_index() {
  def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSOEconItemAttribute::_internal_def_index() const {
  return def_index_;
}
inline uint32_t CSOEconItemAttribute::def_index() const {
  // @@protoc_insertion_point(field_get:CSOEconItemAttribute.def_index)
  return _internal_def_index();
}
inline void CSOEconItemAttribute::_internal_set_def_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  def_index_ = value;
}
inline void CSOEconItemAttribute::set_def_index(uint32_t value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CSOEconItemAttribute.def_index)
}

// optional uint32 value = 2;
inline bool CSOEconItemAttribute::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOEconItemAttribute::has_value() const {
  return _internal_has_value();
}
inline void CSOEconItemAttribute::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSOEconItemAttribute::_internal_value() const {
  return value_;
}
inline uint32_t CSOEconItemAttribute::value() const {
  // @@protoc_insertion_point(field_get:CSOEconItemAttribute.value)
  return _internal_value();
}
inline void CSOEconItemAttribute::_internal_set_value(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  value_ = value;
}
inline void CSOEconItemAttribute::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CSOEconItemAttribute.value)
}

// optional bytes value_bytes = 3;
inline bool CSOEconItemAttribute::_internal_has_value_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOEconItemAttribute::has_value_bytes() const {
  return _internal_has_value_bytes();
}
inline void CSOEconItemAttribute::clear_value_bytes() {
  value_bytes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSOEconItemAttribute::value_bytes() const {
  // @@protoc_insertion_point(field_get:CSOEconItemAttribute.value_bytes)
  return _internal_value_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSOEconItemAttribute::set_value_bytes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSOEconItemAttribute.value_bytes)
}
inline std::string* CSOEconItemAttribute::mutable_value_bytes() {
  std::string* _s = _internal_mutable_value_bytes();
  // @@protoc_insertion_point(field_mutable:CSOEconItemAttribute.value_bytes)
  return _s;
}
inline const std::string& CSOEconItemAttribute::_internal_value_bytes() const {
  return value_bytes_.Get();
}
inline void CSOEconItemAttribute::_internal_set_value_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSOEconItemAttribute::_internal_mutable_value_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return value_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSOEconItemAttribute::release_value_bytes() {
  // @@protoc_insertion_point(field_release:CSOEconItemAttribute.value_bytes)
  if (!_internal_has_value_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSOEconItemAttribute::set_allocated_value_bytes(std::string* value_bytes) {
  if (value_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_bytes,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_bytes_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSOEconItemAttribute.value_bytes)
}

// -------------------------------------------------------------------

// CSOEconItemEquipped

// optional uint32 new_class = 1;
inline bool CSOEconItemEquipped::_internal_has_new_class() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOEconItemEquipped::has_new_class() const {
  return _internal_has_new_class();
}
inline void CSOEconItemEquipped::clear_new_class() {
  new_class_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CSOEconItemEquipped::_internal_new_class() const {
  return new_class_;
}
inline uint32_t CSOEconItemEquipped::new_class() const {
  // @@protoc_insertion_point(field_get:CSOEconItemEquipped.new_class)
  return _internal_new_class();
}
inline void CSOEconItemEquipped::_internal_set_new_class(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  new_class_ = value;
}
inline void CSOEconItemEquipped::set_new_class(uint32_t value) {
  _internal_set_new_class(value);
  // @@protoc_insertion_point(field_set:CSOEconItemEquipped.new_class)
}

// optional uint32 new_slot = 2;
inline bool CSOEconItemEquipped::_internal_has_new_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOEconItemEquipped::has_new_slot() const {
  return _internal_has_new_slot();
}
inline void CSOEconItemEquipped::clear_new_slot() {
  new_slot_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSOEconItemEquipped::_internal_new_slot() const {
  return new_slot_;
}
inline uint32_t CSOEconItemEquipped::new_slot() const {
  // @@protoc_insertion_point(field_get:CSOEconItemEquipped.new_slot)
  return _internal_new_slot();
}
inline void CSOEconItemEquipped::_internal_set_new_slot(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  new_slot_ = value;
}
inline void CSOEconItemEquipped::set_new_slot(uint32_t value) {
  _internal_set_new_slot(value);
  // @@protoc_insertion_point(field_set:CSOEconItemEquipped.new_slot)
}

// -------------------------------------------------------------------

// CSOEconItem

// optional uint64 id = 1;
inline bool CSOEconItem::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOEconItem::has_id() const {
  return _internal_has_id();
}
inline void CSOEconItem::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSOEconItem::_internal_id() const {
  return id_;
}
inline uint64_t CSOEconItem::id() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.id)
  return _internal_id();
}
inline void CSOEconItem::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CSOEconItem::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.id)
}

// optional uint32 account_id = 2;
inline bool CSOEconItem::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOEconItem::has_account_id() const {
  return _internal_has_account_id();
}
inline void CSOEconItem::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CSOEconItem::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CSOEconItem::account_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.account_id)
  return _internal_account_id();
}
inline void CSOEconItem::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  account_id_ = value;
}
inline void CSOEconItem::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.account_id)
}

// optional uint32 inventory = 3;
inline bool CSOEconItem::_internal_has_inventory() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSOEconItem::has_inventory() const {
  return _internal_has_inventory();
}
inline void CSOEconItem::clear_inventory() {
  inventory_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSOEconItem::_internal_inventory() const {
  return inventory_;
}
inline uint32_t CSOEconItem::inventory() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.inventory)
  return _internal_inventory();
}
inline void CSOEconItem::_internal_set_inventory(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  inventory_ = value;
}
inline void CSOEconItem::set_inventory(uint32_t value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.inventory)
}

// optional uint32 def_index = 4;
inline bool CSOEconItem::_internal_has_def_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSOEconItem::has_def_index() const {
  return _internal_has_def_index();
}
inline void CSOEconItem::clear_def_index() {
  def_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CSOEconItem::_internal_def_index() const {
  return def_index_;
}
inline uint32_t CSOEconItem::def_index() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.def_index)
  return _internal_def_index();
}
inline void CSOEconItem::_internal_set_def_index(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  def_index_ = value;
}
inline void CSOEconItem::set_def_index(uint32_t value) {
  _internal_set_def_index(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.def_index)
}

// optional uint32 quantity = 5 [default = 1];
inline bool CSOEconItem::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSOEconItem::has_quantity() const {
  return _internal_has_quantity();
}
inline void CSOEconItem::clear_quantity() {
  quantity_ = 1u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CSOEconItem::_internal_quantity() const {
  return quantity_;
}
inline uint32_t CSOEconItem::quantity() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.quantity)
  return _internal_quantity();
}
inline void CSOEconItem::_internal_set_quantity(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  quantity_ = value;
}
inline void CSOEconItem::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.quantity)
}

// optional uint32 level = 6 [default = 1];
inline bool CSOEconItem::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSOEconItem::has_level() const {
  return _internal_has_level();
}
inline void CSOEconItem::clear_level() {
  level_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CSOEconItem::_internal_level() const {
  return level_;
}
inline uint32_t CSOEconItem::level() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.level)
  return _internal_level();
}
inline void CSOEconItem::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  level_ = value;
}
inline void CSOEconItem::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.level)
}

// optional uint32 quality = 7 [default = 4];
inline bool CSOEconItem::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSOEconItem::has_quality() const {
  return _internal_has_quality();
}
inline void CSOEconItem::clear_quality() {
  quality_ = 4u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSOEconItem::_internal_quality() const {
  return quality_;
}
inline uint32_t CSOEconItem::quality() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.quality)
  return _internal_quality();
}
inline void CSOEconItem::_internal_set_quality(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  quality_ = value;
}
inline void CSOEconItem::set_quality(uint32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.quality)
}

// optional uint32 flags = 8 [default = 0];
inline bool CSOEconItem::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSOEconItem::has_flags() const {
  return _internal_has_flags();
}
inline void CSOEconItem::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSOEconItem::_internal_flags() const {
  return flags_;
}
inline uint32_t CSOEconItem::flags() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.flags)
  return _internal_flags();
}
inline void CSOEconItem::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  flags_ = value;
}
inline void CSOEconItem::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.flags)
}

// optional uint32 origin = 9 [default = 0];
inline bool CSOEconItem::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSOEconItem::has_origin() const {
  return _internal_has_origin();
}
inline void CSOEconItem::clear_origin() {
  origin_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSOEconItem::_internal_origin() const {
  return origin_;
}
inline uint32_t CSOEconItem::origin() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.origin)
  return _internal_origin();
}
inline void CSOEconItem::_internal_set_origin(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  origin_ = value;
}
inline void CSOEconItem::set_origin(uint32_t value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.origin)
}

// repeated .CSOEconItemAttribute attribute = 12;
inline int CSOEconItem::_internal_attribute_size() const {
  return attribute_.size();
}
inline int CSOEconItem::attribute_size() const {
  return _internal_attribute_size();
}
inline void CSOEconItem::clear_attribute() {
  attribute_.Clear();
}
inline ::CSOEconItemAttribute* CSOEconItem::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:CSOEconItem.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemAttribute >*
CSOEconItem::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:CSOEconItem.attribute)
  return &attribute_;
}
inline const ::CSOEconItemAttribute& CSOEconItem::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::CSOEconItemAttribute& CSOEconItem::attribute(int index) const {
  // @@protoc_insertion_point(field_get:CSOEconItem.attribute)
  return _internal_attribute(index);
}
inline ::CSOEconItemAttribute* CSOEconItem::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::CSOEconItemAttribute* CSOEconItem::add_attribute() {
  ::CSOEconItemAttribute* _add = _internal_add_attribute();
  // @@protoc_insertion_point(field_add:CSOEconItem.attribute)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemAttribute >&
CSOEconItem::attribute() const {
  // @@protoc_insertion_point(field_list:CSOEconItem.attribute)
  return attribute_;
}

// optional .CSOEconItem interior_item = 13;
inline bool CSOEconItem::_internal_has_interior_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || interior_item_ != nullptr);
  return value;
}
inline bool CSOEconItem::has_interior_item() const {
  return _internal_has_interior_item();
}
inline void CSOEconItem::clear_interior_item() {
  if (interior_item_ != nullptr) interior_item_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSOEconItem& CSOEconItem::_internal_interior_item() const {
  const ::CSOEconItem* p = interior_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSOEconItem&>(
      ::_CSOEconItem_default_instance_);
}
inline const ::CSOEconItem& CSOEconItem::interior_item() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.interior_item)
  return _internal_interior_item();
}
inline void CSOEconItem::unsafe_arena_set_allocated_interior_item(
    ::CSOEconItem* interior_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_item_);
  }
  interior_item_ = interior_item;
  if (interior_item) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSOEconItem.interior_item)
}
inline ::CSOEconItem* CSOEconItem::release_interior_item() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = interior_item_;
  interior_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSOEconItem* CSOEconItem::unsafe_arena_release_interior_item() {
  // @@protoc_insertion_point(field_release:CSOEconItem.interior_item)
  _has_bits_[0] &= ~0x00000001u;
  ::CSOEconItem* temp = interior_item_;
  interior_item_ = nullptr;
  return temp;
}
inline ::CSOEconItem* CSOEconItem::_internal_mutable_interior_item() {
  _has_bits_[0] |= 0x00000001u;
  if (interior_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSOEconItem>(GetArenaForAllocation());
    interior_item_ = p;
  }
  return interior_item_;
}
inline ::CSOEconItem* CSOEconItem::mutable_interior_item() {
  ::CSOEconItem* _msg = _internal_mutable_interior_item();
  // @@protoc_insertion_point(field_mutable:CSOEconItem.interior_item)
  return _msg;
}
inline void CSOEconItem::set_allocated_interior_item(::CSOEconItem* interior_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete interior_item_;
  }
  if (interior_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CSOEconItem>::GetOwningArena(interior_item);
    if (message_arena != submessage_arena) {
      interior_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interior_item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  interior_item_ = interior_item;
  // @@protoc_insertion_point(field_set_allocated:CSOEconItem.interior_item)
}

// optional uint32 style = 15 [default = 0];
inline bool CSOEconItem::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSOEconItem::has_style() const {
  return _internal_has_style();
}
inline void CSOEconItem::clear_style() {
  style_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CSOEconItem::_internal_style() const {
  return style_;
}
inline uint32_t CSOEconItem::style() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.style)
  return _internal_style();
}
inline void CSOEconItem::_internal_set_style(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  style_ = value;
}
inline void CSOEconItem::set_style(uint32_t value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.style)
}

// optional uint64 original_id = 16 [default = 0];
inline bool CSOEconItem::_internal_has_original_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSOEconItem::has_original_id() const {
  return _internal_has_original_id();
}
inline void CSOEconItem::clear_original_id() {
  original_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CSOEconItem::_internal_original_id() const {
  return original_id_;
}
inline uint64_t CSOEconItem::original_id() const {
  // @@protoc_insertion_point(field_get:CSOEconItem.original_id)
  return _internal_original_id();
}
inline void CSOEconItem::_internal_set_original_id(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  original_id_ = value;
}
inline void CSOEconItem::set_original_id(uint64_t value) {
  _internal_set_original_id(value);
  // @@protoc_insertion_point(field_set:CSOEconItem.original_id)
}

// repeated .CSOEconItemEquipped equipped_state = 18;
inline int CSOEconItem::_internal_equipped_state_size() const {
  return equipped_state_.size();
}
inline int CSOEconItem::equipped_state_size() const {
  return _internal_equipped_state_size();
}
inline void CSOEconItem::clear_equipped_state() {
  equipped_state_.Clear();
}
inline ::CSOEconItemEquipped* CSOEconItem::mutable_equipped_state(int index) {
  // @@protoc_insertion_point(field_mutable:CSOEconItem.equipped_state)
  return equipped_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemEquipped >*
CSOEconItem::mutable_equipped_state() {
  // @@protoc_insertion_point(field_mutable_list:CSOEconItem.equipped_state)
  return &equipped_state_;
}
inline const ::CSOEconItemEquipped& CSOEconItem::_internal_equipped_state(int index) const {
  return equipped_state_.Get(index);
}
inline const ::CSOEconItemEquipped& CSOEconItem::equipped_state(int index) const {
  // @@protoc_insertion_point(field_get:CSOEconItem.equipped_state)
  return _internal_equipped_state(index);
}
inline ::CSOEconItemEquipped* CSOEconItem::_internal_add_equipped_state() {
  return equipped_state_.Add();
}
inline ::CSOEconItemEquipped* CSOEconItem::add_equipped_state() {
  ::CSOEconItemEquipped* _add = _internal_add_equipped_state();
  // @@protoc_insertion_point(field_add:CSOEconItem.equipped_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItemEquipped >&
CSOEconItem::equipped_state() const {
  // @@protoc_insertion_point(field_list:CSOEconItem.equipped_state)
  return equipped_state_;
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::_internal_has_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CLobbyTimedRewardDetails::_internal_item_def_index() const {
  return item_def_index_;
}
inline uint32_t CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return _internal_item_def_index();
}
inline void CLobbyTimedRewardDetails::_internal_set_item_def_index(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  item_def_index_ = value;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(uint32_t value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::_internal_has_is_supply_crate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return _internal_has_is_supply_crate();
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CLobbyTimedRewardDetails::_internal_is_supply_crate() const {
  return is_supply_crate_;
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return _internal_is_supply_crate();
}
inline void CLobbyTimedRewardDetails::_internal_set_is_supply_crate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_supply_crate_ = value;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  _internal_set_is_supply_crate(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::_internal_has_is_timed_drop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return _internal_has_is_timed_drop();
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CLobbyTimedRewardDetails::_internal_is_timed_drop() const {
  return is_timed_drop_;
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return _internal_is_timed_drop();
}
inline void CLobbyTimedRewardDetails::_internal_set_is_timed_drop(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_timed_drop_ = value;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  _internal_set_is_timed_drop(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return _internal_has_account_id();
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CLobbyTimedRewardDetails::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return _internal_account_id();
}
inline void CLobbyTimedRewardDetails::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
}
inline void CLobbyTimedRewardDetails::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
inline bool CLobbyTimedRewardDetails::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_origin() const {
  return _internal_has_origin();
}
inline void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CLobbyTimedRewardDetails::_internal_origin() const {
  return origin_;
}
inline uint32_t CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.origin)
  return _internal_origin();
}
inline void CLobbyTimedRewardDetails::_internal_set_origin(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  origin_ = value;
}
inline void CLobbyTimedRewardDetails::set_origin(uint32_t value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.origin)
}

// -------------------------------------------------------------------

// CMsgMatchTips_SingleTip

// optional uint32 source_account_id = 1;
inline bool CMsgMatchTips_SingleTip::_internal_has_source_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_source_account_id() const {
  return _internal_has_source_account_id();
}
inline void CMsgMatchTips_SingleTip::clear_source_account_id() {
  source_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchTips_SingleTip::_internal_source_account_id() const {
  return source_account_id_;
}
inline uint32_t CMsgMatchTips_SingleTip::source_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.source_account_id)
  return _internal_source_account_id();
}
inline void CMsgMatchTips_SingleTip::_internal_set_source_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  source_account_id_ = value;
}
inline void CMsgMatchTips_SingleTip::set_source_account_id(uint32_t value) {
  _internal_set_source_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.source_account_id)
}

// optional uint32 target_account_id = 2;
inline bool CMsgMatchTips_SingleTip::_internal_has_target_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgMatchTips_SingleTip::clear_target_account_id() {
  target_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchTips_SingleTip::_internal_target_account_id() const {
  return target_account_id_;
}
inline uint32_t CMsgMatchTips_SingleTip::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgMatchTips_SingleTip::_internal_set_target_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  target_account_id_ = value;
}
inline void CMsgMatchTips_SingleTip::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.target_account_id)
}

// optional uint32 tip_amount = 3;
inline bool CMsgMatchTips_SingleTip::_internal_has_tip_amount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_tip_amount() const {
  return _internal_has_tip_amount();
}
inline void CMsgMatchTips_SingleTip::clear_tip_amount() {
  tip_amount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgMatchTips_SingleTip::_internal_tip_amount() const {
  return tip_amount_;
}
inline uint32_t CMsgMatchTips_SingleTip::tip_amount() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.tip_amount)
  return _internal_tip_amount();
}
inline void CMsgMatchTips_SingleTip::_internal_set_tip_amount(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  tip_amount_ = value;
}
inline void CMsgMatchTips_SingleTip::set_tip_amount(uint32_t value) {
  _internal_set_tip_amount(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.tip_amount)
}

// optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
inline bool CMsgMatchTips_SingleTip::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgMatchTips_SingleTip::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgMatchTips_SingleTip::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EEvent CMsgMatchTips_SingleTip::_internal_event_id() const {
  return static_cast< ::EEvent >(event_id_);
}
inline ::EEvent CMsgMatchTips_SingleTip::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.SingleTip.event_id)
  return _internal_event_id();
}
inline void CMsgMatchTips_SingleTip::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  event_id_ = value;
}
inline void CMsgMatchTips_SingleTip::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchTips.SingleTip.event_id)
}

// -------------------------------------------------------------------

// CMsgMatchTips

// repeated .CMsgMatchTips.SingleTip tips = 2;
inline int CMsgMatchTips::_internal_tips_size() const {
  return tips_.size();
}
inline int CMsgMatchTips::tips_size() const {
  return _internal_tips_size();
}
inline void CMsgMatchTips::clear_tips() {
  tips_.Clear();
}
inline ::CMsgMatchTips_SingleTip* CMsgMatchTips::mutable_tips(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchTips.tips)
  return tips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >*
CMsgMatchTips::mutable_tips() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchTips.tips)
  return &tips_;
}
inline const ::CMsgMatchTips_SingleTip& CMsgMatchTips::_internal_tips(int index) const {
  return tips_.Get(index);
}
inline const ::CMsgMatchTips_SingleTip& CMsgMatchTips::tips(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchTips.tips)
  return _internal_tips(index);
}
inline ::CMsgMatchTips_SingleTip* CMsgMatchTips::_internal_add_tips() {
  return tips_.Add();
}
inline ::CMsgMatchTips_SingleTip* CMsgMatchTips::add_tips() {
  ::CMsgMatchTips_SingleTip* _add = _internal_add_tips();
  // @@protoc_insertion_point(field_add:CMsgMatchTips.tips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips_SingleTip >&
CMsgMatchTips::tips() const {
  // @@protoc_insertion_point(field_list:CMsgMatchTips.tips)
  return tips_;
}

// -------------------------------------------------------------------

// CMsgMatchMatchmakingStats

// optional uint32 average_queue_time = 1;
inline bool CMsgMatchMatchmakingStats::_internal_has_average_queue_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_average_queue_time() const {
  return _internal_has_average_queue_time();
}
inline void CMsgMatchMatchmakingStats::clear_average_queue_time() {
  average_queue_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchMatchmakingStats::_internal_average_queue_time() const {
  return average_queue_time_;
}
inline uint32_t CMsgMatchMatchmakingStats::average_queue_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.average_queue_time)
  return _internal_average_queue_time();
}
inline void CMsgMatchMatchmakingStats::_internal_set_average_queue_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  average_queue_time_ = value;
}
inline void CMsgMatchMatchmakingStats::set_average_queue_time(uint32_t value) {
  _internal_set_average_queue_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.average_queue_time)
}

// optional uint32 maximum_queue_time = 2;
inline bool CMsgMatchMatchmakingStats::_internal_has_maximum_queue_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_maximum_queue_time() const {
  return _internal_has_maximum_queue_time();
}
inline void CMsgMatchMatchmakingStats::clear_maximum_queue_time() {
  maximum_queue_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchMatchmakingStats::_internal_maximum_queue_time() const {
  return maximum_queue_time_;
}
inline uint32_t CMsgMatchMatchmakingStats::maximum_queue_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.maximum_queue_time)
  return _internal_maximum_queue_time();
}
inline void CMsgMatchMatchmakingStats::_internal_set_maximum_queue_time(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  maximum_queue_time_ = value;
}
inline void CMsgMatchMatchmakingStats::set_maximum_queue_time(uint32_t value) {
  _internal_set_maximum_queue_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.maximum_queue_time)
}

// optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
inline bool CMsgMatchMatchmakingStats::_internal_has_behavior_score_variance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_behavior_score_variance() const {
  return _internal_has_behavior_score_variance();
}
inline void CMsgMatchMatchmakingStats::clear_behavior_score_variance() {
  behavior_score_variance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EMatchBehaviorScoreVariance CMsgMatchMatchmakingStats::_internal_behavior_score_variance() const {
  return static_cast< ::EMatchBehaviorScoreVariance >(behavior_score_variance_);
}
inline ::EMatchBehaviorScoreVariance CMsgMatchMatchmakingStats::behavior_score_variance() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.behavior_score_variance)
  return _internal_behavior_score_variance();
}
inline void CMsgMatchMatchmakingStats::_internal_set_behavior_score_variance(::EMatchBehaviorScoreVariance value) {
  assert(::EMatchBehaviorScoreVariance_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  behavior_score_variance_ = value;
}
inline void CMsgMatchMatchmakingStats::set_behavior_score_variance(::EMatchBehaviorScoreVariance value) {
  _internal_set_behavior_score_variance(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.behavior_score_variance)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_PlayerKill

// optional uint32 victim_slot = 1;
inline bool CDOTAMatchMetadata_Team_PlayerKill::_internal_has_victim_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_victim_slot() const {
  return _internal_has_victim_slot();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_victim_slot() {
  victim_slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_PlayerKill::_internal_victim_slot() const {
  return victim_slot_;
}
inline uint32_t CDOTAMatchMetadata_Team_PlayerKill::victim_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
  return _internal_victim_slot();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::_internal_set_victim_slot(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  victim_slot_ = value;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_victim_slot(uint32_t value) {
  _internal_set_victim_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
}

// optional uint32 count = 2;
inline bool CDOTAMatchMetadata_Team_PlayerKill::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_PlayerKill::has_count() const {
  return _internal_has_count();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_PlayerKill::_internal_count() const {
  return count_;
}
inline uint32_t CDOTAMatchMetadata_Team_PlayerKill::count() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.PlayerKill.count)
  return _internal_count();
}
inline void CDOTAMatchMetadata_Team_PlayerKill::_internal_set_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CDOTAMatchMetadata_Team_PlayerKill::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.PlayerKill.count)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_ItemPurchase

// optional uint32 item_id = 1;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_item_id() const {
  return _internal_has_item_id();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_item_id() {
  item_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_ItemPurchase::_internal_item_id() const {
  return item_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_ItemPurchase::item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ItemPurchase.item_id)
  return _internal_item_id();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::_internal_set_item_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ItemPurchase.item_id)
}

// optional int32 purchase_time = 2;
inline bool CDOTAMatchMetadata_Team_ItemPurchase::_internal_has_purchase_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ItemPurchase::has_purchase_time() const {
  return _internal_has_purchase_time();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::clear_purchase_time() {
  purchase_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAMatchMetadata_Team_ItemPurchase::_internal_purchase_time() const {
  return purchase_time_;
}
inline int32_t CDOTAMatchMetadata_Team_ItemPurchase::purchase_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
  return _internal_purchase_time();
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::_internal_set_purchase_time(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  purchase_time_ = value;
}
inline void CDOTAMatchMetadata_Team_ItemPurchase::set_purchase_time(int32_t value) {
  _internal_set_purchase_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_InventorySnapshot

// repeated uint32 item_id = 1;
inline int CDOTAMatchMetadata_Team_InventorySnapshot::_internal_item_id_size() const {
  return item_id_.size();
}
inline int CDOTAMatchMetadata_Team_InventorySnapshot::item_id_size() const {
  return _internal_item_id_size();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_item_id() {
  item_id_.Clear();
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::_internal_item_id(int index) const {
  return item_id_.Get(index);
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::item_id(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return _internal_item_id(index);
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_item_id(int index, uint32_t value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_add_item_id(uint32_t value) {
  item_id_.Add(value);
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::add_item_id(uint32_t value) {
  _internal_add_item_id(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team_InventorySnapshot::_internal_item_id() const {
  return item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team_InventorySnapshot::item_id() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return _internal_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team_InventorySnapshot::_internal_mutable_item_id() {
  return &item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team_InventorySnapshot::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return _internal_mutable_item_id();
}

// optional int32 game_time = 2;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_game_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_game_time() const {
  return _internal_has_game_time();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_game_time() {
  game_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAMatchMetadata_Team_InventorySnapshot::_internal_game_time() const {
  return game_time_;
}
inline int32_t CDOTAMatchMetadata_Team_InventorySnapshot::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
  return _internal_game_time();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_game_time(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_game_time(int32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
}

// optional uint32 kills = 3;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_kills() const {
  return _internal_has_kills();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_kills() {
  kills_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::_internal_kills() const {
  return kills_;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::kills() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.kills)
  return _internal_kills();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_kills(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.kills)
}

// optional uint32 deaths = 4;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_deaths() const {
  return _internal_has_deaths();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_deaths() {
  deaths_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::_internal_deaths() const {
  return deaths_;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::deaths() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
  return _internal_deaths();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_deaths(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  deaths_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
}

// optional uint32 assists = 5;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_assists() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_assists() const {
  return _internal_has_assists();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_assists() {
  assists_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::_internal_assists() const {
  return assists_;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::assists() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.assists)
  return _internal_assists();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_assists(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  assists_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.assists)
}

// optional uint32 level = 6;
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_InventorySnapshot::has_level() const {
  return _internal_has_level();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::_internal_level() const {
  return level_;
}
inline uint32_t CDOTAMatchMetadata_Team_InventorySnapshot::level() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.InventorySnapshot.level)
  return _internal_level();
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
}
inline void CDOTAMatchMetadata_Team_InventorySnapshot::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.InventorySnapshot.level)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_AutoStyleCriteria

// optional uint32 name_token = 1;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_has_name_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_name_token() const {
  return _internal_has_name_token();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_name_token() {
  name_token_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_name_token() const {
  return name_token_;
}
inline uint32_t CDOTAMatchMetadata_Team_AutoStyleCriteria::name_token() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
  return _internal_name_token();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_set_name_token(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  name_token_ = value;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_name_token(uint32_t value) {
  _internal_set_name_token(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
}

// optional float value = 2;
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_value() const {
  return _internal_has_value();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_value() const {
  return value_;
}
inline float CDOTAMatchMetadata_Team_AutoStyleCriteria::value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
  return _internal_value();
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_StrangeGemProgress

// optional uint32 kill_eater_type = 1;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_kill_eater_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_kill_eater_type() const {
  return _internal_has_kill_eater_type();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_kill_eater_type() {
  kill_eater_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_kill_eater_type() const {
  return kill_eater_type_;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::kill_eater_type() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.kill_eater_type)
  return _internal_kill_eater_type();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_kill_eater_type(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  kill_eater_type_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_kill_eater_type(uint32_t value) {
  _internal_set_kill_eater_type(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.kill_eater_type)
}

// optional uint32 gem_item_def_index = 2;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_gem_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_gem_item_def_index() const {
  return _internal_has_gem_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_gem_item_def_index() {
  gem_item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_gem_item_def_index() const {
  return gem_item_def_index_;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::gem_item_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.gem_item_def_index)
  return _internal_gem_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_gem_item_def_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  gem_item_def_index_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_gem_item_def_index(uint32_t value) {
  _internal_set_gem_item_def_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.gem_item_def_index)
}

// optional uint32 required_hero_id = 3;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_required_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_required_hero_id() const {
  return _internal_has_required_hero_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_required_hero_id() {
  required_hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_required_hero_id() const {
  return required_hero_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::required_hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.required_hero_id)
  return _internal_required_hero_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_required_hero_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  required_hero_id_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_required_hero_id(uint32_t value) {
  _internal_set_required_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.required_hero_id)
}

// optional uint32 starting_value = 4;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_starting_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_starting_value() const {
  return _internal_has_starting_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_starting_value() {
  starting_value_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_starting_value() const {
  return starting_value_;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::starting_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.starting_value)
  return _internal_starting_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_starting_value(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  starting_value_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_starting_value(uint32_t value) {
  _internal_set_starting_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.starting_value)
}

// optional uint32 ending_value = 5;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_ending_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_ending_value() const {
  return _internal_has_ending_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_ending_value() {
  ending_value_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_ending_value() const {
  return ending_value_;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::ending_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.ending_value)
  return _internal_ending_value();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_ending_value(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  ending_value_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_ending_value(uint32_t value) {
  _internal_set_ending_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.ending_value)
}

// optional uint32 owner_item_def_index = 6;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_owner_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_owner_item_def_index() const {
  return _internal_has_owner_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_owner_item_def_index() {
  owner_item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_owner_item_def_index() const {
  return owner_item_def_index_;
}
inline uint32_t CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_def_index)
  return _internal_owner_item_def_index();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_owner_item_def_index(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  owner_item_def_index_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_owner_item_def_index(uint32_t value) {
  _internal_set_owner_item_def_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_def_index)
}

// optional uint64 owner_item_id = 7;
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_has_owner_item_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_StrangeGemProgress::has_owner_item_id() const {
  return _internal_has_owner_item_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::clear_owner_item_id() {
  owner_item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_owner_item_id() const {
  return owner_item_id_;
}
inline uint64_t CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_id)
  return _internal_owner_item_id();
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::_internal_set_owner_item_id(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  owner_item_id_ = value;
}
inline void CDOTAMatchMetadata_Team_StrangeGemProgress::set_owner_item_id(uint64_t value) {
  _internal_set_owner_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.StrangeGemProgress.owner_item_id)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_VictoryPrediction

// optional uint64 item_id = 1;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_item_id() const {
  return _internal_has_item_id();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDOTAMatchMetadata_Team_VictoryPrediction::_internal_item_id() const {
  return item_id_;
}
inline uint64_t CDOTAMatchMetadata_Team_VictoryPrediction::item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.item_id)
  return _internal_item_id();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_item_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.item_id)
}

// optional uint32 item_def_index = 2;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_VictoryPrediction::_internal_item_def_index() const {
  return item_def_index_;
}
inline uint32_t CDOTAMatchMetadata_Team_VictoryPrediction::item_def_index() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.item_def_index)
  return _internal_item_def_index();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_item_def_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  item_def_index_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_item_def_index(uint32_t value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.item_def_index)
}

// optional uint32 starting_value = 3;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_starting_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_starting_value() const {
  return _internal_has_starting_value();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_starting_value() {
  starting_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_VictoryPrediction::_internal_starting_value() const {
  return starting_value_;
}
inline uint32_t CDOTAMatchMetadata_Team_VictoryPrediction::starting_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.starting_value)
  return _internal_starting_value();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_starting_value(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  starting_value_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_starting_value(uint32_t value) {
  _internal_set_starting_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.starting_value)
}

// optional bool is_victory = 4;
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_has_is_victory() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::has_is_victory() const {
  return _internal_has_is_victory();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::clear_is_victory() {
  is_victory_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::_internal_is_victory() const {
  return is_victory_;
}
inline bool CDOTAMatchMetadata_Team_VictoryPrediction::is_victory() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.VictoryPrediction.is_victory)
  return _internal_is_victory();
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::_internal_set_is_victory(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_victory_ = value;
}
inline void CDOTAMatchMetadata_Team_VictoryPrediction::set_is_victory(bool value) {
  _internal_set_is_victory(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.VictoryPrediction.is_victory)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_SubChallenge

// optional uint32 slot_id = 1;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_slot_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_slot_id() {
  slot_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_SubChallenge::_internal_slot_id() const {
  return slot_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_SubChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.slot_id)
  return _internal_slot_id();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_slot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  slot_id_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.slot_id)
}

// optional uint32 start_value = 2;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_start_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_start_value() const {
  return _internal_has_start_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_start_value() {
  start_value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_SubChallenge::_internal_start_value() const {
  return start_value_;
}
inline uint32_t CDOTAMatchMetadata_Team_SubChallenge::start_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.start_value)
  return _internal_start_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_start_value(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  start_value_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_start_value(uint32_t value) {
  _internal_set_start_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.start_value)
}

// optional uint32 end_value = 3;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_end_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_end_value() const {
  return _internal_has_end_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_end_value() {
  end_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_SubChallenge::_internal_end_value() const {
  return end_value_;
}
inline uint32_t CDOTAMatchMetadata_Team_SubChallenge::end_value() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.end_value)
  return _internal_end_value();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_end_value(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  end_value_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_end_value(uint32_t value) {
  _internal_set_end_value(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.end_value)
}

// optional bool completed = 4;
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_has_completed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::has_completed() const {
  return _internal_has_completed();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::_internal_completed() const {
  return completed_;
}
inline bool CDOTAMatchMetadata_Team_SubChallenge::completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.SubChallenge.completed)
  return _internal_completed();
}
inline void CDOTAMatchMetadata_Team_SubChallenge::_internal_set_completed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  completed_ = value;
}
inline void CDOTAMatchMetadata_Team_SubChallenge::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.SubChallenge.completed)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_CavernChallengeResult

// optional uint32 completed_path_id = 1;
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_has_completed_path_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::has_completed_path_id() const {
  return _internal_has_completed_path_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::clear_completed_path_id() {
  completed_path_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_completed_path_id() const {
  return completed_path_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_CavernChallengeResult::completed_path_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.CavernChallengeResult.completed_path_id)
  return _internal_completed_path_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_set_completed_path_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  completed_path_id_ = value;
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::set_completed_path_id(uint32_t value) {
  _internal_set_completed_path_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.CavernChallengeResult.completed_path_id)
}

// optional uint32 claimed_room_id = 2;
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_has_claimed_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_CavernChallengeResult::has_claimed_room_id() const {
  return _internal_has_claimed_room_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::clear_claimed_room_id() {
  claimed_room_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_claimed_room_id() const {
  return claimed_room_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_CavernChallengeResult::claimed_room_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.CavernChallengeResult.claimed_room_id)
  return _internal_claimed_room_id();
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::_internal_set_claimed_room_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  claimed_room_id_ = value;
}
inline void CDOTAMatchMetadata_Team_CavernChallengeResult::set_claimed_room_id(uint32_t value) {
  _internal_set_claimed_room_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.CavernChallengeResult.claimed_room_id)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_ActionGrant

// optional uint32 action_id = 1;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_action_id() const {
  return _internal_has_action_id();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_action_id() {
  action_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_ActionGrant::_internal_action_id() const {
  return action_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_ActionGrant::action_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.action_id)
  return _internal_action_id();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_action_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  action_id_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_action_id(uint32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.action_id)
}

// optional uint32 quantity = 2;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_quantity() const {
  return _internal_has_quantity();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_quantity() {
  quantity_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_ActionGrant::_internal_quantity() const {
  return quantity_;
}
inline uint32_t CDOTAMatchMetadata_Team_ActionGrant::quantity() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.quantity)
  return _internal_quantity();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_quantity(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  quantity_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.quantity)
}

// optional uint32 audit = 3;
inline bool CDOTAMatchMetadata_Team_ActionGrant::_internal_has_audit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_ActionGrant::has_audit() const {
  return _internal_has_audit();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::clear_audit() {
  audit_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_ActionGrant::_internal_audit() const {
  return audit_;
}
inline uint32_t CDOTAMatchMetadata_Team_ActionGrant::audit() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.ActionGrant.audit)
  return _internal_audit();
}
inline void CDOTAMatchMetadata_Team_ActionGrant::_internal_set_audit(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  audit_ = value;
}
inline void CDOTAMatchMetadata_Team_ActionGrant::set_audit(uint32_t value) {
  _internal_set_audit(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.ActionGrant.audit)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_EventData

// optional uint32 event_id = 1;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_event_id() const {
  return event_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.event_id)
  return _internal_event_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_event_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.event_id)
}

// optional uint32 event_points = 2;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_event_points() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_event_points() const {
  return _internal_has_event_points();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_points() {
  event_points_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_event_points() const {
  return event_points_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::event_points() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.event_points)
  return _internal_event_points();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_event_points(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  event_points_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_points(uint32_t value) {
  _internal_set_event_points(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.event_points)
}

// optional uint32 challenge_instance_id = 3;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_instance_id() {
  challenge_instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_challenge_instance_id() const {
  return challenge_instance_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_instance_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_instance_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_instance_id(uint32_t value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_instance_id)
}

// optional uint32 challenge_quest_id = 4;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_quest_id() const {
  return _internal_has_challenge_quest_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_quest_id() {
  challenge_quest_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_challenge_quest_id() const {
  return challenge_quest_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::challenge_quest_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_quest_id)
  return _internal_challenge_quest_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_quest_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  challenge_quest_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_quest_id(uint32_t value) {
  _internal_set_challenge_quest_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_quest_id)
}

// optional uint32 challenge_quest_challenge_id = 5;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_quest_challenge_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_quest_challenge_id() const {
  return _internal_has_challenge_quest_challenge_id();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_quest_challenge_id() {
  challenge_quest_challenge_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_challenge_quest_challenge_id() const {
  return challenge_quest_challenge_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::challenge_quest_challenge_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_quest_challenge_id)
  return _internal_challenge_quest_challenge_id();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_quest_challenge_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  challenge_quest_challenge_id_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_quest_challenge_id(uint32_t value) {
  _internal_set_challenge_quest_challenge_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_quest_challenge_id)
}

// optional bool challenge_completed = 6;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_completed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_completed() const {
  return _internal_has_challenge_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_completed() {
  challenge_completed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_challenge_completed() const {
  return challenge_completed_;
}
inline bool CDOTAMatchMetadata_Team_EventData::challenge_completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_completed)
  return _internal_challenge_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_completed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  challenge_completed_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_completed(bool value) {
  _internal_set_challenge_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_completed)
}

// optional uint32 challenge_rank_completed = 7;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_rank_completed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_rank_completed() const {
  return _internal_has_challenge_rank_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_rank_completed() {
  challenge_rank_completed_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_challenge_rank_completed() const {
  return challenge_rank_completed_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::challenge_rank_completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_rank_completed)
  return _internal_challenge_rank_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_rank_completed(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  challenge_rank_completed_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_rank_completed(uint32_t value) {
  _internal_set_challenge_rank_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_rank_completed)
}

// optional uint32 challenge_rank_previously_completed = 8;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_challenge_rank_previously_completed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_challenge_rank_previously_completed() const {
  return _internal_has_challenge_rank_previously_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_challenge_rank_previously_completed() {
  challenge_rank_previously_completed_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_challenge_rank_previously_completed() const {
  return challenge_rank_previously_completed_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::challenge_rank_previously_completed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.challenge_rank_previously_completed)
  return _internal_challenge_rank_previously_completed();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_challenge_rank_previously_completed(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  challenge_rank_previously_completed_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_challenge_rank_previously_completed(uint32_t value) {
  _internal_set_challenge_rank_previously_completed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.challenge_rank_previously_completed)
}

// optional bool event_owned = 9;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_event_owned() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_event_owned() const {
  return _internal_has_event_owned();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_event_owned() {
  event_owned_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_event_owned() const {
  return event_owned_;
}
inline bool CDOTAMatchMetadata_Team_EventData::event_owned() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.event_owned)
  return _internal_event_owned();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_event_owned(bool value) {
  _has_bits_[0] |= 0x00000100u;
  event_owned_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_event_owned(bool value) {
  _internal_set_event_owned(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.event_owned)
}

// repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
inline int CDOTAMatchMetadata_Team_EventData::_internal_sub_challenges_with_progress_size() const {
  return sub_challenges_with_progress_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress_size() const {
  return _internal_sub_challenges_with_progress_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_sub_challenges_with_progress() {
  sub_challenges_with_progress_.Clear();
}
inline ::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::mutable_sub_challenges_with_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >*
CDOTAMatchMetadata_Team_EventData::mutable_sub_challenges_with_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return &sub_challenges_with_progress_;
}
inline const ::CDOTAMatchMetadata_Team_SubChallenge& CDOTAMatchMetadata_Team_EventData::_internal_sub_challenges_with_progress(int index) const {
  return sub_challenges_with_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_SubChallenge& CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return _internal_sub_challenges_with_progress(index);
}
inline ::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::_internal_add_sub_challenges_with_progress() {
  return sub_challenges_with_progress_.Add();
}
inline ::CDOTAMatchMetadata_Team_SubChallenge* CDOTAMatchMetadata_Team_EventData::add_sub_challenges_with_progress() {
  ::CDOTAMatchMetadata_Team_SubChallenge* _add = _internal_add_sub_challenges_with_progress();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_SubChallenge >&
CDOTAMatchMetadata_Team_EventData::sub_challenges_with_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.sub_challenges_with_progress)
  return sub_challenges_with_progress_;
}

// optional uint32 wager_winnings = 11;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_wager_winnings() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_wager_winnings() const {
  return _internal_has_wager_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_wager_winnings() {
  wager_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_wager_winnings() const {
  return wager_winnings_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::wager_winnings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.wager_winnings)
  return _internal_wager_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_wager_winnings(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  wager_winnings_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_wager_winnings(uint32_t value) {
  _internal_set_wager_winnings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.wager_winnings)
}

// optional bool cavern_challenge_active = 12;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_challenge_active() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_active() const {
  return _internal_has_cavern_challenge_active();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_active() {
  cavern_challenge_active_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_active() const {
  return cavern_challenge_active_;
}
inline bool CDOTAMatchMetadata_Team_EventData::cavern_challenge_active() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_active)
  return _internal_cavern_challenge_active();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_challenge_active(bool value) {
  _has_bits_[0] |= 0x00000200u;
  cavern_challenge_active_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_active(bool value) {
  _internal_set_cavern_challenge_active(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_challenge_active)
}

// optional uint32 cavern_challenge_winnings = 13;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_challenge_winnings() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_winnings() const {
  return _internal_has_cavern_challenge_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_winnings() {
  cavern_challenge_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_winnings() const {
  return cavern_challenge_winnings_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::cavern_challenge_winnings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_winnings)
  return _internal_cavern_challenge_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_challenge_winnings(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  cavern_challenge_winnings_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_winnings(uint32_t value) {
  _internal_set_cavern_challenge_winnings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_challenge_winnings)
}

// optional uint32 amount_wagered = 14;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_amount_wagered() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_amount_wagered() const {
  return _internal_has_amount_wagered();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_amount_wagered() {
  amount_wagered_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_amount_wagered() const {
  return amount_wagered_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::amount_wagered() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.amount_wagered)
  return _internal_amount_wagered();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_amount_wagered(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  amount_wagered_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_amount_wagered(uint32_t value) {
  _internal_set_amount_wagered(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.amount_wagered)
}

// optional uint32 team_wager_amount = 15;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_team_wager_amount() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_team_wager_amount() const {
  return _internal_has_team_wager_amount();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_team_wager_amount() {
  team_wager_amount_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_team_wager_amount() const {
  return team_wager_amount_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::team_wager_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.team_wager_amount)
  return _internal_team_wager_amount();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_team_wager_amount(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  team_wager_amount_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_team_wager_amount(uint32_t value) {
  _internal_set_team_wager_amount(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.team_wager_amount)
}

// optional uint32 periodic_point_adjustments = 16;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_periodic_point_adjustments() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_periodic_point_adjustments() const {
  return _internal_has_periodic_point_adjustments();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_periodic_point_adjustments() {
  periodic_point_adjustments_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_periodic_point_adjustments() const {
  return periodic_point_adjustments_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::periodic_point_adjustments() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.periodic_point_adjustments)
  return _internal_periodic_point_adjustments();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_periodic_point_adjustments(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  periodic_point_adjustments_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_periodic_point_adjustments(uint32_t value) {
  _internal_set_periodic_point_adjustments(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.periodic_point_adjustments)
}

// repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
inline int CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_map_results_size() const {
  return cavern_challenge_map_results_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::cavern_challenge_map_results_size() const {
  return _internal_cavern_challenge_map_results_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_map_results() {
  cavern_challenge_map_results_.Clear();
}
inline ::CDOTAMatchMetadata_Team_CavernChallengeResult* CDOTAMatchMetadata_Team_EventData::mutable_cavern_challenge_map_results(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return cavern_challenge_map_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >*
CDOTAMatchMetadata_Team_EventData::mutable_cavern_challenge_map_results() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return &cavern_challenge_map_results_;
}
inline const ::CDOTAMatchMetadata_Team_CavernChallengeResult& CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_map_results(int index) const {
  return cavern_challenge_map_results_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_CavernChallengeResult& CDOTAMatchMetadata_Team_EventData::cavern_challenge_map_results(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return _internal_cavern_challenge_map_results(index);
}
inline ::CDOTAMatchMetadata_Team_CavernChallengeResult* CDOTAMatchMetadata_Team_EventData::_internal_add_cavern_challenge_map_results() {
  return cavern_challenge_map_results_.Add();
}
inline ::CDOTAMatchMetadata_Team_CavernChallengeResult* CDOTAMatchMetadata_Team_EventData::add_cavern_challenge_map_results() {
  ::CDOTAMatchMetadata_Team_CavernChallengeResult* _add = _internal_add_cavern_challenge_map_results();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_CavernChallengeResult >&
CDOTAMatchMetadata_Team_EventData::cavern_challenge_map_results() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.cavern_challenge_map_results)
  return cavern_challenge_map_results_;
}

// optional uint32 cavern_challenge_plus_shard_winnings = 18;
inline bool CDOTAMatchMetadata_Team_EventData::_internal_has_cavern_challenge_plus_shard_winnings() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_EventData::has_cavern_challenge_plus_shard_winnings() const {
  return _internal_has_cavern_challenge_plus_shard_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_cavern_challenge_plus_shard_winnings() {
  cavern_challenge_plus_shard_winnings_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::_internal_cavern_challenge_plus_shard_winnings() const {
  return cavern_challenge_plus_shard_winnings_;
}
inline uint32_t CDOTAMatchMetadata_Team_EventData::cavern_challenge_plus_shard_winnings() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.cavern_challenge_plus_shard_winnings)
  return _internal_cavern_challenge_plus_shard_winnings();
}
inline void CDOTAMatchMetadata_Team_EventData::_internal_set_cavern_challenge_plus_shard_winnings(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  cavern_challenge_plus_shard_winnings_ = value;
}
inline void CDOTAMatchMetadata_Team_EventData::set_cavern_challenge_plus_shard_winnings(uint32_t value) {
  _internal_set_cavern_challenge_plus_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.EventData.cavern_challenge_plus_shard_winnings)
}

// repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
inline int CDOTAMatchMetadata_Team_EventData::_internal_actions_granted_size() const {
  return actions_granted_.size();
}
inline int CDOTAMatchMetadata_Team_EventData::actions_granted_size() const {
  return _internal_actions_granted_size();
}
inline void CDOTAMatchMetadata_Team_EventData::clear_actions_granted() {
  actions_granted_.Clear();
}
inline ::CDOTAMatchMetadata_Team_ActionGrant* CDOTAMatchMetadata_Team_EventData::mutable_actions_granted(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return actions_granted_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >*
CDOTAMatchMetadata_Team_EventData::mutable_actions_granted() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return &actions_granted_;
}
inline const ::CDOTAMatchMetadata_Team_ActionGrant& CDOTAMatchMetadata_Team_EventData::_internal_actions_granted(int index) const {
  return actions_granted_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_ActionGrant& CDOTAMatchMetadata_Team_EventData::actions_granted(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return _internal_actions_granted(index);
}
inline ::CDOTAMatchMetadata_Team_ActionGrant* CDOTAMatchMetadata_Team_EventData::_internal_add_actions_granted() {
  return actions_granted_.Add();
}
inline ::CDOTAMatchMetadata_Team_ActionGrant* CDOTAMatchMetadata_Team_EventData::add_actions_granted() {
  ::CDOTAMatchMetadata_Team_ActionGrant* _add = _internal_add_actions_granted();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ActionGrant >&
CDOTAMatchMetadata_Team_EventData::actions_granted() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.EventData.actions_granted)
  return actions_granted_;
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team_Player

// optional uint32 account_id = 1;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CDOTAMatchMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_account_id() const {
  return account_id_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.account_id)
  return _internal_account_id();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_account_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.account_id)
}

// repeated uint32 ability_upgrades = 2;
inline int CDOTAMatchMetadata_Team_Player::_internal_ability_upgrades_size() const {
  return ability_upgrades_.size();
}
inline int CDOTAMatchMetadata_Team_Player::ability_upgrades_size() const {
  return _internal_ability_upgrades_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_ability_upgrades(int index) const {
  return ability_upgrades_.Get(index);
}
inline uint32_t CDOTAMatchMetadata_Team_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return _internal_ability_upgrades(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_ability_upgrades(int index, uint32_t value) {
  ability_upgrades_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_ability_upgrades(uint32_t value) {
  ability_upgrades_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_ability_upgrades(uint32_t value) {
  _internal_add_ability_upgrades(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team_Player::_internal_ability_upgrades() const {
  return ability_upgrades_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return _internal_ability_upgrades();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_ability_upgrades() {
  return &ability_upgrades_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return _internal_mutable_ability_upgrades();
}

// optional uint32 player_slot = 3;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CDOTAMatchMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_player_slot() const {
  return player_slot_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.player_slot)
  return _internal_player_slot();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_player_slot(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  player_slot_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.player_slot)
}

// repeated .CSOEconItem equipped_econ_items = 4;
inline int CDOTAMatchMetadata_Team_Player::_internal_equipped_econ_items_size() const {
  return equipped_econ_items_.size();
}
inline int CDOTAMatchMetadata_Team_Player::equipped_econ_items_size() const {
  return _internal_equipped_econ_items_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_equipped_econ_items() {
  equipped_econ_items_.Clear();
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >*
CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return &equipped_econ_items_;
}
inline const ::CSOEconItem& CDOTAMatchMetadata_Team_Player::_internal_equipped_econ_items(int index) const {
  return equipped_econ_items_.Get(index);
}
inline const ::CSOEconItem& CDOTAMatchMetadata_Team_Player::equipped_econ_items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return _internal_equipped_econ_items(index);
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::_internal_add_equipped_econ_items() {
  return equipped_econ_items_.Add();
}
inline ::CSOEconItem* CDOTAMatchMetadata_Team_Player::add_equipped_econ_items() {
  ::CSOEconItem* _add = _internal_add_equipped_econ_items();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSOEconItem >&
CDOTAMatchMetadata_Team_Player::equipped_econ_items() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_;
}

// repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
inline int CDOTAMatchMetadata_Team_Player::_internal_kills_size() const {
  return kills_.size();
}
inline int CDOTAMatchMetadata_Team_Player::kills_size() const {
  return _internal_kills_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_kills() {
  kills_.Clear();
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >*
CDOTAMatchMetadata_Team_Player::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.kills)
  return &kills_;
}
inline const ::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::_internal_kills(int index) const {
  return kills_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::kills(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.kills)
  return _internal_kills(index);
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::_internal_add_kills() {
  return kills_.Add();
}
inline ::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::add_kills() {
  ::CDOTAMatchMetadata_Team_PlayerKill* _add = _internal_add_kills();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.kills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_PlayerKill >&
CDOTAMatchMetadata_Team_Player::kills() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.kills)
  return kills_;
}

// repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
inline int CDOTAMatchMetadata_Team_Player::_internal_items_size() const {
  return items_.size();
}
inline int CDOTAMatchMetadata_Team_Player::items_size() const {
  return _internal_items_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_items() {
  items_.Clear();
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >*
CDOTAMatchMetadata_Team_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.items)
  return &items_;
}
inline const ::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.items)
  return _internal_items(index);
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::_internal_add_items() {
  return items_.Add();
}
inline ::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::add_items() {
  ::CDOTAMatchMetadata_Team_ItemPurchase* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_ItemPurchase >&
CDOTAMatchMetadata_Team_Player::items() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.items)
  return items_;
}

// optional uint32 avg_kills_x16 = 7;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_kills_x16() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_kills_x16() const {
  return _internal_has_avg_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_kills_x16() {
  avg_kills_x16_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_avg_kills_x16() const {
  return avg_kills_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_kills_x16)
  return _internal_avg_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_kills_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  avg_kills_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_kills_x16(uint32_t value) {
  _internal_set_avg_kills_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 8;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_deaths_x16() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_deaths_x16() const {
  return _internal_has_avg_deaths_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_deaths_x16() {
  avg_deaths_x16_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_avg_deaths_x16() const {
  return avg_deaths_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
  return _internal_avg_deaths_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_deaths_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  avg_deaths_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_deaths_x16(uint32_t value) {
  _internal_set_avg_deaths_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 9;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_assists_x16() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_assists_x16() const {
  return _internal_has_avg_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_assists_x16() {
  avg_assists_x16_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_avg_assists_x16() const {
  return avg_assists_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_assists_x16)
  return _internal_avg_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_assists_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  avg_assists_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_assists_x16(uint32_t value) {
  _internal_set_avg_assists_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 10;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_gpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_gpm_x16() const {
  return _internal_has_avg_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_gpm_x16() {
  avg_gpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_avg_gpm_x16() const {
  return avg_gpm_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
  return _internal_avg_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_gpm_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  avg_gpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_gpm_x16(uint32_t value) {
  _internal_set_avg_gpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 11;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_xpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_xpm_x16() const {
  return _internal_has_avg_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_xpm_x16() {
  avg_xpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_avg_xpm_x16() const {
  return avg_xpm_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
  return _internal_avg_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_xpm_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  avg_xpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_xpm_x16(uint32_t value) {
  _internal_set_avg_xpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 12;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_kills_x16() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_kills_x16() const {
  return _internal_has_best_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_kills_x16() {
  best_kills_x16_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_best_kills_x16() const {
  return best_kills_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_kills_x16)
  return _internal_best_kills_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_kills_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  best_kills_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_kills_x16(uint32_t value) {
  _internal_set_best_kills_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_kills_x16)
}

// optional uint32 best_assists_x16 = 13;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_assists_x16() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_assists_x16() const {
  return _internal_has_best_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_assists_x16() {
  best_assists_x16_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_best_assists_x16() const {
  return best_assists_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_assists_x16)
  return _internal_best_assists_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_assists_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  best_assists_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_assists_x16(uint32_t value) {
  _internal_set_best_assists_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 14;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_gpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_gpm_x16() const {
  return _internal_has_best_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_gpm_x16() {
  best_gpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_best_gpm_x16() const {
  return best_gpm_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_gpm_x16)
  return _internal_best_gpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_gpm_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  best_gpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_gpm_x16(uint32_t value) {
  _internal_set_best_gpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 15;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_xpm_x16() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_xpm_x16() const {
  return _internal_has_best_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_xpm_x16() {
  best_xpm_x16_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_best_xpm_x16() const {
  return best_xpm_x16_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_xpm_x16)
  return _internal_best_xpm_x16();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_xpm_x16(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  best_xpm_x16_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_xpm_x16(uint32_t value) {
  _internal_set_best_xpm_x16(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_xpm_x16)
}

// optional uint32 win_streak = 16;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_win_streak() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_win_streak() const {
  return _internal_has_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::clear_win_streak() {
  win_streak_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_win_streak() const {
  return win_streak_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::win_streak() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.win_streak)
  return _internal_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_win_streak(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  win_streak_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_win_streak(uint32_t value) {
  _internal_set_win_streak(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.win_streak)
}

// optional uint32 best_win_streak = 17;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_best_win_streak() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_best_win_streak() const {
  return _internal_has_best_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::clear_best_win_streak() {
  best_win_streak_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_best_win_streak() const {
  return best_win_streak_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::best_win_streak() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.best_win_streak)
  return _internal_best_win_streak();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_best_win_streak(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  best_win_streak_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_best_win_streak(uint32_t value) {
  _internal_set_best_win_streak(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.best_win_streak)
}

// optional float fight_score = 18;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_fight_score() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_fight_score() const {
  return _internal_has_fight_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_fight_score() {
  fight_score_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_fight_score() const {
  return fight_score_;
}
inline float CDOTAMatchMetadata_Team_Player::fight_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.fight_score)
  return _internal_fight_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_fight_score(float value) {
  _has_bits_[0] |= 0x00002000u;
  fight_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_fight_score(float value) {
  _internal_set_fight_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.fight_score)
}

// optional float farm_score = 19;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_farm_score() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_farm_score() const {
  return _internal_has_farm_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_farm_score() {
  farm_score_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_farm_score() const {
  return farm_score_;
}
inline float CDOTAMatchMetadata_Team_Player::farm_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.farm_score)
  return _internal_farm_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_farm_score(float value) {
  _has_bits_[0] |= 0x00004000u;
  farm_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_farm_score(float value) {
  _internal_set_farm_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.farm_score)
}

// optional float support_score = 20;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_support_score() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_support_score() const {
  return _internal_has_support_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_support_score() {
  support_score_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_support_score() const {
  return support_score_;
}
inline float CDOTAMatchMetadata_Team_Player::support_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.support_score)
  return _internal_support_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_support_score(float value) {
  _has_bits_[0] |= 0x00008000u;
  support_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_support_score(float value) {
  _internal_set_support_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.support_score)
}

// optional float push_score = 21;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_push_score() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_push_score() const {
  return _internal_has_push_score();
}
inline void CDOTAMatchMetadata_Team_Player::clear_push_score() {
  push_score_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_push_score() const {
  return push_score_;
}
inline float CDOTAMatchMetadata_Team_Player::push_score() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.push_score)
  return _internal_push_score();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_push_score(float value) {
  _has_bits_[0] |= 0x00010000u;
  push_score_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_push_score(float value) {
  _internal_set_push_score(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.push_score)
}

// repeated uint32 level_up_times = 22;
inline int CDOTAMatchMetadata_Team_Player::_internal_level_up_times_size() const {
  return level_up_times_.size();
}
inline int CDOTAMatchMetadata_Team_Player::level_up_times_size() const {
  return _internal_level_up_times_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_level_up_times() {
  level_up_times_.Clear();
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_level_up_times(int index) const {
  return level_up_times_.Get(index);
}
inline uint32_t CDOTAMatchMetadata_Team_Player::level_up_times(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.level_up_times)
  return _internal_level_up_times(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_level_up_times(int index, uint32_t value) {
  level_up_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_level_up_times(uint32_t value) {
  level_up_times_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_level_up_times(uint32_t value) {
  _internal_add_level_up_times(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.level_up_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team_Player::_internal_level_up_times() const {
  return level_up_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team_Player::level_up_times() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.level_up_times)
  return _internal_level_up_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_level_up_times() {
  return &level_up_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team_Player::mutable_level_up_times() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.level_up_times)
  return _internal_mutable_level_up_times();
}

// repeated float graph_net_worth = 23;
inline int CDOTAMatchMetadata_Team_Player::_internal_graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline int CDOTAMatchMetadata_Team_Player::graph_net_worth_size() const {
  return _internal_graph_net_worth_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team_Player::_internal_graph_net_worth(int index) const {
  return graph_net_worth_.Get(index);
}
inline float CDOTAMatchMetadata_Team_Player::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return _internal_graph_net_worth(index);
}
inline void CDOTAMatchMetadata_Team_Player::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team_Player::_internal_add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
}
inline void CDOTAMatchMetadata_Team_Player::add_graph_net_worth(float value) {
  _internal_add_graph_net_worth(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::_internal_graph_net_worth() const {
  return graph_net_worth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return _internal_graph_net_worth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::_internal_mutable_graph_net_worth() {
  return &graph_net_worth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return _internal_mutable_graph_net_worth();
}

// repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
inline int CDOTAMatchMetadata_Team_Player::_internal_inventory_snapshot_size() const {
  return inventory_snapshot_.size();
}
inline int CDOTAMatchMetadata_Team_Player::inventory_snapshot_size() const {
  return _internal_inventory_snapshot_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_inventory_snapshot() {
  inventory_snapshot_.Clear();
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >*
CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return &inventory_snapshot_;
}
inline const ::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::_internal_inventory_snapshot(int index) const {
  return inventory_snapshot_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::inventory_snapshot(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return _internal_inventory_snapshot(index);
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::_internal_add_inventory_snapshot() {
  return inventory_snapshot_.Add();
}
inline ::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::add_inventory_snapshot() {
  ::CDOTAMatchMetadata_Team_InventorySnapshot* _add = _internal_add_inventory_snapshot();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_InventorySnapshot >&
CDOTAMatchMetadata_Team_Player::inventory_snapshot() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_;
}

// optional bool avg_stats_calibrated = 25;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_avg_stats_calibrated() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_avg_stats_calibrated() const {
  return _internal_has_avg_stats_calibrated();
}
inline void CDOTAMatchMetadata_Team_Player::clear_avg_stats_calibrated() {
  avg_stats_calibrated_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CDOTAMatchMetadata_Team_Player::_internal_avg_stats_calibrated() const {
  return avg_stats_calibrated_;
}
inline bool CDOTAMatchMetadata_Team_Player::avg_stats_calibrated() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
  return _internal_avg_stats_calibrated();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_avg_stats_calibrated(bool value) {
  _has_bits_[0] |= 0x00020000u;
  avg_stats_calibrated_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_avg_stats_calibrated(bool value) {
  _internal_set_avg_stats_calibrated(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
}

// repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
inline int CDOTAMatchMetadata_Team_Player::_internal_auto_style_criteria_size() const {
  return auto_style_criteria_.size();
}
inline int CDOTAMatchMetadata_Team_Player::auto_style_criteria_size() const {
  return _internal_auto_style_criteria_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_auto_style_criteria() {
  auto_style_criteria_.Clear();
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return &auto_style_criteria_;
}
inline const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::_internal_auto_style_criteria(int index) const {
  return auto_style_criteria_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::auto_style_criteria(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return _internal_auto_style_criteria(index);
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::_internal_add_auto_style_criteria() {
  return auto_style_criteria_.Add();
}
inline ::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::add_auto_style_criteria() {
  ::CDOTAMatchMetadata_Team_AutoStyleCriteria* _add = _internal_add_auto_style_criteria();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
CDOTAMatchMetadata_Team_Player::auto_style_criteria() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_;
}

// repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
inline int CDOTAMatchMetadata_Team_Player::_internal_event_data_size() const {
  return event_data_.size();
}
inline int CDOTAMatchMetadata_Team_Player::event_data_size() const {
  return _internal_event_data_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_event_data() {
  event_data_.Clear();
}
inline ::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::mutable_event_data(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >*
CDOTAMatchMetadata_Team_Player::mutable_event_data() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.event_data)
  return &event_data_;
}
inline const ::CDOTAMatchMetadata_Team_EventData& CDOTAMatchMetadata_Team_Player::_internal_event_data(int index) const {
  return event_data_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_EventData& CDOTAMatchMetadata_Team_Player::event_data(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.event_data)
  return _internal_event_data(index);
}
inline ::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::_internal_add_event_data() {
  return event_data_.Add();
}
inline ::CDOTAMatchMetadata_Team_EventData* CDOTAMatchMetadata_Team_Player::add_event_data() {
  ::CDOTAMatchMetadata_Team_EventData* _add = _internal_add_event_data();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.event_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_EventData >&
CDOTAMatchMetadata_Team_Player::event_data() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.event_data)
  return event_data_;
}

// repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
inline int CDOTAMatchMetadata_Team_Player::_internal_strange_gem_progress_size() const {
  return strange_gem_progress_.size();
}
inline int CDOTAMatchMetadata_Team_Player::strange_gem_progress_size() const {
  return _internal_strange_gem_progress_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_strange_gem_progress() {
  strange_gem_progress_.Clear();
}
inline ::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::mutable_strange_gem_progress(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >*
CDOTAMatchMetadata_Team_Player::mutable_strange_gem_progress() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return &strange_gem_progress_;
}
inline const ::CDOTAMatchMetadata_Team_StrangeGemProgress& CDOTAMatchMetadata_Team_Player::_internal_strange_gem_progress(int index) const {
  return strange_gem_progress_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_StrangeGemProgress& CDOTAMatchMetadata_Team_Player::strange_gem_progress(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return _internal_strange_gem_progress(index);
}
inline ::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::_internal_add_strange_gem_progress() {
  return strange_gem_progress_.Add();
}
inline ::CDOTAMatchMetadata_Team_StrangeGemProgress* CDOTAMatchMetadata_Team_Player::add_strange_gem_progress() {
  ::CDOTAMatchMetadata_Team_StrangeGemProgress* _add = _internal_add_strange_gem_progress();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_StrangeGemProgress >&
CDOTAMatchMetadata_Team_Player::strange_gem_progress() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.strange_gem_progress)
  return strange_gem_progress_;
}

// optional uint32 hero_xp = 31;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_hero_xp() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_hero_xp() const {
  return _internal_has_hero_xp();
}
inline void CDOTAMatchMetadata_Team_Player::clear_hero_xp() {
  hero_xp_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_hero_xp() const {
  return hero_xp_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::hero_xp() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.hero_xp)
  return _internal_hero_xp();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_hero_xp(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  hero_xp_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_hero_xp(uint32_t value) {
  _internal_set_hero_xp(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.hero_xp)
}

// optional uint32 camps_stacked = 32;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_camps_stacked() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CDOTAMatchMetadata_Team_Player::clear_camps_stacked() {
  camps_stacked_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_camps_stacked() const {
  return camps_stacked_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.camps_stacked)
  return _internal_camps_stacked();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_camps_stacked(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  camps_stacked_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_camps_stacked(uint32_t value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.camps_stacked)
}

// repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
inline int CDOTAMatchMetadata_Team_Player::_internal_victory_prediction_size() const {
  return victory_prediction_.size();
}
inline int CDOTAMatchMetadata_Team_Player::victory_prediction_size() const {
  return _internal_victory_prediction_size();
}
inline void CDOTAMatchMetadata_Team_Player::clear_victory_prediction() {
  victory_prediction_.Clear();
}
inline ::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::mutable_victory_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >*
CDOTAMatchMetadata_Team_Player::mutable_victory_prediction() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return &victory_prediction_;
}
inline const ::CDOTAMatchMetadata_Team_VictoryPrediction& CDOTAMatchMetadata_Team_Player::_internal_victory_prediction(int index) const {
  return victory_prediction_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_VictoryPrediction& CDOTAMatchMetadata_Team_Player::victory_prediction(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return _internal_victory_prediction(index);
}
inline ::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::_internal_add_victory_prediction() {
  return victory_prediction_.Add();
}
inline ::CDOTAMatchMetadata_Team_VictoryPrediction* CDOTAMatchMetadata_Team_Player::add_victory_prediction() {
  ::CDOTAMatchMetadata_Team_VictoryPrediction* _add = _internal_add_victory_prediction();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_VictoryPrediction >&
CDOTAMatchMetadata_Team_Player::victory_prediction() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.Player.victory_prediction)
  return victory_prediction_;
}

// optional uint32 lane_selection_flags = 34;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CDOTAMatchMetadata_Team_Player::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_lane_selection_flags(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  lane_selection_flags_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_lane_selection_flags(uint32_t value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.lane_selection_flags)
}

// optional uint32 rampages = 35;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_rampages() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_rampages() const {
  return _internal_has_rampages();
}
inline void CDOTAMatchMetadata_Team_Player::clear_rampages() {
  rampages_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_rampages() const {
  return rampages_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::rampages() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.rampages)
  return _internal_rampages();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_rampages(uint32_t value) {
  _has_bits_[0] |= 0x00200000u;
  rampages_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_rampages(uint32_t value) {
  _internal_set_rampages(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.rampages)
}

// optional uint32 triple_kills = 36;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_triple_kills() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_triple_kills() const {
  return _internal_has_triple_kills();
}
inline void CDOTAMatchMetadata_Team_Player::clear_triple_kills() {
  triple_kills_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_triple_kills() const {
  return triple_kills_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::triple_kills() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.triple_kills)
  return _internal_triple_kills();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_triple_kills(uint32_t value) {
  _has_bits_[0] |= 0x00400000u;
  triple_kills_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_triple_kills(uint32_t value) {
  _internal_set_triple_kills(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.triple_kills)
}

// optional uint32 aegis_snatched = 37;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_aegis_snatched() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_aegis_snatched() const {
  return _internal_has_aegis_snatched();
}
inline void CDOTAMatchMetadata_Team_Player::clear_aegis_snatched() {
  aegis_snatched_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_aegis_snatched() const {
  return aegis_snatched_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::aegis_snatched() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.aegis_snatched)
  return _internal_aegis_snatched();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_aegis_snatched(uint32_t value) {
  _has_bits_[0] |= 0x00800000u;
  aegis_snatched_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_aegis_snatched(uint32_t value) {
  _internal_set_aegis_snatched(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.aegis_snatched)
}

// optional uint32 rapiers_purchased = 38;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_rapiers_purchased() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_rapiers_purchased() const {
  return _internal_has_rapiers_purchased();
}
inline void CDOTAMatchMetadata_Team_Player::clear_rapiers_purchased() {
  rapiers_purchased_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_rapiers_purchased() const {
  return rapiers_purchased_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::rapiers_purchased() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.rapiers_purchased)
  return _internal_rapiers_purchased();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_rapiers_purchased(uint32_t value) {
  _has_bits_[0] |= 0x01000000u;
  rapiers_purchased_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_rapiers_purchased(uint32_t value) {
  _internal_set_rapiers_purchased(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.rapiers_purchased)
}

// optional uint32 couriers_killed = 39;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_couriers_killed() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_couriers_killed() const {
  return _internal_has_couriers_killed();
}
inline void CDOTAMatchMetadata_Team_Player::clear_couriers_killed() {
  couriers_killed_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_couriers_killed() const {
  return couriers_killed_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::couriers_killed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.couriers_killed)
  return _internal_couriers_killed();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_couriers_killed(uint32_t value) {
  _has_bits_[0] |= 0x02000000u;
  couriers_killed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_couriers_killed(uint32_t value) {
  _internal_set_couriers_killed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.couriers_killed)
}

// optional uint32 net_worth_rank = 40;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_net_worth_rank() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_net_worth_rank() const {
  return _internal_has_net_worth_rank();
}
inline void CDOTAMatchMetadata_Team_Player::clear_net_worth_rank() {
  net_worth_rank_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_net_worth_rank() const {
  return net_worth_rank_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::net_worth_rank() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.net_worth_rank)
  return _internal_net_worth_rank();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_net_worth_rank(uint32_t value) {
  _has_bits_[0] |= 0x04000000u;
  net_worth_rank_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_net_worth_rank(uint32_t value) {
  _internal_set_net_worth_rank(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.net_worth_rank)
}

// optional uint32 support_gold_spent = 41;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_support_gold_spent() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_support_gold_spent() const {
  return _internal_has_support_gold_spent();
}
inline void CDOTAMatchMetadata_Team_Player::clear_support_gold_spent() {
  support_gold_spent_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_support_gold_spent() const {
  return support_gold_spent_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::support_gold_spent() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.support_gold_spent)
  return _internal_support_gold_spent();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_support_gold_spent(uint32_t value) {
  _has_bits_[0] |= 0x08000000u;
  support_gold_spent_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_support_gold_spent(uint32_t value) {
  _internal_set_support_gold_spent(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.support_gold_spent)
}

// optional uint32 observer_wards_placed = 42;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_observer_wards_placed() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_observer_wards_placed() const {
  return _internal_has_observer_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::clear_observer_wards_placed() {
  observer_wards_placed_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_observer_wards_placed() const {
  return observer_wards_placed_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::observer_wards_placed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.observer_wards_placed)
  return _internal_observer_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_observer_wards_placed(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  observer_wards_placed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_observer_wards_placed(uint32_t value) {
  _internal_set_observer_wards_placed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.observer_wards_placed)
}

// optional uint32 sentry_wards_placed = 43;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_sentry_wards_placed() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_sentry_wards_placed() const {
  return _internal_has_sentry_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::clear_sentry_wards_placed() {
  sentry_wards_placed_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_sentry_wards_placed() const {
  return sentry_wards_placed_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::sentry_wards_placed() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.sentry_wards_placed)
  return _internal_sentry_wards_placed();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_sentry_wards_placed(uint32_t value) {
  _has_bits_[0] |= 0x20000000u;
  sentry_wards_placed_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_sentry_wards_placed(uint32_t value) {
  _internal_set_sentry_wards_placed(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.sentry_wards_placed)
}

// optional uint32 wards_dewarded = 44;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_wards_dewarded() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_wards_dewarded() const {
  return _internal_has_wards_dewarded();
}
inline void CDOTAMatchMetadata_Team_Player::clear_wards_dewarded() {
  wards_dewarded_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::_internal_wards_dewarded() const {
  return wards_dewarded_;
}
inline uint32_t CDOTAMatchMetadata_Team_Player::wards_dewarded() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.wards_dewarded)
  return _internal_wards_dewarded();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_wards_dewarded(uint32_t value) {
  _has_bits_[0] |= 0x40000000u;
  wards_dewarded_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_wards_dewarded(uint32_t value) {
  _internal_set_wards_dewarded(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.wards_dewarded)
}

// optional float stun_duration = 45;
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_stun_duration() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_stun_duration() const {
  return _internal_has_stun_duration();
}
inline void CDOTAMatchMetadata_Team_Player::clear_stun_duration() {
  stun_duration_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float CDOTAMatchMetadata_Team_Player::_internal_stun_duration() const {
  return stun_duration_;
}
inline float CDOTAMatchMetadata_Team_Player::stun_duration() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.stun_duration)
  return _internal_stun_duration();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_stun_duration(float value) {
  _has_bits_[0] |= 0x80000000u;
  stun_duration_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_stun_duration(float value) {
  _internal_set_stun_duration(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.stun_duration)
}

// optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
inline bool CDOTAMatchMetadata_Team_Player::_internal_has_rank_mmr_boost_type() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team_Player::has_rank_mmr_boost_type() const {
  return _internal_has_rank_mmr_boost_type();
}
inline void CDOTAMatchMetadata_Team_Player::clear_rank_mmr_boost_type() {
  rank_mmr_boost_type_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::EDOTAMMRBoostType CDOTAMatchMetadata_Team_Player::_internal_rank_mmr_boost_type() const {
  return static_cast< ::EDOTAMMRBoostType >(rank_mmr_boost_type_);
}
inline ::EDOTAMMRBoostType CDOTAMatchMetadata_Team_Player::rank_mmr_boost_type() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.Player.rank_mmr_boost_type)
  return _internal_rank_mmr_boost_type();
}
inline void CDOTAMatchMetadata_Team_Player::_internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  assert(::EDOTAMMRBoostType_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  rank_mmr_boost_type_ = value;
}
inline void CDOTAMatchMetadata_Team_Player::set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  _internal_set_rank_mmr_boost_type(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.Player.rank_mmr_boost_type)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata_Team

// optional uint32 dota_team = 1;
inline bool CDOTAMatchMetadata_Team::_internal_has_dota_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_dota_team() const {
  return _internal_has_dota_team();
}
inline void CDOTAMatchMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAMatchMetadata_Team::_internal_dota_team() const {
  return dota_team_;
}
inline uint32_t CDOTAMatchMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.dota_team)
  return _internal_dota_team();
}
inline void CDOTAMatchMetadata_Team::_internal_set_dota_team(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  dota_team_ = value;
}
inline void CDOTAMatchMetadata_Team::set_dota_team(uint32_t value) {
  _internal_set_dota_team(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.dota_team)
}

// repeated .CDOTAMatchMetadata.Team.Player players = 2;
inline int CDOTAMatchMetadata_Team::_internal_players_size() const {
  return players_.size();
}
inline int CDOTAMatchMetadata_Team::players_size() const {
  return _internal_players_size();
}
inline void CDOTAMatchMetadata_Team::clear_players() {
  players_.Clear();
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.Team.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >*
CDOTAMatchMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.players)
  return &players_;
}
inline const ::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.players)
  return _internal_players(index);
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::_internal_add_players() {
  return players_.Add();
}
inline ::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::add_players() {
  ::CDOTAMatchMetadata_Team_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team_Player >&
CDOTAMatchMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.players)
  return players_;
}

// repeated float graph_experience = 3;
inline int CDOTAMatchMetadata_Team::_internal_graph_experience_size() const {
  return graph_experience_.size();
}
inline int CDOTAMatchMetadata_Team::graph_experience_size() const {
  return _internal_graph_experience_size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_experience() {
  graph_experience_.Clear();
}
inline float CDOTAMatchMetadata_Team::_internal_graph_experience(int index) const {
  return graph_experience_.Get(index);
}
inline float CDOTAMatchMetadata_Team::graph_experience(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_experience)
  return _internal_graph_experience(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_experience(int index, float value) {
  graph_experience_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_experience)
}
inline void CDOTAMatchMetadata_Team::_internal_add_graph_experience(float value) {
  graph_experience_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_graph_experience(float value) {
  _internal_add_graph_experience(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_experience)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::_internal_graph_experience() const {
  return graph_experience_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_experience() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_experience)
  return _internal_graph_experience();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::_internal_mutable_graph_experience() {
  return &graph_experience_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_experience() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_experience)
  return _internal_mutable_graph_experience();
}

// repeated float graph_gold_earned = 4;
inline int CDOTAMatchMetadata_Team::_internal_graph_gold_earned_size() const {
  return graph_gold_earned_.size();
}
inline int CDOTAMatchMetadata_Team::graph_gold_earned_size() const {
  return _internal_graph_gold_earned_size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_gold_earned() {
  graph_gold_earned_.Clear();
}
inline float CDOTAMatchMetadata_Team::_internal_graph_gold_earned(int index) const {
  return graph_gold_earned_.Get(index);
}
inline float CDOTAMatchMetadata_Team::graph_gold_earned(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_gold_earned)
  return _internal_graph_gold_earned(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_gold_earned(int index, float value) {
  graph_gold_earned_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline void CDOTAMatchMetadata_Team::_internal_add_graph_gold_earned(float value) {
  graph_gold_earned_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_graph_gold_earned(float value) {
  _internal_add_graph_gold_earned(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_gold_earned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::_internal_graph_gold_earned() const {
  return graph_gold_earned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_gold_earned() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_gold_earned)
  return _internal_graph_gold_earned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::_internal_mutable_graph_gold_earned() {
  return &graph_gold_earned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_gold_earned() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_gold_earned)
  return _internal_mutable_graph_gold_earned();
}

// repeated float graph_net_worth = 5;
inline int CDOTAMatchMetadata_Team::_internal_graph_net_worth_size() const {
  return graph_net_worth_.size();
}
inline int CDOTAMatchMetadata_Team::graph_net_worth_size() const {
  return _internal_graph_net_worth_size();
}
inline void CDOTAMatchMetadata_Team::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
inline float CDOTAMatchMetadata_Team::_internal_graph_net_worth(int index) const {
  return graph_net_worth_.Get(index);
}
inline float CDOTAMatchMetadata_Team::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.graph_net_worth)
  return _internal_graph_net_worth(index);
}
inline void CDOTAMatchMetadata_Team::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.graph_net_worth)
}
inline void CDOTAMatchMetadata_Team::_internal_add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_graph_net_worth(float value) {
  _internal_add_graph_net_worth(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.graph_net_worth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::_internal_graph_net_worth() const {
  return graph_net_worth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.graph_net_worth)
  return _internal_graph_net_worth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::_internal_mutable_graph_net_worth() {
  return &graph_net_worth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.graph_net_worth)
  return _internal_mutable_graph_net_worth();
}

// optional bool cm_first_pick = 6;
inline bool CDOTAMatchMetadata_Team::_internal_has_cm_first_pick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_cm_first_pick() const {
  return _internal_has_cm_first_pick();
}
inline void CDOTAMatchMetadata_Team::clear_cm_first_pick() {
  cm_first_pick_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAMatchMetadata_Team::_internal_cm_first_pick() const {
  return cm_first_pick_;
}
inline bool CDOTAMatchMetadata_Team::cm_first_pick() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_first_pick)
  return _internal_cm_first_pick();
}
inline void CDOTAMatchMetadata_Team::_internal_set_cm_first_pick(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cm_first_pick_ = value;
}
inline void CDOTAMatchMetadata_Team::set_cm_first_pick(bool value) {
  _internal_set_cm_first_pick(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_first_pick)
}

// optional uint32 cm_captain_player_id = 7;
inline bool CDOTAMatchMetadata_Team::_internal_has_cm_captain_player_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_cm_captain_player_id() const {
  return _internal_has_cm_captain_player_id();
}
inline void CDOTAMatchMetadata_Team::clear_cm_captain_player_id() {
  cm_captain_player_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAMatchMetadata_Team::_internal_cm_captain_player_id() const {
  return cm_captain_player_id_;
}
inline uint32_t CDOTAMatchMetadata_Team::cm_captain_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_captain_player_id)
  return _internal_cm_captain_player_id();
}
inline void CDOTAMatchMetadata_Team::_internal_set_cm_captain_player_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  cm_captain_player_id_ = value;
}
inline void CDOTAMatchMetadata_Team::set_cm_captain_player_id(uint32_t value) {
  _internal_set_cm_captain_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_captain_player_id)
}

// repeated uint32 cm_bans = 8;
inline int CDOTAMatchMetadata_Team::_internal_cm_bans_size() const {
  return cm_bans_.size();
}
inline int CDOTAMatchMetadata_Team::cm_bans_size() const {
  return _internal_cm_bans_size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_bans() {
  cm_bans_.Clear();
}
inline uint32_t CDOTAMatchMetadata_Team::_internal_cm_bans(int index) const {
  return cm_bans_.Get(index);
}
inline uint32_t CDOTAMatchMetadata_Team::cm_bans(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_bans)
  return _internal_cm_bans(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_bans(int index, uint32_t value) {
  cm_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_bans)
}
inline void CDOTAMatchMetadata_Team::_internal_add_cm_bans(uint32_t value) {
  cm_bans_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_cm_bans(uint32_t value) {
  _internal_add_cm_bans(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.cm_bans)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team::_internal_cm_bans() const {
  return cm_bans_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team::cm_bans() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.cm_bans)
  return _internal_cm_bans();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team::_internal_mutable_cm_bans() {
  return &cm_bans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team::mutable_cm_bans() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.cm_bans)
  return _internal_mutable_cm_bans();
}

// repeated uint32 cm_picks = 9;
inline int CDOTAMatchMetadata_Team::_internal_cm_picks_size() const {
  return cm_picks_.size();
}
inline int CDOTAMatchMetadata_Team::cm_picks_size() const {
  return _internal_cm_picks_size();
}
inline void CDOTAMatchMetadata_Team::clear_cm_picks() {
  cm_picks_.Clear();
}
inline uint32_t CDOTAMatchMetadata_Team::_internal_cm_picks(int index) const {
  return cm_picks_.Get(index);
}
inline uint32_t CDOTAMatchMetadata_Team::cm_picks(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_picks)
  return _internal_cm_picks(index);
}
inline void CDOTAMatchMetadata_Team::set_cm_picks(int index, uint32_t value) {
  cm_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_picks)
}
inline void CDOTAMatchMetadata_Team::_internal_add_cm_picks(uint32_t value) {
  cm_picks_.Add(value);
}
inline void CDOTAMatchMetadata_Team::add_cm_picks(uint32_t value) {
  _internal_add_cm_picks(value);
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.Team.cm_picks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team::_internal_cm_picks() const {
  return cm_picks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAMatchMetadata_Team::cm_picks() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.Team.cm_picks)
  return _internal_cm_picks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team::_internal_mutable_cm_picks() {
  return &cm_picks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAMatchMetadata_Team::mutable_cm_picks() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.Team.cm_picks)
  return _internal_mutable_cm_picks();
}

// optional uint32 cm_penalty = 10;
inline bool CDOTAMatchMetadata_Team::_internal_has_cm_penalty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata_Team::has_cm_penalty() const {
  return _internal_has_cm_penalty();
}
inline void CDOTAMatchMetadata_Team::clear_cm_penalty() {
  cm_penalty_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAMatchMetadata_Team::_internal_cm_penalty() const {
  return cm_penalty_;
}
inline uint32_t CDOTAMatchMetadata_Team::cm_penalty() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.Team.cm_penalty)
  return _internal_cm_penalty();
}
inline void CDOTAMatchMetadata_Team::_internal_set_cm_penalty(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cm_penalty_ = value;
}
inline void CDOTAMatchMetadata_Team::set_cm_penalty(uint32_t value) {
  _internal_set_cm_penalty(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.Team.cm_penalty)
}

// -------------------------------------------------------------------

// CDOTAMatchMetadata

// repeated .CDOTAMatchMetadata.Team teams = 1;
inline int CDOTAMatchMetadata::_internal_teams_size() const {
  return teams_.size();
}
inline int CDOTAMatchMetadata::teams_size() const {
  return _internal_teams_size();
}
inline void CDOTAMatchMetadata::clear_teams() {
  teams_.Clear();
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >*
CDOTAMatchMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.teams)
  return &teams_;
}
inline const ::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.teams)
  return _internal_teams(index);
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::_internal_add_teams() {
  return teams_.Add();
}
inline ::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::add_teams() {
  ::CDOTAMatchMetadata_Team* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMatchMetadata_Team >&
CDOTAMatchMetadata::teams() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.teams)
  return teams_;
}

// repeated .CLobbyTimedRewardDetails item_rewards = 2;
inline int CDOTAMatchMetadata::_internal_item_rewards_size() const {
  return item_rewards_.size();
}
inline int CDOTAMatchMetadata::item_rewards_size() const {
  return _internal_item_rewards_size();
}
inline void CDOTAMatchMetadata::clear_item_rewards() {
  item_rewards_.Clear();
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::mutable_item_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CDOTAMatchMetadata::mutable_item_rewards() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.item_rewards)
  return &item_rewards_;
}
inline const ::CLobbyTimedRewardDetails& CDOTAMatchMetadata::_internal_item_rewards(int index) const {
  return item_rewards_.Get(index);
}
inline const ::CLobbyTimedRewardDetails& CDOTAMatchMetadata::item_rewards(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.item_rewards)
  return _internal_item_rewards(index);
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::_internal_add_item_rewards() {
  return item_rewards_.Add();
}
inline ::CLobbyTimedRewardDetails* CDOTAMatchMetadata::add_item_rewards() {
  ::CLobbyTimedRewardDetails* _add = _internal_add_item_rewards();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.item_rewards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CDOTAMatchMetadata::item_rewards() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.item_rewards)
  return item_rewards_;
}

// optional fixed64 lobby_id = 3;
inline bool CDOTAMatchMetadata::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CDOTAMatchMetadata::clear_lobby_id() {
  lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CDOTAMatchMetadata::_internal_lobby_id() const {
  return lobby_id_;
}
inline uint64_t CDOTAMatchMetadata::lobby_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.lobby_id)
  return _internal_lobby_id();
}
inline void CDOTAMatchMetadata::_internal_set_lobby_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  lobby_id_ = value;
}
inline void CDOTAMatchMetadata::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.lobby_id)
}

// optional fixed64 report_until_time = 4;
inline bool CDOTAMatchMetadata::_internal_has_report_until_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_report_until_time() const {
  return _internal_has_report_until_time();
}
inline void CDOTAMatchMetadata::clear_report_until_time() {
  report_until_time_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CDOTAMatchMetadata::_internal_report_until_time() const {
  return report_until_time_;
}
inline uint64_t CDOTAMatchMetadata::report_until_time() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.report_until_time)
  return _internal_report_until_time();
}
inline void CDOTAMatchMetadata::_internal_set_report_until_time(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  report_until_time_ = value;
}
inline void CDOTAMatchMetadata::set_report_until_time(uint64_t value) {
  _internal_set_report_until_time(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.report_until_time)
}

// optional bytes event_game_custom_table = 5;
inline bool CDOTAMatchMetadata::_internal_has_event_game_custom_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_event_game_custom_table() const {
  return _internal_has_event_game_custom_table();
}
inline void CDOTAMatchMetadata::clear_event_game_custom_table() {
  event_game_custom_table_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAMatchMetadata::event_game_custom_table() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.event_game_custom_table)
  return _internal_event_game_custom_table();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAMatchMetadata::set_event_game_custom_table(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 event_game_custom_table_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.event_game_custom_table)
}
inline std::string* CDOTAMatchMetadata::mutable_event_game_custom_table() {
  std::string* _s = _internal_mutable_event_game_custom_table();
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.event_game_custom_table)
  return _s;
}
inline const std::string& CDOTAMatchMetadata::_internal_event_game_custom_table() const {
  return event_game_custom_table_.Get();
}
inline void CDOTAMatchMetadata::_internal_set_event_game_custom_table(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDOTAMatchMetadata::_internal_mutable_event_game_custom_table() {
  _has_bits_[0] |= 0x00000001u;
  return event_game_custom_table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDOTAMatchMetadata::release_event_game_custom_table() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadata.event_game_custom_table)
  if (!_internal_has_event_game_custom_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = event_game_custom_table_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_game_custom_table_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    event_game_custom_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAMatchMetadata::set_allocated_event_game_custom_table(std::string* event_game_custom_table) {
  if (event_game_custom_table != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_game_custom_table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_game_custom_table,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_game_custom_table_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    event_game_custom_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadata.event_game_custom_table)
}

// optional uint32 primary_event_id = 6;
inline bool CDOTAMatchMetadata::_internal_has_primary_event_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAMatchMetadata::has_primary_event_id() const {
  return _internal_has_primary_event_id();
}
inline void CDOTAMatchMetadata::clear_primary_event_id() {
  primary_event_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAMatchMetadata::_internal_primary_event_id() const {
  return primary_event_id_;
}
inline uint32_t CDOTAMatchMetadata::primary_event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.primary_event_id)
  return _internal_primary_event_id();
}
inline void CDOTAMatchMetadata::_internal_set_primary_event_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  primary_event_id_ = value;
}
inline void CDOTAMatchMetadata::set_primary_event_id(uint32_t value) {
  _internal_set_primary_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAMatchMetadata.primary_event_id)
}

// repeated .CMsgMatchTips match_tips = 7;
inline int CDOTAMatchMetadata::_internal_match_tips_size() const {
  return match_tips_.size();
}
inline int CDOTAMatchMetadata::match_tips_size() const {
  return _internal_match_tips_size();
}
inline void CDOTAMatchMetadata::clear_match_tips() {
  match_tips_.Clear();
}
inline ::CMsgMatchTips* CDOTAMatchMetadata::mutable_match_tips(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.match_tips)
  return match_tips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >*
CDOTAMatchMetadata::mutable_match_tips() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAMatchMetadata.match_tips)
  return &match_tips_;
}
inline const ::CMsgMatchTips& CDOTAMatchMetadata::_internal_match_tips(int index) const {
  return match_tips_.Get(index);
}
inline const ::CMsgMatchTips& CDOTAMatchMetadata::match_tips(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.match_tips)
  return _internal_match_tips(index);
}
inline ::CMsgMatchTips* CDOTAMatchMetadata::_internal_add_match_tips() {
  return match_tips_.Add();
}
inline ::CMsgMatchTips* CDOTAMatchMetadata::add_match_tips() {
  ::CMsgMatchTips* _add = _internal_add_match_tips();
  // @@protoc_insertion_point(field_add:CDOTAMatchMetadata.match_tips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchTips >&
CDOTAMatchMetadata::match_tips() const {
  // @@protoc_insertion_point(field_list:CDOTAMatchMetadata.match_tips)
  return match_tips_;
}

// optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
inline bool CDOTAMatchMetadata::_internal_has_matchmaking_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || matchmaking_stats_ != nullptr);
  return value;
}
inline bool CDOTAMatchMetadata::has_matchmaking_stats() const {
  return _internal_has_matchmaking_stats();
}
inline void CDOTAMatchMetadata::clear_matchmaking_stats() {
  if (matchmaking_stats_ != nullptr) matchmaking_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgMatchMatchmakingStats& CDOTAMatchMetadata::_internal_matchmaking_stats() const {
  const ::CMsgMatchMatchmakingStats* p = matchmaking_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgMatchMatchmakingStats&>(
      ::_CMsgMatchMatchmakingStats_default_instance_);
}
inline const ::CMsgMatchMatchmakingStats& CDOTAMatchMetadata::matchmaking_stats() const {
  // @@protoc_insertion_point(field_get:CDOTAMatchMetadata.matchmaking_stats)
  return _internal_matchmaking_stats();
}
inline void CDOTAMatchMetadata::unsafe_arena_set_allocated_matchmaking_stats(
    ::CMsgMatchMatchmakingStats* matchmaking_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matchmaking_stats_);
  }
  matchmaking_stats_ = matchmaking_stats;
  if (matchmaking_stats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAMatchMetadata.matchmaking_stats)
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::release_matchmaking_stats() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgMatchMatchmakingStats* temp = matchmaking_stats_;
  matchmaking_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::unsafe_arena_release_matchmaking_stats() {
  // @@protoc_insertion_point(field_release:CDOTAMatchMetadata.matchmaking_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgMatchMatchmakingStats* temp = matchmaking_stats_;
  matchmaking_stats_ = nullptr;
  return temp;
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::_internal_mutable_matchmaking_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (matchmaking_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgMatchMatchmakingStats>(GetArenaForAllocation());
    matchmaking_stats_ = p;
  }
  return matchmaking_stats_;
}
inline ::CMsgMatchMatchmakingStats* CDOTAMatchMetadata::mutable_matchmaking_stats() {
  ::CMsgMatchMatchmakingStats* _msg = _internal_mutable_matchmaking_stats();
  // @@protoc_insertion_point(field_mutable:CDOTAMatchMetadata.matchmaking_stats)
  return _msg;
}
inline void CDOTAMatchMetadata::set_allocated_matchmaking_stats(::CMsgMatchMatchmakingStats* matchmaking_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete matchmaking_stats_;
  }
  if (matchmaking_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgMatchMatchmakingStats>::GetOwningArena(matchmaking_stats);
    if (message_arena != submessage_arena) {
      matchmaking_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchmaking_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  matchmaking_stats_ = matchmaking_stats;
  // @@protoc_insertion_point(field_set_allocated:CDOTAMatchMetadata.matchmaking_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgDOTAProfileCard_EStatID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAProfileCard_EStatID>() {
  return ::CMsgDOTAProfileCard_EStatID_descriptor();
}
template <> struct is_proto_enum< ::CMsgProfileResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgProfileResponse_EResponse>() {
  return ::CMsgProfileResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::PartnerAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PartnerAccountType>() {
  return ::PartnerAccountType_descriptor();
}
template <> struct is_proto_enum< ::ESourceEngine> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESourceEngine>() {
  return ::ESourceEngine_descriptor();
}
template <> struct is_proto_enum< ::DOTA_GameMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_GameMode>() {
  return ::DOTA_GameMode_descriptor();
}
template <> struct is_proto_enum< ::EMatchOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchOutcome>() {
  return ::EMatchOutcome_descriptor();
}
template <> struct is_proto_enum< ::EDOTAMMRBoostType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDOTAMMRBoostType>() {
  return ::EDOTAMMRBoostType_descriptor();
}
template <> struct is_proto_enum< ::EEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EEvent>() {
  return ::EEvent_descriptor();
}
template <> struct is_proto_enum< ::EMatchBehaviorScoreVariance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchBehaviorScoreVariance>() {
  return ::EMatchBehaviorScoreVariance_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dotaproto_2eproto
